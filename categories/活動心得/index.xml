<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>活動心得 on Jimmy 's Code</title><link>https://jimmycode.tw/categories/%E6%B4%BB%E5%8B%95%E5%BF%83%E5%BE%97/</link><description>Recent content in 活動心得 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022 Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sat, 12 Dec 2020 13:35:43 +0000</lastBuildDate><atom:link href="https://jimmycode.tw/categories/%E6%B4%BB%E5%8B%95%E5%BF%83%E5%BE%97/index.xml" rel="self" type="application/rss+xml"/><item><title>網站可靠性工程工作手冊導讀會一遊</title><link>https://jimmycode.tw/posts/%E7%B6%B2%E7%AB%99%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8A%E5%B0%8E%E8%AE%80%E6%9C%83%E4%B8%80%E9%81%8A/</link><pubDate>Sat, 12 Dec 2020 13:35:43 +0000</pubDate><guid>https://jimmycode.tw/posts/%E7%B6%B2%E7%AB%99%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8A%E5%B0%8E%E8%AE%80%E6%9C%83%E4%B8%80%E9%81%8A/</guid><description>最近工作上沒什麼事，可能是快要尾牙了吧？雖然一樣很多新需求、新功能追著我跑，不過每天都還算充實快樂，只是要努力的試著學習怎麼克服溝通這門學問
於是乎，最近就常常十二月排了一些活動，像是這次天瓏書局協辦由江少傑（之前Yahoo 的工程師）帶了一場「網站可靠性工程工作手冊 」的導讀會兼簽書會(笑，技術書籍也搞這個簽名會啊&amp;gt;&amp;lt;)
基礎、基礎、還是基礎 原本從我們公司到天瓏書局很遠，光是六點準時下班都還是預計會遲到。中間我稍微跑了一下，發現還真的遲到了幾分鐘&amp;hellip;不過還好，工程師們也都是忙碌的，因此活動還沒開始！
作者前面一直講很多翻譯的甘苦談、出版社的困境、現在技術學習的方式與以前不太一樣甚至談到教育與人生&amp;hellip;哈哈，阿還有在Yahoo的工作等等，但我心裡想：我來不是想聽這些的啊&amp;gt;&amp;lt;
不過講者也在過程中其實也算導讀一些東西啦，有點發散，大概我比較有印象的關鍵如下：
Agile , CI/CD , Scrum , Test 其實這幾個都互相關聯與奠基著，穩定與速度也互相關聯著。為什麼我們的軟體專案會失敗，其實就是不知道這中間許多的細節與關聯、盲目的導入只是帶來更多的坑 一次只上一點點的改變，而不是一大包放上去，這才是CICD的做法、也是為什麼要自動上版的原因（想到我們公司CICD顯然就與這樣的想法背道而馳，而且還沒有測試，希望在我任內能將其補齊！） 團隊之間必須要有「信任」，「信任」很重要，然後也讓我想到我在看這本書剛開頭也講到所謂的「不究責」的文化，這帶給我蠻大的提醒，我們不是要來抓戰犯、而是要共同一起解決問題、處理問題啊！ 這本書是一種案例研究，如果你企圖將書上講的方法都硬套在你的公司上，那只會帶來失敗，你應該要認真好好的認識與理解你們公司的domain , 學習到本書各案例背後的精神與概念，帶去case by case 解決你們公司的問題 我問的問題 在會後，我問了幾個很笨的問題
如果沒有讀過第一本書（網站可靠性工程：Google的系統管理之道 ），在看這本書會有點看不懂嗎？ 譯者回答，基本上應該是不會的，甚至可以直接看這一本也無所謂，就當成是案例研究，他也建議可以看第一本的內容互相對照，網路上也有免費的英文版可以看呢！
做Developer不是SRE的角色，能看懂這本書嗎？ 譯者說，不會，而且開發者也應該也要試著看看這本書，學習與他人「溝通」&amp;hellip;是蠻重要的等等，旁邊也有一個工程師也說到看得懂（看起來也是他的好朋友或社群夥伴吧？！）
剛開始讀這本書 我目前才剛看一點點而已，不過就有幾個概念對我蠻有所突破的。例如我們不該追求什麼「百分百可靠度」、也了解DevOps ＆ SRE的不同、上面說到不究責的文化等等&amp;hellip;
如果對這本書有更進一步的資訊可以參加FB的社團，在FB搜尋書名就可以看得到～
小君曰：DevOps也是一門學問呢但也是一種文化！！我也正在努力的學習中</description></item></channel></rss>