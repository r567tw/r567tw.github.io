<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>活動心得 on Jimmy 's Code</title><link>https://jimmycode.tw/categories/%E6%B4%BB%E5%8B%95%E5%BF%83%E5%BE%97/</link><description>Recent content in 活動心得 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022 Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sat, 12 Dec 2020 13:35:43 +0000</lastBuildDate><atom:link href="https://jimmycode.tw/categories/%E6%B4%BB%E5%8B%95%E5%BF%83%E5%BE%97/index.xml" rel="self" type="application/rss+xml"/><item><title>網站可靠性工程工作手冊導讀會一遊</title><link>https://jimmycode.tw/posts/%E7%B6%B2%E7%AB%99%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8A%E5%B0%8E%E8%AE%80%E6%9C%83%E4%B8%80%E9%81%8A/</link><pubDate>Sat, 12 Dec 2020 13:35:43 +0000</pubDate><guid>https://jimmycode.tw/posts/%E7%B6%B2%E7%AB%99%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8A%E5%B0%8E%E8%AE%80%E6%9C%83%E4%B8%80%E9%81%8A/</guid><description>最近工作上沒什麼事，可能是快要尾牙了吧？雖然一樣很多新需求、新功能追著我跑，不過每天都還算充實快樂，只是要努力的試著學習怎麼克服溝通這門學問
於是乎，最近就常常十二月排了一些活動，像是這次天瓏書局協辦由江少傑（之前Yahoo 的工程師）帶了一場「網站可靠性工程工作手冊 」的導讀會兼簽書會(笑，技術書籍也搞這個簽名會啊&amp;gt;&amp;lt;)
基礎、基礎、還是基礎 原本從我們公司到天瓏書局很遠，光是六點準時下班都還是預計會遲到。中間我稍微跑了一下，發現還真的遲到了幾分鐘&amp;hellip;不過還好，工程師們也都是忙碌的，因此活動還沒開始！
作者前面一直講很多翻譯的甘苦談、出版社的困境、現在技術學習的方式與以前不太一樣甚至談到教育與人生&amp;hellip;哈哈，阿還有在Yahoo的工作等等，但我心裡想：我來不是想聽這些的啊&amp;gt;&amp;lt;
不過講者也在過程中其實也算導讀一些東西啦，有點發散，大概我比較有印象的關鍵如下：
Agile , CI/CD , Scrum , Test 其實這幾個都互相關聯與奠基著，穩定與速度也互相關聯著。為什麼我們的軟體專案會失敗，其實就是不知道這中間許多的細節與關聯、盲目的導入只是帶來更多的坑 一次只上一點點的改變，而不是一大包放上去，這才是CICD的做法、也是為什麼要自動上版的原因（想到我們公司CICD顯然就與這樣的想法背道而馳，而且還沒有測試，希望在我任內能將其補齊！） 團隊之間必須要有「信任」，「信任」很重要，然後也讓我想到我在看這本書剛開頭也講到所謂的「不究責」的文化，這帶給我蠻大的提醒，我們不是要來抓戰犯、而是要共同一起解決問題、處理問題啊！ 這本書是一種案例研究，如果你企圖將書上講的方法都硬套在你的公司上，那只會帶來失敗，你應該要認真好好的認識與理解你們公司的domain , 學習到本書各案例背後的精神與概念，帶去case by case 解決你們公司的問題 我問的問題 在會後，我問了幾個很笨的問題
如果沒有讀過第一本書（網站可靠性工程：Google的系統管理之道 ），在看這本書會有點看不懂嗎？ 譯者回答，基本上應該是不會的，甚至可以直接看這一本也無所謂，就當成是案例研究，他也建議可以看第一本的內容互相對照，網路上也有免費的英文版可以看呢！
做Developer不是SRE的角色，能看懂這本書嗎？ 譯者說，不會，而且開發者也應該也要試著看看這本書，學習與他人「溝通」&amp;hellip;是蠻重要的等等，旁邊也有一個工程師也說到看得懂（看起來也是他的好朋友或社群夥伴吧？！）
剛開始讀這本書 我目前才剛看一點點而已，不過就有幾個概念對我蠻有所突破的。例如我們不該追求什麼「百分百可靠度」、也了解DevOps ＆ SRE的不同、上面說到不究責的文化等等&amp;hellip;
如果對這本書有更進一步的資訊可以參加FB的社團，在FB搜尋書名就可以看得到～
小君曰：DevOps也是一門學問呢但也是一種文化！！我也正在努力的學習中</description></item><item><title>2020AWSDevDay 一日遊</title><link>https://jimmycode.tw/2020awsdevday-%E4%B8%80%E6%97%A5%E9%81%8A/</link><pubDate>Sun, 06 Dec 2020 05:27:54 +0000</pubDate><guid>https://jimmycode.tw/2020awsdevday-%E4%B8%80%E6%97%A5%E9%81%8A/</guid><description>最近請了一天公假，和很多後端組的同事一起參加今年2020 AWS Dev Day, 這是人生的第一次啊！能夠與很多AWS 的開發者聚再一起，實在是件令人興奮的事，以下就簡短、簡單的分享一下吧！
早上的議程 早上其實是共同的議程，有Pahud 大大分享的「與開發者同行」以及Kim 分享的「技術人的社群影響力」，另外也有趨勢科技分享比較硬技術的「如何在 AWS 上建立大規模實時數據管道」，老實說，第三場有點聽不太懂，感覺與現實我遇到的情境真的相差甚遠，所以很難真正理解與明白他所談的一些概念，大概知道要有所「監測」才能有所證明，如果要證明自己做好，就可以用監測/Dashboard 的方式呈現給非技術性的團隊看，這種技巧可以記一下，至於其他技術關鍵字的部分，像是 AWS kinesis , Apache Flink 等等，可能只是稍微查查 wiki 了，看看以後有沒有機會遇到這樣。
至於其他比較軟的部分，大多都是談談「人生」，但我覺得可以記下的是「技術人的社群影響力」這一場，他讓我也重新再思熱情的重要，回想起當初讀資管、寫程式的小初衷。或許明年，可以選擇某個社群認真參加一下、投入一下，一個人可以走的快、但一群人可以走得更遠啊！
而另外我也很想在明年找一個G0V某個專案，好好給他投入一下，貢獻作為技術者的社會影響力！但說真的，還是要給他認真的付諸實踐才是真的！
謝謝在外面擺攤的DDD TW 的社群義工，當我很認真地問起DDD, 甚至問了很多很基礎很初學的問題都還是很不厭其煩地為我解答！說真的之前就大概聽過DDD，就我的理解上是一種軟體開發方法論，可以將業務知識對應到我們的程式的方法，我覺得真的很適合拿來放在我在做產品的工作場域！希望藉由之後認真地給他投入DDD社群的過程中，真正學習、認識、應用與實踐DDD。畢竟，作為工程師，還是希望自己寫一手漂亮、好維護、可傳承的程式碼與產品啊！Be a better Coder ! Also be a better Architect!
在下午的議程中，我先選擇了Track C 的第一場，之後就都待在Track A了&amp;hellip;
CDK家族介紹：CDK, CDKTF 及 CDK8S 這場還蠻基礎的，因為先前參加過Pahud 的serverless php 工作坊，稍微認識過了CDK ,而在之後也有時候會看Pahud的Youtube影片學習，最近鐵人賽也有熱心人士分享CDK的學習(目前正在學習中) ，所以這場的知識量對我來說真的有點偏少，但也很不錯了，因為我直接跳過一些基礎或歷史直接學CDK難免還是會有點卡卡的，藉這此議程補足之前沒有補上的歷史與基礎也很不錯，當然啦，我覺得我不太認識Kubernetes也是一個小小的致命問題之一，學好Docker 卻沒有學好 Kubernetes真的有點傷啊！ 看來以後要補足這一塊的知識！
運用 AWS Fargate 與 Amazon ECS 的 CI/CD 最佳實踐 這一場談到CICD的最佳實踐，說真的也是有點偏基礎，日常我工作就有在用到了&amp;hellip;不過他談到一個Blue/Green 部署的概念可以放在心上，就是讓舊的版本先飛一陣子，只有一部分的人用新的版本，等到新的版本穩定了，再將原本舊的版本拿掉。這樣的好處是如果到時候要從新版本還原很方便（大概我是記得這樣啦XD）。
技術選型，今天要選 ECS Fargate 還是 ECS EC2 launch types 老實說，他其實沒有講什麼，最後也沒有真的大概指名什麼狀況要選Fargate,什麼時候要選Ec2 (之後可能還有ECS anywhere ?</description></item><item><title>LaravelConf 2020 心得</title><link>https://jimmycode.tw/laravelconf-2020-%E5%BF%83%E5%BE%97/</link><pubDate>Sat, 22 Aug 2020 08:25:35 +0000</pubDate><guid>https://jimmycode.tw/laravelconf-2020-%E5%BF%83%E5%BE%97/</guid><description>上個月底我參加 LaravelConf 2020
買的是直播票線上票。先分享一下會眾們的筆記先：https://hackmd.io/@LaravelTaiwan/Conf2020/%2F1p8VzdKxR7eZ210Lk0j3pA 強型別 其實整體心得不太多，因為自從2017 年、2019年這樣參加下來，我覺得自己能聽懂的越來越多，反而是比較多是「人生」上面的思考。 像是：我覺得最近PHP越來越往強型別靠攏、javascript 也有相對的TypeScript , 聽 Ant 大大講到，強型別的好處是可以有助於之後在程式碼上的靜態分析&amp;hellip; 不禁讓我覺得，要開始好好學習強型別、希望可以在之後經手的專案上慢慢導入強型別的習慣吧！
基本功打穩 至於serverless 的部分，真的是最近慢慢接到 lambda 的專案才慢慢認識他。其實serverless 才不是真的不管server, 只是對server的控制權、管理權降低，讓開發者可以更多地專注於商業邏輯。其實有時出錯了有時還是需要看看server 與 跑的狀態&amp;hellip; 後來工作幾年後感覺，那些在大學上過的作業系統、網路概論真的蠻重要的，基礎很重要！這也是我最近也在試著把那些基礎補起來的一個想法&amp;hellip;
小君曰： 所以，要開始繼續往Better coder 的偉大航道前行！！</description></item></channel></rss>