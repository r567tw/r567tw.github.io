<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>讀書筆記 on Jimmy 's Code</title><link>https://jimmycode.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/</link><description>Recent content in 讀書筆記 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022-{year} Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Wed, 04 Nov 2020 13:35:43 +0000</lastBuildDate><atom:link href="https://jimmycode.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/index.xml" rel="self" type="application/rss+xml"/><item><title>Ruby 筆記</title><link>https://jimmycode.tw/posts/ruby-%E7%AD%86%E8%A8%98/</link><pubDate>Wed, 04 Nov 2020 13:35:43 +0000</pubDate><guid>https://jimmycode.tw/posts/ruby-%E7%AD%86%E8%A8%98/</guid><description>Ruby基礎 [Ruby 的註解方式][1] #單行註解 Hello.rb 變數與輸入輸出 1puts &amp;#39;Hello World&amp;#39; #output Hello World 2puts 20+2 #output 22 3puts 20-2 #output 18 4puts 20*2 #output 40 5puts 20/2 #output 10 6name=&amp;#39;John&amp;#39; #no output 7puts name #john 8name=gets.chomp #get user input 9puts &amp;#39;Hello&amp;#39;+name #output Hello John 10print &amp;#39;Hello world&amp;#39; #不會換行 output Hello World puts 印出資料 (換行) print 印出資料(不換行) gets.chomp 取得輸入 +將兩個文字串接 boolean: true 和 false Tips:
\= 指派相等
\== 比較是否相等
!= 比較是否不相等
irb irb 是一個ruby 的命令介面，可以即時執行ruby 結果 control+l 清空 exit 離開 if &amp;hellip;else&amp;hellip;end 1#number =8 2number = Random.</description></item><item><title>Laravel 建置與執行及相關筆記</title><link>https://jimmycode.tw/posts/laravel-%E5%BB%BA%E7%BD%AE%E8%88%87%E5%9F%B7%E8%A1%8C%E5%8F%8A%E7%9B%B8%E9%97%9C%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 31 Aug 2019 11:15:17 +0000</pubDate><guid>https://jimmycode.tw/posts/laravel-%E5%BB%BA%E7%BD%AE%E8%88%87%E5%9F%B7%E8%A1%8C%E5%8F%8A%E7%9B%B8%E9%97%9C%E7%AD%86%E8%A8%98/</guid><description>Laravel 建置與執行 1.為甚麼要使用Laravel 為甚麼要使用框架 Laravel Lumen Slim 歷史 Ruby on rails CodeIgniter Laravel Laravel 的設計哲學 使用與光有關的字眼 illuminate 照亮 spark 火花 提升開發速度和開發者的幸福 Laravel 社群 2.設置Laravel 開發環境與介紹 系統需求 Composer 本地開發環境 Laravel Valet (mac) Laravel Homestead vagrant up vagrant suspend vagrant halt vagrant destroy vagrant provision laravel new &amp;amp; composer create-project Laravel 的目錄結構 3.路由與控制器 1Route::get(&amp;#39;/&amp;#39;,function(){ 2 return &amp;#39;Hello World&amp;#39;; 3 //return view(&amp;#39;welcome&amp;#39;); #resources/views/welcome.blade.php 4}) 5 6#可用正規表達式限制路由 7Route::get(&amp;#39;/{name}&amp;#39;,function(){ 8 return &amp;#39;Hello World&amp;#39;; 9})-&amp;gt;where(&amp;#39;name&amp;#39;,&amp;#39;[0-9]+&amp;#39;) 路由動詞 Get 觀看 Post 新增 Put/Patch 更新 Delete 刪除 any 1 Route::any(&amp;#39;/&amp;#39;,function(){}) match 1 Route::match([&amp;#39;get&amp;#39;,&amp;#39;post&amp;#39;],&amp;#39;/&amp;#39;,function(){}) 中介層 middleware 在進入controller 之前 過濾request 的條件和身分等 有controller construct 和 route 定義兩種方式宣告 使用視圖組件讓所有視圖共用變數 1 view()-&amp;gt;share(&amp;#39;variable&amp;#39;,&amp;#39;variable); Controller</description></item><item><title>現代PHP 讀書筆記</title><link>https://jimmycode.tw/posts/%E7%8F%BE%E4%BB%A3php-%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/</link><pubDate>Sun, 25 Aug 2019 07:28:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E7%8F%BE%E4%BB%A3php-%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/</guid><description>1.現代的php php 是一個直譯式的伺服器端腳本語言 php 引擎是一個可以解析、直譯和執行php 程式碼的程式 Zend Engine HipHop Virtual Machine Hack 程式語言：建立在PHP 之上的新程式語言 靜態型別 動態型別在程式執行時期檢查；靜態型別再編譯時期被檢查(第十二章) 2.特點 名稱空間 namespace php5.3.0 解決class 名稱的衝突 緊接&amp;lt;?php標籤之後 讓我們創造出程式碼並獨立運作於其他開發者的程式 Import and Alias 不用輸入完整的namespace 落落長的名稱 1#不利用import and alias 2$response = new \Symfony\Component\HttpFoundation\Response(&amp;#39;oops&amp;#39;,400); 3#利用import and alias 4use \Symfony\Component\HttpFoundation\Response as Res 5$r=Res(&amp;#39;oops&amp;#39;,400) 多重匯入(可以好幾個use) 單一檔案多重名稱空間 1&amp;lt;?php 2namespace foo{ 3 4} 5namespace bar{ 6 7} 全域名稱空間 有些程式碼沒有名稱空間，將存在於全域名稱空間，例如exception 1&amp;lt;?php 2namespace My\App 3class foo{ 4 public function do(){ 5 $exception = new \Exception() 6 } 7} 程式碼作為介面 一個介於兩個php 物件之中的合約，它讓一個物件瞭解另一個物件可以做甚麼，而不是另一個物件是甚麼 interface 的撰寫 特徵機制 trait from php5.</description></item><item><title>讀軟技能-工程師該如何生活</title><link>https://jimmycode.tw/posts/%E8%AE%80%E8%BB%9F%E6%8A%80%E8%83%BD-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E8%A9%B2%E5%A6%82%E4%BD%95%E7%94%9F%E6%B4%BB/</link><pubDate>Sun, 19 May 2019 00:27:10 +0000</pubDate><guid>https://jimmycode.tw/posts/%E8%AE%80%E8%BB%9F%E6%8A%80%E8%83%BD-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E8%A9%B2%E5%A6%82%E4%BD%95%E7%94%9F%E6%B4%BB/</guid><description>本月讀了一本技術相關的書，其實也有點和技術打不上八竿子著&amp;hellip;&amp;hellip;然後也順便該為我這個部落格除除草了&amp;hellip;..
這本書的書名叫做軟技能，英文書名是：Soft Skills。沒有非常高的技術含量，但卻是作為技術人員可以被提醒的一本「生活指南」。在書中的一開始講到職涯的規劃、之後是如何面試、增加生產力、健身甚至是到理財&amp;hellip;. 總之你生活上想到的應該這本書都有談到&amp;hellip;..(包含愛情～不過也只有簡短的一章啦)
軟技能的作者非常鼓勵技術人員、工程師寫部落格&amp;hellip;.. 我個人也是非常同意&amp;hellip;希望我也能好好維持這個寫部落格的習慣，將「自己行銷出去」！
分享我個人對於這本書比較印象深刻的地方：
我們必須將自己視為「企業」，好好規劃自己的職涯 面試簡單來說就是要獲得面試官的喜歡 關於職業倦怠：只要你能越過這道牆，到牆的另外一側，突然間事情都開始變得豁然開朗，又能重新拾回你的動機與興趣 LDLT學習法 ：Learn – Do – Learn – Teach 十步驟學習方法： 綜觀全貌 決定範圍 定義成功 尋找資源 建立學習計畫 篩選資源 學習恰到好處的基礎知識（Ｌ） 實作（Ｄ） 學習足夠學以致用的知識（Ｌ） 教導他人（Ｔ） 其中作者在寫理財篇的時候竟然最後談到「十一奉獻」&amp;hellip;繼上次我看過C#技術書籍有作者大力向讀者傳福音之後又一個談到信仰ＸＤ 但這本書信仰含量不高啦，畢竟他是寫給工程師們的～ 其實經歷一些歲月，這本書的內容都會認真的經歷與學習，我覺得並沒有說是很「值得收藏」的書，但或許是一本「當自己程式寫累的時候」翻翻看的書。我想重要的是：人生不能只有程式！
而我前陣子才真的有所體會：我一直過於focus 在提升自身技術能力，但其實技術只是「工具」，程式設計本質上是個「解決問題的藝術」！ 願我之後能不斷的進步，能夠成為真正可以解決問題的工程師。
小君曰：好好學習如何生活！</description></item></channel></rss>