<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>鐵人賽 on Jimmy 's Code</title><link>jimmycode.tw/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/</link><description>Recent content in 鐵人賽 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022-{year} Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Mon, 14 Oct 2019 16:03:16 +0000</lastBuildDate><atom:link href="jimmycode.tw/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>賽後小感想以及後續學習</title><link>jimmycode.tw/posts/%E8%B3%BD%E5%BE%8C%E5%B0%8F%E6%84%9F%E6%83%B3%E4%BB%A5%E5%8F%8A%E5%BE%8C%E7%BA%8C%E5%AD%B8%E7%BF%92/</link><pubDate>Mon, 14 Oct 2019 16:03:16 +0000</pubDate><guid>jimmycode.tw/posts/%E8%B3%BD%E5%BE%8C%E5%B0%8F%E6%84%9F%E6%83%B3%E4%BB%A5%E5%8F%8A%E5%BE%8C%E7%BA%8C%E5%AD%B8%E7%BF%92/</guid><description>終於來到這最後一天，然而人家最後一天都在寫些感言充廢文，我在這一天還是要稍微帶點技術含量的東西ㄎㄎ
以下東西很多又很雜，畢竟 php 就是義大利麵嘛(大誤)，請耐心閱讀～
Laravel Best Practice 介紹一個 Github 專案：https://github.com/alexeymezenin/laravel-best-practices
裡面介紹很多建議的 Laravel 寫法，例如驗證不要寫在 controller 裡面，而是用 Request 類別作為包裝，在寫 Laravel 的時候可以根據這些原則檢核一下自己
Laravel 遇上大架構 當 Laravel 遇到大架構的時候，基本上我們不會把這些東西都只是塞在 Model\Controller\view 當中，而是會使用到 Repository、Service、Presenter 或 Transformer 做包裝，分別控制資料庫邏輯與商業邏輯、顯示的邏輯和格式的回傳，讓程式更加容易維護、易讀
大架構的部分說明你可以參考以下網址：
https://learnku.com/articles/19452 https://www.youtube.com/watch?v=pzY0FBafXd0 https://www.muzilong.cn/storage/html/2/oomusou.io/laravel/laravel-architecture/index.html 可以讓 PHP 偉大的其他東西 其實只學會 Laravel 不足以讓 PHP 偉大啦，不過我期許自己是能夠成為越來越強的 phper 的喔！希望你們也是＾＾
1.學習 swoole：據說這是可以讓 php 效能 up up 的工具框架，是現代 phper 值得學習的一項東西，也是可以讓 php 邁向異步時代的重要推手
2.學習 composer：我還能說什麼呢？沒有 Composer 別跟我說他是現代 php 框架 XD
2.學習 lumen、slim: 剛剛學過 Laravel 一遍了，他就是這麼的肥這麼的胖，所以如果能學會幾個微框架是不錯的，對應 Laravel 來說，Lumen 就是他的簡易版，相信學會了 Laravel 以後，Lumen 上手應該不是什麼太大的難事。</description></item><item><title>Laravel 套件</title><link>jimmycode.tw/posts/laravel-%E5%A5%97%E4%BB%B6/</link><pubDate>Mon, 14 Oct 2019 12:16:36 +0000</pubDate><guid>jimmycode.tw/posts/laravel-%E5%A5%97%E4%BB%B6/</guid><description>今天將帶大家快速帶過幾個官方套件以及個人工作經驗上覺得好用的套件。並且後續也給大家相關的軍火庫可以在日後開發專案上用到。基本上有相對應的需求才用，可以搭配該套件的官方文件撰寫程式，這些基本上文件都很易讀，相信無痛上手是很有可能的喔！
官方套件 篇 首先我一定要先推薦一下 Laravel 官方提供的套件啦，就是這些套件形成 Laravel 一個龐大且厲害的生態系。
Laravel Cashier(官方文件 ):一個關於金流的套件，他可以與國外金流公司 API 做無痛的結合，例如 Stripe 或者 Braintree，當然，如果台灣的話可以使用其他的套件，例如laravel-newebpay 或者laravel-payum Laravel Dusk(官方文件 ):還記得我們之前的測試篇嗎？其實 Dusk 這個服務有點像是Browsers的測試，如果你看到文件你就大概明瞭，他是有點 for 終端測試的角色
Laravel Passport(官方文件 ):一個快速建立 API 授權請求的相關套件，基於 Oauth2 標準
Laravel Scout(官方文件 ): 一個基於 Eloquent Model 所建立的全文搜索相關開發套件，並且預設以 Algolia 作為驅動
Laravel Socialite(官方文件 ):我們在網頁註冊的時候，常常看到 FB/Google 一鍵登入對吧？其實實作 Facebook，Twitter，LinkedIn，Google，GitHub，GitLab 和 Bitbucket 等等相關身份驗證機制並不難，這個套件可以提供你這樣的功能～
Laravel Telescope(官方文件 ):本人認為史上最牛的開發調試工具，可以觀察資料庫、也可以觀察任務工作、Request/Respose 等等
另外還有很多其他的官方套件，不過我覺得很少用所以就不特別介紹了&amp;hellip;&amp;hellip;
個人經驗 篇 laravel-excel(官方文件 ): 一個可以方便操作 Excel 的套件 laravel log viewer(官方文件 ):有時候我們會需要 Trace log 好幫助我們能夠 trace Request 或者 Response 喔喔～</description></item><item><title>Laravel: 遺珠之憾</title><link>jimmycode.tw/posts/laravel-%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</link><pubDate>Sat, 12 Oct 2019 16:29:29 +0000</pubDate><guid>jimmycode.tw/posts/laravel-%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</guid><description>剩下最後的三天鐵人賽，其實原本我有點想繼續寫下去的&amp;hellip;但說真的有點有氣無力，如果你發現我最近這幾天的文章風格與教學，就可以發現我其實有點虎頭蛇尾了哈哈。
所以最後這三天將進入第三階段新的章節，也就是主要會再討論關於 Laravel 的套件、以及大架構、還有 Best Practice 等等的內容，雖然技術含量不高，但也就是我基於我所有的 Laravel 經驗全力輸出了！
不過我個人是還蠻喜歡看書的，在資訊界的領域當中，歐萊禮是很多人常常入門的資訊書出版社。所以這裡，我要學習歐萊禮的寫作風格，寫寫一些遺珠之憾，好讓大家不至於感覺有點一半跑掉，而是後續還能有些內容學習和追蹤。
Notifications Laravel 有一個類別是 Notifications，有別於我們之前寫到的 mailable 可以寄信，Notifications 可以寄送通知到其他服務，例如 Slack、簡訊、或者其他類似可以收取資訊的內容
Queues 這個東西允許你將一個比較耗時的任務延後處理，好讓你的網頁服務不至於為了處理某些很複雜的請求讓後面在等待的其他請求全部 pedding，無法更快的反應。而他的背後又可以與 Redis 或者 Amazon SQS 等服務一起工作
Cache Laravel 是個全能型的框架，所以其實他的速度會很慢，所以 Laravel 允許你快取一些設定檔或者路由，好讓整個網頁的效能可以做個簡易的提升，像是php artisan config:cache或者php artisan route:cache之類的指令都可以做這樣的快取。
Frontend Laravel 的前端框架預設是Vue，然而，現在他也允許使用React了，在我們目錄底下有一個檔案是webpack.mix.js，還記得我們之前使用Auth的時候就有用到類似npm run build之類的指令嗎，其實就是動用這個檔案裡面的設定與調整。以及 resourse 裡面的 js 檔如何做出編譯也是這部分的課題。
Broadcasting(廣播) 此類課題有點困難，我自己也私自下班玩過一次而已，這個東西其實需要配合前端以及相對應的套件，其中一個用途就是可以寫聊天室、或者與 Websocket 的結合，讓網頁也可以主動通知使用者
Event 它提供了一個簡單的監聽器實作，允許你在應用程式可以訂閱和監聽事件
Laravel 及 Redis 相互搭配使用
明天我將分享一些生態系的官方套件以及自己之前工作經驗常用到的套件。明天見囉！</description></item><item><title>Laravel Collections</title><link>jimmycode.tw/posts/laravel-collections/</link><pubDate>Fri, 11 Oct 2019 16:16:46 +0000</pubDate><guid>jimmycode.tw/posts/laravel-collections/</guid><description>接下來，我想要分享關於Laravel 的一個比較特別的類別：Collections 他有點像是陣列的概念，但更像是一個集合的概念。
相信如果你還記得前面教學談到幾行的程式碼，裡面不是有Article::all和$article-&amp;gt;tags這幾段嗎？如果你去dd()它，你會發現他們都是同一種類別：Illuminate\Database\Eloquent\Collection
當然，如果你有在之前helper的章節發現到collect()這個方法，他其實回傳的也是Collection，但是他是Illuminate\Support\Collection
兩者在使用上會有一些差異，基本上他們也是大部分使用上也蠻像的，所以我就在這裡把他們放在一起講。
兩者使用差異可以參考這篇文章：https://medium.com/@lynnlin827/two-types-of-collections-in-laravel-888d43858c4e
Laravel為Collection這個類別提供許多的方法，例如map()或者avg()等等，其實和helper()那裏一樣，其實文件也大部分都寫的清清楚楚了。 https://laravel.com/docs/6.x/collections#available-methods
是不是有點像是在寫JavaScript在處理呢！沒錯，我也有這樣的感覺。但這樣似乎程式變得更好讀了呢！
另外Laravel在6.0也推出Lazy Collections的類別，是為了處理我們有時候會有大量的資料時候，避免一次全部讀進記憶體，使用到比較現代化的PHP技巧：yield 和 generator，而開發的一個新類別。其實使用方法很簡單，就是將我們原本使用的all()改成cursor()就完成囉！</description></item><item><title>Laravel 多語系網站</title><link>jimmycode.tw/posts/laravel-%E5%A4%9A%E8%AA%9E%E7%B3%BB%E7%B6%B2%E7%AB%99/</link><pubDate>Thu, 10 Oct 2019 16:42:58 +0000</pubDate><guid>jimmycode.tw/posts/laravel-%E5%A4%9A%E8%AA%9E%E7%B3%BB%E7%B6%B2%E7%AB%99/</guid><description>接著前一天的Helper主題，我們那時談到了trans()這個helper，底下應該會常常在使用它，我們有時候會需要有國際化的需求，需要征服宇宙，所以做一個多語系的網站是有必要的。接下來，讓我們來示範一下Laravel這個全能型框架關於多語系能力的展現吧！
網頁要實現所謂的多語系有兩種方法
建立多個網站(土法煉鋼型)：例如我需要有英文和中文的網站，就會英文有一個網站，中文又會有另外一個網站。這兩個網站的樣子可能會有很大的不一樣或者很大的一模一樣，好處是：可以就語系別做出更高的客製化，然後壞處就是：費工，重複造的輪子肯定很多
使用語系檔將檔案內容作出轉換：以上面的例子來說，可能我會有一個中文的語系檔和另外一個英文的語系檔，根據網站的語系選擇呈現以某個語系檔所轉換過來的文字。好處是：重複造的輪子不多，只要學會翻譯文字就好，壞處就是無法提供給各語系特別的客製化。
我大概能想到的優點和缺點就是這樣，如果有大大可以補充歡迎告訴我。 接下來我們將示範說明的會是第二類。使用所謂的語系檔轉換內容。
Laravel 語系檔存放在resources/lang資料夾的檔案裡。在此資料夾內，一個蘿蔔一個坑，一個網站支援的語系對應到一個語系子目錄。像是這樣的結構：
1/resources 2 /lang 3 /en 4 messages.php 5 /zh-Hans-TW 6 messages.php 語系檔裡面放的到底是什麼，其實就是大概這樣而已拉
1&amp;lt;?php 2 3return [ 4 &amp;#39;welcome&amp;#39; =&amp;gt; &amp;#39;Welcome to our application&amp;#39; 5]; 一般來說，網站的預設語系是在config/app.php這個檔案裡面有一個locale的屬性
1 &amp;#39;locale&amp;#39; =&amp;gt; &amp;#39;en&amp;#39;, 然而如果我們想要切換語系的話該怎麼辦？其實很簡單，使用App::setLocale($locale);這個方法就可以了，以下讓我們做個簡單的火力展示。
首先是增加個Route規則
1Route::get(&amp;#39;welcome/{locale}&amp;#39;, function ($locale) { 2 app()-&amp;gt;setLocale($locale); 3 return view(&amp;#39;welcome&amp;#39;); 4}); 然後分別建立兩個檔案，一個是resources/lang/zh-TW/message.php以及resources/lang/en/message.php，分別在裡面寫這些：
1//zh-TW/message.php 2&amp;lt;?php 3 4return [ 5 &amp;#39;welcome&amp;#39; =&amp;gt; &amp;#39;歡迎來到我們的應用程式&amp;#39; 6]; 7 1//en/message.php 2&amp;lt;?php 3 4return [ 5 &amp;#39;welcome&amp;#39; =&amp;gt; &amp;#39;Welcome to our application&amp;#39; 6]; 之後到welcome.</description></item><item><title>Laravel Helpers</title><link>jimmycode.tw/posts/laravel-helpers/</link><pubDate>Wed, 09 Oct 2019 17:04:16 +0000</pubDate><guid>jimmycode.tw/posts/laravel-helpers/</guid><description>寫到這裡，終於剩下最後的5天就可以完成這整個鐵人賽！（撒花
接下來希望自己再接再厲。繼續完成後續幾天的Laravel 教學系列。 今天也是個簡單風（好幾天都是簡單風了QQ）
介紹一下Laravel作為一個全能型的框架，還提供了一些稱為「Helper」的東西幫助我們可以整理程式碼、封裝了一些我們常常會弄到的部分，也可以稱之為「語法糖」，總之幫助我們可以避免「重複造輪子」。而順道一提的是：我們之前也早已用過這些東西了：例如route()、view()或者factory()
如果你看到文件：https://laravel.com/docs/master/helpers
其實大概這些語法可以分類為以下幾種：
陣列及物件類：可以處理陣列與物件的資料等，例如：Arr::add()、Arr::where()&amp;hellip;
路徑類：就是Laravel一些資料夾的路徑，像是public_path、storage_path()&amp;hellip;
字串類：可以處理我們的字串，Str::camel或trans()，預告一下明天將會討論關於多語系的網站設計，trans()便是我們到時會可能會用到的方法～
網址類：像是我們之前會用到的route()方法、以及asset()方法都是回傳一串的網址。
其他：像是無法歸類以上四類的，之前我們用到的view()或者factory()都在這個裡面，而這裡我也順道介紹一個我們在debug常常會用到的dd()
在你任何想要的地方，如果你想知道這個值到底傳出來是怎麼樣的值、怎麼樣的型態，你可以使用dd()，例如我們昨天的分頁：
1dd(Article::paginate(5)) 當執行到dd()的時候會立刻終止那一段程式，並且var_dump回傳被dd的值與型態，像是這樣 我覺得Laravel的文件是世界上最好讀的文件，我想剩下的你們應該可以自行探索吧XD</description></item><item><title>Laravel Pagination</title><link>jimmycode.tw/posts/laravel-pagination/</link><pubDate>Tue, 08 Oct 2019 18:21:24 +0000</pubDate><guid>jimmycode.tw/posts/laravel-pagination/</guid><description>沒想到寫這麼多天以來，我居然漏掉一個這麼重要的環節：「分頁」。在網頁的世界中，讓資料作出排序及分頁絕對是必要做到的一件事情，Laravel作為一個全能框架，這項功能肯定是有放在裡面的。讓我們以文章列表作為範例，其實就是將原本的Article::all()改為Article::paginate(5)就好囉，至於那個5看你想換哪個數字都可以，那個意思是你要幾個項目為一頁。 然而我知道，你會想問如果底下沒有一個可以點連結的頁數頁尾那怎麼行，超簡單，在article/index.blade.php這個檔案下面放至一行程式碼
1{{ $articles-&amp;gt;links() }} 這樣你就看到囉 這樣這個分頁是不是很簡單？當然，如果你想要客製化，可以使用這個指令
1php artisan vendor:publish --tag=laravel-pagination 你會在views/vendor/pagination裡面看到很多的類似樣板的分頁檔案，bootstrap-4.blade.php是預設的分頁樣板，如果你想要客製化，可以修改那個檔案！ 當然既然給了我們這麼多的分頁樣板，當然可以用其他的囉，讓我們來修改一下預設的分頁樣板。 來到app/Providers/AppServiceProvider.php這個檔案，use Paginator，之後在boot裡面加入Paginator::defaultView('vendor.pagination.semantic-ui');就可以從bootstrap-4.blade.php改成semantic-ui.blade.php囉
1use Illuminate\Pagination\Paginator; 2...（略） 3public function boot() 4{ 5 Paginator::defaultView(&amp;#39;vendor.pagination.semantic-ui&amp;#39;); 6} 另外補充一下：如果你想只是有上一頁或下一頁的連結的話，可以使用simplePaginate這個方式。然後按照上面的方式去客製化你的分頁按鈕，他只是在檔案加入simple的前綴而已。
想要更多研究可以看此文件：https://laravel.com/docs/6.x/pagination
要看完整程式碼的可以參考這裡:https://github.com/r567tw/Make-PHP-Great-Again/commit/f3ab7fb7816555dce91df98ea242114b4f477a2e</description></item><item><title>Laravel Task Scheduling</title><link>jimmycode.tw/posts/laravel-task-scheduling/</link><pubDate>Mon, 07 Oct 2019 16:24:11 +0000</pubDate><guid>jimmycode.tw/posts/laravel-task-scheduling/</guid><description>接下來我想要分享一些關於 CronJob 的一些事情，有時候，我們會有一些日常的工作需要在每天某一個時間固定執行，像是網頁世界最常見的就是發電子報，這只是最常見的例子，當然還有其他類似的例子，例如會員卡收費、清Log之類的，我們可以透過 Laravel 的 Task Scheduling 來做這些事情，管你想新增多少項、要做什麼，只要能用程式寫得出來，都可以來做喔！
還記得我們前幾天談到的Laravel Artisan 以及 Command 嗎？當然，寫 Task Schedule 可以有很多種不同的方式，但我個人建議是使用先建立 Command 的方式可以讓我們比較好的管理程式碼。當然，其他方法我也會分享的喔～
把 Laravel 加入 CronJob 不知道什麼是 Cron Job 嗎？我剛剛都解釋那麼清楚了：就是一到某個時間，電腦(如果還是開啟的狀態下)就會執行的工作。相對於我們網頁必須要透過request才能發動response的情況下，Cron Job主動多了。
如果你是 Mac 或者 Linux 系統，可以使用這個指令，如果你是 windows 的話，建議你換一個作業系統，開玩笑的，是可以參考網路上說在 windows 建立 cron job 的流程。
1$ crontab -e 這個指令會讓你進入到一個vim的模式，你可以參考即將失傳的古老技藝 Vim ，總之我們先按一個i按鍵，加入底下這行
1* * * * * cd /path-to-your-project &amp;amp;&amp;amp; php artisan schedule:run &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1 path-to-your-project只是個例子，請使用你所在的 Laravel 的主目錄 這個部分就是告訴電腦每分鐘都到我那個Laravel專案的目錄，執行php artisan schedule:run 這個指令
貼完那一行之後，你可以按esc,之後使用:wq，離開vim的模式。 之後你會看到這個結果就表示你成功了啦
1crontab: installing new crontab 你也可以用crontab -l做進一步的確認。 定義要被 schedule 的指令或流程 該在哪裡定義 schedule 呢？其實很簡單喔，就是在app/Console/Kernel.</description></item><item><title>Laravel File Storage</title><link>jimmycode.tw/posts/laravel-file-storage/</link><pubDate>Mon, 07 Oct 2019 10:29:27 +0000</pubDate><guid>jimmycode.tw/posts/laravel-file-storage/</guid><description>接下來我分享關於Laravel內建關於檔案管理的部分，先上個文件：https://laravel.com/docs/6.x/filesystem
Laravel 的檔案除了傳統上的可以存在本機(Server)上，也可以存在AWS S3和ftp/sftp喔，也可以配合一些大大寫好的套件存在GCP或者其他儲存的載體中。
這裡就簡單說明一下：
如果你要提取檔案 1$contents = Storage::get(&amp;#39;file.jpg&amp;#39;); 如果你想要從AWS S3取得檔案的話，在中間加入一個disk即可 1$contents = Storage::disk(&amp;#39;s3&amp;#39;)-&amp;gt;get(&amp;#39;file.jpg&amp;#39;); 註：ftp 和sftp以此類推&amp;hellip;
而在文件當中也說到我們可以去強迫他人下載檔案，大家有印象的話通常我們在某些連結點擊時不是就會出現一個跳窗(問你要存在哪裡？)(沒有的話可能是你已經先做預設的調整了～)，在Laravel可以這樣用：
1return Storage::download(&amp;#39;file.jpg&amp;#39;); 接下來，我決定帶大家試做一遍，一個極簡單可以上傳檔案的表單。好讓大家試試看這個File Storage的API。
建立Route、Controller和blade 首先，我們先準備兩個route，一個是上傳檔案的form，另外一個則是負責上傳流程的。
1// in routes/web.php 2Route::get(&amp;#39;upload&amp;#39;,&amp;#39;UploadController@uploadPage&amp;#39;); 3Route::post(&amp;#39;upload&amp;#39;,&amp;#39;UploadController@upload&amp;#39;); 然後建立一下UploadController，你可以用指令，也可以手動建立
1$ php artisan make:controller uploadController 然後，我們先來處理form的部分，uploadPage裡面就只是簡單回傳一個view
1 public function uploadPage(){ 2 return view(&amp;#39;fileUpload&amp;#39;); 3 } 別忘了要到resources/view資料夾建立fileUpload.blade.php
1@extends(&amp;#39;layouts.app&amp;#39;) 2 3@section(&amp;#39;content&amp;#39;) 4&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; 5 &amp;lt;div class=&amp;#34;row justify-content-center&amp;#34;&amp;gt; 6 &amp;lt;div class=&amp;#34;col-md-8&amp;#34;&amp;gt; 7 &amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt; 8 &amp;lt;div class=&amp;#34;row justify-content-center&amp;#34;&amp;gt; 9 @if (isset($message)) 10 &amp;lt;div class=&amp;#34;success&amp;#34;&amp;gt; 11 {{ $message }} 12 &amp;lt;/div&amp;gt; 13 @endif 14 &amp;lt;form class=&amp;#34;form&amp;#34; action=&amp;#34;&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt; 15 @csrf 16 &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt; 17 &amp;lt;label for=&amp;#34;&amp;#34;&amp;gt;檔案上傳&amp;lt;/label&amp;gt; 18 &amp;lt;input class=&amp;#34;form-control-file&amp;#34; type=&amp;#34;file&amp;#34; name=&amp;#34;ImageFile&amp;#34; id=&amp;#34;&amp;#34; accept=&amp;#34;image/*&amp;#34;/&amp;gt; 19 &amp;lt;/div&amp;gt; 20 &amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; type=&amp;#34;submit&amp;#34;&amp;gt;送出&amp;lt;/button&amp;gt; 21 &amp;lt;/form&amp;gt; 22 &amp;lt;/div&amp;gt; 23 &amp;lt;/div&amp;gt; 24 &amp;lt;/div&amp;gt; 25 &amp;lt;/div&amp;gt; 26&amp;lt;/div&amp;gt; 27@endsection 請記得，上傳檔案的form必須要加一個enctype=&amp;quot;multipart/form-data，否則你無法上傳檔案。</description></item><item><title>Laravel Testing</title><link>jimmycode.tw/posts/laravel-testing/</link><pubDate>Sun, 06 Oct 2019 12:17:36 +0000</pubDate><guid>jimmycode.tw/posts/laravel-testing/</guid><description>接下來我決定我要分享的部分就是關於測試的部分，我指的可不是我們在前端頁面點一點、拉一拉的肉眼測試喔，而是利用程式測試程式。在 php 有一個很有名的工具：PHPUnit，這麼湊巧的是，Laravel 也結合了這個部分，很巧妙的讓我們也能夠輕鬆的使用 phpunit，搭上 TDD 的方法，讓我們更能夠寫出優秀、強韌的程式來。
資料夾 首先讓我們看到在 Laravel 專案底下，有一個tests的資料夾，賓果！那就是我們測試所放的部分，Feature是放置比較針對功能面，需求面功能的測試類別，而Unit則是放置關於檔案，像是 Model、Services 等等的測試類別，別急，接下來我會舉一些例子讓你們更加清楚一些。
如何執行 1$ ./vendor/bin/phpunit 就這麼簡單，把 vendor 裡面的 bin 有一個 phpunit，把他呼叫起來就好了，如果你什麼都還沒做的話應該會類似以下的畫面
1PHPUnit 8.3.4 by Sebastian Bergmann and contributors. 2 3.. 2 / 2 (100%) 4 5Time: 735 ms, Memory: 20.00 MB 6 7OK (2 tests, 2 assertions) ㄟ ？哪裡來的兩個測試？哈，原來是 Laravel 自己就附帶兩個測試了，一個是Feature/ExampleTest.php，另一個則是Unit/ExampleTest.php
然後你會看到類似assert為前綴的函式，那就是可以讓我們做結果對應的函式喔。詳細的使用信息你可以參考這個文件：https://laravel.com/docs/6.x/http-tests#available-assertions
做個示範：以新增文章還有測試 Relationship 為例 接下來，我們來做個範例測試，測試我們之前寫的新增文章還有測試 Relationship 的部分。
新增文章(Feature) 1$ php artisan make:test ArticleTest 接下來你就會看到在feature底下有一個ArticleTest.php，之後請將裡面的TestExample拿掉並貼上
1 public function testAddArticle() 2 { 3 $response = $this-&amp;gt;post( 4 &amp;#39;/article&amp;#39;, 5 [ 6 &amp;#39;title&amp;#39; =&amp;gt; &amp;#39;Testing&amp;#39;, 7 &amp;#39;content&amp;#39; =&amp;gt; &amp;#39;Testing&amp;#39; 8 ] 9 ); 10 11 $response-&amp;gt;assertRedirect(&amp;#39;/article&amp;#39;); 12 } 執行指令（filter 的參數可以幫助我們只要指定某個測試，而這個參數就是每個 function 去掉前面的 test 即可）</description></item><item><title>Laravel Eloquent ORM-(下)</title><link>jimmycode.tw/posts/laravel-eloquent-orm-%E4%B8%8B/</link><pubDate>Sat, 05 Oct 2019 09:15:39 +0000</pubDate><guid>jimmycode.tw/posts/laravel-eloquent-orm-%E4%B8%8B/</guid><description>終於來到這個第 20 天了，今天我們繼續談談 Eloquent ORM 的部分，Laravel 為 Eloquent 提供一個很棒的東西，那就是relationship，有點像是我們資料庫裡面的「外來鍵」，透過使用relationship，我們可以更加輕巧的使用 ORM 呢！
Laravel 寫了一個很詳盡的文件：https://laravel.com/docs/6.x/eloquent-relationships
提供我們以下這些類型的「relationship」
一對一 一對多 多對多 多對一 has-one-through Has Many Through 這裡我以一對多的關係作為情境的例子。沿著之前的簡單部落格專案的例子，「一篇文章可以有很多標籤」吧。
首先，我們必須先做一個很多「標籤」的資料 Model，首先做 Migration 開始。
1$ php artisan make:migration tags --create=tags 在新的{timestamp}_create_tags_table.php調整一下資料表結構
1 public function up() 2 { 3 Schema::create(&amp;#39;tags&amp;#39;, function (Blueprint $table) { 4 $table-&amp;gt;bigIncrements(&amp;#39;id&amp;#39;); 5 $table-&amp;gt;bigInteger(&amp;#39;article_id&amp;#39;)-&amp;gt;references(&amp;#39;id&amp;#39;)-&amp;gt;on(&amp;#39;articles&amp;#39;); 6 $table-&amp;gt;string(&amp;#39;name&amp;#39;); 7 $table-&amp;gt;timestamps(); 8 }); 9 } 之後建立 Model
1php artisan make:model Tag 之後我們就開始建立文章對標籤的一對多關係了，讓我們來到app\Article.php這裏。加入一段
1 public function tags() 2 { 3 return $this-&amp;gt;hasMany(&amp;#39;App\Tag&amp;#39;); 4 } 接下來我們來測試一下，打開php artisan tinker</description></item><item><title>Laravel Eloquent ORM-(上)</title><link>jimmycode.tw/posts/laravel-eloquent-orm-%E4%B8%8A/</link><pubDate>Thu, 03 Oct 2019 16:22:24 +0000</pubDate><guid>jimmycode.tw/posts/laravel-eloquent-orm-%E4%B8%8A/</guid><description>接下來我們介紹 Laravel 的 ORM：Eloquent，ORM 就是使用物件導向的方式去操作資料庫。這對負責程式開發的工程師有一個很不錯的好處：不用處理「純 SQL 語法」，當然，不使用「純 SQL」的效能會略比使用 Eloquent 還要差一點，然而，這是可以讓我們有比較易讀的程式碼以及較好的維護性。
簡單來說Eloquent他就是 Laravel 內部的類別。其實我們繼承他就可以讓我們做使用了，例如之前練習的 Article.php
1use Illuminate\Database\Eloquent\Model; 2 3class Article extends Model 4{ 5 // 6} 為了接下來我們可以來做一些介紹 Elquent 的部分，我這裡介紹一個之前沒講過指令，但在我們 Debug\開發的時候非常好用，那就是
1$ php artisan tinker 然後你可以利用 Cli 的模式去查詢這個 Model，例如查詢所有 Article 框架的好處就是約定成俗，因此當你這樣的宣告Article.php的 Model，他當然也就會對照articles，那如果今天有個情境：不是articles怎麼辦？那也很簡單，在 Eloquent 裡面加入一個新屬性
1protected $table = &amp;#39;my_articles&amp;#39;; 這樣我們也可以使用其他 table 處理 ORM 囉！
而他另外還有一個很常用的屬性，就是是否讓我們批次賦值的部分，這個批次賦值可以讓我們不用每一次都要new一個 Model，然後一個一個屬性宣告，最後save()(請複習我們之前綜合應用(4) 使用 Laravel 做一個簡單的部落格：複習-下 )
1//沒有使用批次賦值 2$article = new Article(); 3$article-&amp;gt;title = $title; 4$article-&amp;gt;content = $content; 5$article-&amp;gt;save(); 但是如果我們要使用批次賦值之後，這就方便許多了，首先在eloquent model同樣增加一種屬性</description></item><item><title>Laravel Error and Logging</title><link>jimmycode.tw/posts/laravel-error-and-logging/</link><pubDate>Wed, 02 Oct 2019 16:23:18 +0000</pubDate><guid>jimmycode.tw/posts/laravel-error-and-logging/</guid><description>今天簡單點、輕鬆一點。
接下來讓我來介紹一下關於 Laravel 的 Log 功能，有時候我們會需要使用到紀錄的功能，需要知道這個 request 到底發了哪些東西，這樣才能方便我們追蹤我們寫的程式與網頁
Laravel 的 logs 其實都放在storage/logs這個資料夾當中，你會發現有很多以 Laravel 為前綴並且加入date的.log檔，如果沒有可能剛好只是你的目前的 log 等級還沒有到那裡(預設是 error，也就是有錯誤的時候才會放進去 log 檔裡面)
其實要弄 log 非常得簡單，使用Log這個類別即可完成～現在讓我們以之前創建文章的那裡作為範例，首先先去ArticleController.php這個檔案裡面
1use Log; 2....(略) 3 public function store(Request $request) 4 { 5 Log::info(&amp;#39;Hi 我們的第一個Log訊息&amp;#39;); 6 $title = $request-&amp;gt;title; 7 $content = $request-&amp;gt;content; 8 9 $article = new Article(); 10 $article-&amp;gt;title = $title; 11 $article-&amp;gt;content = $content; 12 $article-&amp;gt;save(); 13 14 return redirect(route(&amp;#39;article.index&amp;#39;)); 15 } 當你新增文章之後，你去到最新日期的.log 檔，就會看到一行「Hi 我們的第一個 Log 訊息」囉！ 設定 Log 的設定 其實 Laravl 提供我們很多有關於 Log 的設定，其實我們可以跑到config/logging.</description></item><item><title>Laravel Validation</title><link>jimmycode.tw/posts/laravel-validation/</link><pubDate>Tue, 01 Oct 2019 22:33:54 +0000</pubDate><guid>jimmycode.tw/posts/laravel-validation/</guid><description>接下來我們來談一下 Laravel 關於驗證的部分，作為一個全能型的框架 Laravel，到底會讓 Validation 會如何好寫呢！ 以下請跟著我走就知道，check out~。
為什麼需要驗證 因為我們要當使用者就是笨蛋啊，不是啦，是為了防止使用者輸入到錯的資訊以至於讓我們系統崩潰，別忘了 Garbage in，Garbage out 喔～
Laravel 提供給我們的驗證規則 還記得我們第十二天做的綜合應用(4) 使用 Laravel 做一個簡單的部落格：複習-下 嗎？如果沒看過的可以回去複習一下，在那裡面，有 update\create 的表單，其實那是非常粗糙的，完全沒有驗證可言，所以接下來我將以 update 的表單為例子，順便也說明 Laravel 本身到底提供了哪些驗證給我們。
先上一下文件：
中文 英文 如果你滑倒底下有一個地方叫做Available Validation Rules，沒錯，Laravel 就是內建提供我們這麼多規則喔～ 不過在這之前，我們先在 blade 那裡放有關於驗證訊息的版面 首先到layouts/layout.blade.php，放這一段程式碼
1 @if ($errors-&amp;gt;any()) 2 &amp;lt;div class=&amp;#34;alert alert-danger&amp;#34;&amp;gt; 3 &amp;lt;ul&amp;gt; 4 @foreach ($errors-&amp;gt;all() as $error) 5 &amp;lt;li&amp;gt;{{ $error }}&amp;lt;/li&amp;gt; 6 @endforeach 7 &amp;lt;/ul&amp;gt; 8 &amp;lt;/div&amp;gt; 9 @endif 完成，可以回去加入驗證囉 XD</description></item><item><title>Laravel Middleware</title><link>jimmycode.tw/posts/laravel-middleware/</link><pubDate>Mon, 30 Sep 2019 16:26:56 +0000</pubDate><guid>jimmycode.tw/posts/laravel-middleware/</guid><description>接下來我們來說明關於 Laravel 的 Middleware，什麼是 Middleware 呢？中文名稱稱呼是「中介層」，我是想像他有點像是防火牆的概念，可以在每一次 request 進入 controller 的流程當中，做一層過濾、驗證的部分，而當 Response 出來之後，也會經過這樣一層層程序回應給使用者。
在這裏也提供一些參考資料：https://laravel.tw/docs/5.2/middleware 舉例來說，還記得我們第 12 天綜合應用嗎？如果沒看過記得回去複習一下使用 Laravel 做一個簡單的部落格：複習-下 在我們撰寫關於create、edit和destroy的表單當中，不是都有帶一個@csrf嗎？其實這個csrf就是一種 Middleware，他就藏在 Laravel 的app\Http\Middleware這個資料夾，有一個名為VerifyCsrfToken.php的檔案喔～ 補充一下關於 CSRF 的科普:順便淺談一下 Laravel 為我們帶上哪些 Middleware 這裡插播一些小知識好了，為什麼會需要驗證是否有一個CSRF的 token，原因是因為 HTTP 其實他是很好被偽造的，同時更是因為HTTP是一種無狀態協定，其實你以為你登入的那些資料其實都是瀏覽器幫忙，所以你才可以一開始就不用什麼登入就有資料、或者看到你那些資訊～
總之請求很容易被偽造，CSRF 就是可以在不同的 domain 底下卻能夠偽造出「使用者本人發出的 request」
討論 CSRF 也不是本篇的重點，總之如果你想要更多理解可以參考底下連結：
讓我們來談談 CSRF wiki-跨站請求偽造 所以聰明的 Laravel 就自動幫我們附帶了一個VerifyCsrfToken.php囉，不過你要關閉也是可以啦，不建議這麼做～
有兩個方法：一種是全域的，另外一種是局部性的
A. 局部性的： 先談一下局部性的關閉 CSRF，當你跑去打開VerifyCsrfToken.php的時候，有沒有發現$except這個地方呢？裡面填一下相關的 URL 就可以囉，我以前面我們做的Create表單作為例子。（根據我們 RESTFul API 的概念，Create就是article~）
1 protected $except = [ 2 &amp;#39;article&amp;#39; 3 ]; 之後你就可以在article/create.</description></item><item><title>Laravel Mail and Mailable</title><link>jimmycode.tw/posts/laravel-mail-and-mailable/</link><pubDate>Mon, 30 Sep 2019 03:30:40 +0000</pubDate><guid>jimmycode.tw/posts/laravel-mail-and-mailable/</guid><description>接下來我們要講講關於 Laravel 的 Email 的功能，其實所謂的現代框架，尤其是像 Laravel 本身這樣「全能型」的框架，基本上都會有相關寄信、送信的功能。現在讓我們～開始囉～
介紹 MailTrap 服務 要讓程式寄送電子郵件，首先一定是要有個SMTP的 SERVER 才可以，不可能無緣無故就讓你用幾行程式簡簡單單就寄送出去，當然要有一個從什麼發出來的東西啊～如果不太了解什麼是 SMTP 沒關係，你先將它當作類似 Apache 或者 Nginx 提供 HTTP 服務的東西，只是它是提供Email寄送的服務。
但我們又不是 MIS，哪裡來的 SMTP 啊
沒關係，你只要知道，現代網路上基本上你的問題絕對不是第一個發生的，如果可以，一定有解決方案，如果沒有解決方案，那就解決提出問題的人
總之MailTrap就是類似這樣的服務，可以方便提供開發者作出簡單的測試信件之類的，你現在上面註冊過帳號，然後到https://mailtrap.io/inboxes 這裏，你會看到底下的畫面
選擇點進去某個 inboxes 當中，之後你會看到這樣的畫面。 叮咚，我們有一個可以測試用的 SMTP 囉～ 不過這只是屬於開發中在用的，如果要搬到正式專案上建議仍是要有一個真正的 SMTP Server 喔
填入 SMTP 資訊到.env 當中 如何將 SMTP 連結我們的 Laravel 專案呢？那些繁複的過程和程式其實 Laravel 大部分都幫我們寫好了，我們只要填入資訊即可，讓我們到.env這個檔案當中，你會看到MAIL_DRIVER那裡，請把你剛剛在mailtrap上看到的username和password分別對應填到MAIL_USERNAME和MAIL_PASSWORD裡 開始寫 Mailable 連線資訊準備好了，那我們來準備寄信看看吧！ 首先讓我們建立一個叫做Mailable的東西，這是 Laravel 所提供的 class
1$ php artisan make:mail FirstMail 有沒有看到app資料夾裡面多了mail/FirstMail.php呢？ 之後，我們去到FirstMail.php這個檔案改寫一下build()這個地方，改寫為
1public function build() 2{ 3 return $this-&amp;gt;from(&amp;#39;example@example.com&amp;#39;)-&amp;gt;view(&amp;#39;mail.index&amp;#39;); 4} 有沒有看到很熟悉的view啊，所以讓我們到views裡面建立mail/index.</description></item><item><title>Laravel Artisan 以及 Command</title><link>jimmycode.tw/posts/laravel-artisan-%E4%BB%A5%E5%8F%8A-command/</link><pubDate>Sun, 29 Sep 2019 04:41:13 +0000</pubDate><guid>jimmycode.tw/posts/laravel-artisan-%E4%BB%A5%E5%8F%8A-command/</guid><description>接下來讓我們來討論關於 Command 的部分，Laravel 本身提供了一些類似 CLI 的部分，許多強大的現代框架大部分也都會有類似的功能。對了，補充一下，CLI 全名是：Command-line interface，意思是他有別於圖形化介面，以不倚靠滑鼠、大部分倚靠鍵盤，key 進一連串的文字及指令。
Laravel 的 CLI 名為Artisan，他的使用方式就是在artisan前面加上php，意思是我用 php 去執行Artisan這個檔案，讓我們來看看 Laravel 的資料夾，是不是果真就有一個 Artisan 的檔案呢？ 然後其實Artisan本身也就是一個 php 的檔案，基本上就是和public/index.php有點像，就是啟動核心來 Handle 我們的輸入及輸出。只是這個 kernal 是從 HTTP 的部分換成 Console，不過沒關係，如果你對 Laravel 的源碼非常有興趣，可以自行研究。我們其實只要怎麼用，知道出問題找誰就好了。
Laravel 提供的指令 其實在你建立 Laravel 的時候，Laravel 就附帶很多的指令供我們操作，之前我們不是常常建立那些 Controller、Migration 或者 Model 之類的檔案嗎，都可以透過 Artisan 為我們建立看來，你可以下php artisan list就知道到底 Laravel 為我們提供了哪些指令。 其實這個圖片後面還有很多指令，我們之前也常用這些指令，像是php artisan serve或者php artisan migrate等等。其實有些我在前幾天的文章都會統一整理在Artisan 相關指令這個小章節，但之後我們也會繼續補充，乾脆許願一下如果本篇訂閱人數在 30 天結束前超過 20 人就來寫一篇超完整Artisan 指令CheetSheet好了～ 不過其實你用前面的 php artisan list 就好了啊
產生新的指令-Scafford 指令 還記得我們在第四天講到 Route 路由的部分嗎？如果忘記的可以到這裡複習:Laravel Route(路由) 其實啊，在 routes 這個資料夾底下就有一個名為console.</description></item><item><title>Laravel Auth: 為網站加入會員囉～</title><link>jimmycode.tw/posts/laravel-auth-%E7%82%BA%E7%B6%B2%E7%AB%99%E5%8A%A0%E5%85%A5%E6%9C%83%E5%93%A1%E5%9B%89%EF%BD%9E/</link><pubDate>Fri, 27 Sep 2019 16:29:05 +0000</pubDate><guid>jimmycode.tw/posts/laravel-auth-%E7%82%BA%E7%B6%B2%E7%AB%99%E5%8A%A0%E5%85%A5%E6%9C%83%E5%93%A1%E5%9B%89%EF%BD%9E/</guid><description>經過前幾天導覽過簡單的 Laravel 之 CRUD 篇，現在開始我們要一一來談談關於比較進階，而且也是平時開發常用到的功能與指令等，可能有時候也會順便在講解的時候偶爾帶入前幾天說的東西。在網站開發上，我們常常會有所謂的「會員制度」，身為一個成熟的框架 Laravel，他要如何實現會員制度這個功能呢？放心，不會很辛苦，幾個指令就能搞定，厲害吧！讓我們來體驗這種快速開發吧！ Let's Go!
在 Laravel6.0 之前 其實作者我很早就開始寫 Laravel 了，只是我沒想到在我寫這一系列文章的時候，Laravel 6.0 就已經出來啦！ 推薦一下隔壁棚的鐵人賽，那裡會稍微帶到 Laravel6.0 的特色：Laravel 6.0 初體驗！怎麼用最新的 laravel 架網站！ 既然都是寫 Laravel 當然都支持一下啦～ 不過廢話說太多了，在 Laravel 6.0 之前，Laravel 5.x 的版本其實很厲害，一個指令就能完成：
1$ php artisan make:auth 這也太簡單了&amp;hellip;不過這一切，要從 Laravel 6 說起
在 Laravel 6.0 之後 後來當我下php artisan make:auth之後，居然出錯，和我說沒有 make:auth 這個指令，我就知道，Laravel 6.0 改版囉～ 和各位說明一下，如果你們仔細去看之前小專案的composer.json就會發現 原來是 Laravel 6.0 的部分啊(拍手)
好了，又歪樓，因為幾個指令就能完成 Auth 的部分所以才會說那麼多廢話，我絕對不是因為要把鐵人賽的文章寫到一定字數挑戰成功才故意寫這麼多
首先，讓我們先用 Composer 安裝一個 Package
1$ composer require laravel/ui 之後請使用 ui 的指令，並且加入&amp;ndash;auth 這個參數</description></item><item><title>綜合應用(4) 使用 Laravel 做一個簡單的部落格：複習-下</title><link>jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A84-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%8B/</link><pubDate>Thu, 26 Sep 2019 18:08:38 +0000</pubDate><guid>jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A84-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%8B/</guid><description>接下來到該篇章最後一個小節，讓我們把剩下的新增、修改、刪除都做好吧！ 這是接續前兩天的實作，如果不太清楚的話記得複習一下前兩天
綜合應用(2) 使用 Laravel 做一個簡單的部落格：複習-上 綜合應用(3) 使用 Laravel 做一個簡單的部落格：複習-中 新增文章對於 RESTFul API 的概念來說，他是一種POST，對於網址來說以 Article 為例則是http://127.0.0.1:8000/article，然而，這個網址其實正也是index的網站(不過他是用GET的方法)&amp;hellip;.但是，我們要怎麼傳要新增的資料呢？怎麼辦？
因此對於 Laravel 來說，他在網址後面也增加了一個關鍵字：create作為識別，以告訴瀏覽器，這是一個創建文章的頁面，不是列表 index 的頁面喔，然後用 form POST 的方式，將新增文章建立好。同理其實與修改文章的模式一樣，C 和 U 有兩個頁面，C 對應到 create()和 store()，而 U 對應到 edit()和 update()
新增文章 之前我們說到 CRUD，而 C 就對應到 controller 的 create()和 store()
ArticleController@create 只是傳一個頁面，和 Show()很像，傳一個 view 給他就好
1 public function create() 2 { 3 return view(&amp;#39;articles.create&amp;#39;); 4 } 別忘了我們要做一個articles/create.blade.php喔，如下
1@extends(&amp;#39;layouts.layout&amp;#39;) 2 3@section(&amp;#39;content&amp;#39;) 4&amp;lt;h1 class=&amp;#34;font-bold&amp;#34;&amp;gt;新增文章&amp;lt;/h1&amp;gt; 5&amp;lt;form class=&amp;#34;bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4&amp;#34; action=&amp;#34;{{ route(&amp;#39;article.</description></item><item><title>綜合應用(3) 使用 Laravel 做一個簡單的部落格：複習-中</title><link>jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A83-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%AD/</link><pubDate>Thu, 26 Sep 2019 10:55:20 +0000</pubDate><guid>jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A83-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%AD/</guid><description>昨天我們小部落格專案已經準備好資料庫、Seeder、Route和Model了。
如果錯過的可以看看昨天的：綜合應用(2) 使用 Laravel 做一個簡單的部落格：複習-上 現在剩下最後的Controller和View我們就可以將這個小專案完成囉，Check out~
建立Controller 首先就是Controller拉，既然我們Route/web.php 裡面新增了Route::resource('article', 'ArticleController');
我們當然就是要把ArticleController生出來啊
一個指令就能結束這一個回合～
1$ php artisan make:controller ArticleController --resource 接下來你會看到ArticleController.php 在App\Http\Controller\這個資料夾底下囉
建立View 接下來，我們必須要建立一些可以用的view檔案。不過這些檔案沒辦法用指令產生，真是可惜 而這個地方其實最為繁瑣，所以我才臨時決定將這篇簡單部落格專案教程分成上下兩部，才不是因為昨天我想要耍廢
其實撰寫blade其實就像寫html一樣好玩，你可以參考之前我寫的第八天文章自行發揮創意：Laravel View 然後為了專注於Laravel 的開發，以下對於view的撰寫會盡量簡潔及陽春，css的部分也就只是隨便套套css framework這樣喔～～
所以讓我們開始吧！ Go!Go!Go! 來到resources\view這個資料夾，建立一個layouts的子資料夾 讓我們建立一個layout.blade.php吧，如下圖 在layout.blade.php填入以下程式碼：
1&amp;lt;html&amp;gt; 2 &amp;lt;head&amp;gt; 3 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; 4 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; 5 &amp;lt;title&amp;gt;FirstLaravelProject&amp;lt;/title&amp;gt; 6 &amp;lt;link href=&amp;#34;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt; 7 &amp;lt;/head&amp;gt; 8 &amp;lt;body&amp;gt; 9 &amp;lt;div class=&amp;#34;container mx-auto&amp;#34;&amp;gt; 10 @yield(&amp;#39;content&amp;#39;) 11 &amp;lt;/div&amp;gt; 12 &amp;lt;/body&amp;gt; 13&amp;lt;/html&amp;gt; 在此專案中我選擇使用TailwindCSS ，你可以自行選擇你喜歡的css ，我是想要順便學習TailwindCSS拉 不是在第八天早就說了嗎，blade可以讓你用類似繼承、模板的方式，讓你很清晰清楚的開發php～讓大家見識@yield的厲害！ 開始串Articles的小前言 接下來讓我們邊把controller的function填一填，順便一起建立起view吧！以下為了極度簡潔程式碼，所以我會用很多Laravel附帶的magic method，你可能在其他人的文章看到不同的寫法，但基本上都是大同小異喔！</description></item><item><title>綜合應用(2) 使用 Laravel 做一個簡單的部落格：複習-上</title><link>jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A82-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%8A/</link><pubDate>Tue, 24 Sep 2019 16:02:17 +0000</pubDate><guid>jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A82-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%8A/</guid><description>現在讓我們結合過去九天的學習，一起做個簡單的部落格，其中他就只是一個文章的增刪改查的部分。藉此案例來實作我們的小專案。
建立環境 首先，讓我們使用指令建立一個全新的 Laravel 專案。讓我們以FirstLaravel為名，這個名稱你可以自訂，只要是字串都可以～
1$ laravel new FirstLaravel 在這裏補充之前沒說過的 Artisan 指令 為了讓我們的環境可以統一，我們就使用 Laravel 附帶 serve 的指令來開發吧～
1$ cd FirstLaravel #先讓我們移動到FirstLaravel這個資料夾底下 2$ php artisan serve 3Laravel development server started: &amp;lt;http://127.0.0.1:8000&amp;gt; 看到後面的網址了嗎？讓我們在瀏覽器打上http://127.0.0.1:8000 就會看到這個畫面，這樣我們就～～成功一半了呵呵～～ 資料庫、Factory 和 Seeder 接下來，讓我們開始寫程式吧！首先是參考我們第五天說到的 database:https://ithelp.ithome.com.tw/articles/10218302
在 .env 填好你的資料庫連線資訊之後，應該就可以開始了，首先也是使用一下指令
1$ php artisan make:migration create_article_table --create=articles 2Created Migration: 2019_09_24_150500_create_article_table 建立 Migration 接下來你就看到2019_09_24_150500_create_article_table.php 在 database/migrations 裡面出現，PS. 2019_09_24_150500是時間戳記，數字不一樣沒關係，但後面的 create_article_table 要一模模一樣樣啊～
然後讓我們在up() 裡面寫一下程式：
1 public function up() 2 { 3 Schema::create(&amp;#39;articles&amp;#39;, function (Blueprint $table) { 4 $table-&amp;gt;bigIncrements(&amp;#39;id&amp;#39;); 5 $table-&amp;gt;string(&amp;#39;title&amp;#39;); //新增一個叫做title的欄位，使用string型態 6 $table-&amp;gt;text(&amp;#39;content&amp;#39;); //新增一個叫做content的欄位，使用text型態 7 $table-&amp;gt;timestamps(); 8 }); 9 } 建立 Factory 為了在一開始有一些資料可以用，我們也順便把 Factory 和 seeder 也一起弄一弄好了～</description></item><item><title>綜合應用(1)：Laravel RESTFul API</title><link>jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A81%EF%BC%9Alaravel-restful-api/</link><pubDate>Tue, 24 Sep 2019 11:13:03 +0000</pubDate><guid>jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A81%EF%BC%9Alaravel-restful-api/</guid><description>前面幾天我們大概導覽了一下整個Laravel 的結構、以及分別M-model、V-view、C-Controller，並且也講到Database的部分還有Route，基本上我們可以算是學會Laravel 的一半了，剩下的就是真的是遇到需求再說，例如event、middleware 還是auth之類的，如果有需要在自行加入即可。
所以在這裡我想要以一個簡單的Laravel 部落格的簡單應用，部落格不外乎就是新增文章、刪除文章、看文章以及修改文章，暫時我們先不用處理登入登出的問題，這個我覺得可以以後再談談
在正式進入環境之前我們仍然要過一下概念的部分，在網頁的世界中，尤其是後端的角度來看，URL(網址)的組成分為兩個
domain name path或者檔名之類的詳細的說明可以參考維基百科：https://zh.wikipedia.org/wiki/统一资源定位符 其實網頁上我們的任何一個動作的對象都可以被視為一種資源以樓上維基百科的網址為例，https://zh.wikipedia.org是domain name，也就是網頁的家，而wiki/统一资源定位符就是一種資源，翻成白話來說就是當你打上這串網址，就是告訴瀏覽器我要找一個在https://zh.wikipedia.org 底下有一個叫做wiki的地方，裡面有一個统一资源定位符的資源，請把它拿給我
瀏覽器也是一種軟體，當他拿到统一资源定位符這個資源的時候，發現他是一個HTML文檔，就使用他的css引擎、讀取HTML的工具以及運行JS的東西去讀取這個資源給你看
所以這樣你有比較理解我所講的是什麼嗎？我們一切在網路上所做的就是資源，而對於資源來說最常做的就是CRUD，也就是
C-創建新資源 R-讀取資源 U-更新資源 D-刪除資源 於是RESTful 的概念因應而生，他建議了URL的形式以及溝通方法、架構，分別就是Get、Post、Put/Patch以及Delete
如果想更了解RESTFul API的話請到這裡來：https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2
話不多說，Laravel 也對RESTFul 有一定程度上的支援，首先，讓我們先使用一個指令
1$ php artisan make:controller ArticleController --resource 請記得加--resource喔 然後你看到ArticleController 在Controller這個資料夾裡面，讓我們來看看它
1&amp;lt;?php 2 3namespace App\Http\Controllers; 4 5use Illuminate\Http\Request; 6 7class ArticleController extends Controller 8{ 9 /** 10* Display a listing of the resource. 11* 12* @return \Illuminate\Http\Response 13*/ 14 public function index() 15 { 16 // 17 } 18 19 /** 20* Show the form for creating a new resource.</description></item><item><title>Laravel View</title><link>jimmycode.tw/posts/laravel-view/</link><pubDate>Mon, 23 Sep 2019 11:49:35 +0000</pubDate><guid>jimmycode.tw/posts/laravel-view/</guid><description>接下來讓我們介紹MVC裡的V，也就是Larvel理resources/views這個資料夾的部分。作為一個先進的框架，總不可能只是傳送文字這麼簡單，也需要有美美的網頁才可以撐得上一個合格的框架， 當然更不可以像Jquery 一樣用「組字串」的方式那麼辛苦的把html內容捕進來(懂Jquery的人應該懂我在說什麼)
所以Laravel 自帶使用所謂的blade，可以讓你用很方便的模板模式撰寫你要呈現的內容，我們用Laravel 附帶預設的Welcome.blade.php作為簡單的解說
1&amp;lt;!DOCTYPE html&amp;gt; 2&amp;lt;html lang=&amp;#34;{{ str_replace(&amp;#39;_&amp;#39;, &amp;#39;-&amp;#39;, app()-&amp;gt;getLocale()) }}&amp;#34;&amp;gt; 3 &amp;lt;head&amp;gt; 4 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; 5 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; 6 7 &amp;lt;title&amp;gt;Laravel&amp;lt;/title&amp;gt; 8 9 &amp;lt;!-- Fonts --&amp;gt; 10 &amp;lt;link href=&amp;#34;https://fonts.googleapis.com/css?family=Nunito:200,600&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt; 11 12 &amp;lt;!-- Styles --&amp;gt; 13 &amp;lt;style&amp;gt; 14 html, body { 15 background-color: #fff; 16 color: #636b6f; 17 font-family: &amp;#39;Nunito&amp;#39;, sans-serif; 18 font-weight: 200; 19 height: 100vh; 20 margin: 0; 21 } 22 23 .</description></item><item><title>Laravel Controller</title><link>jimmycode.tw/posts/laravel-controller/</link><pubDate>Sun, 22 Sep 2019 13:27:14 +0000</pubDate><guid>jimmycode.tw/posts/laravel-controller/</guid><description>接下來讓我們分享在 MVC 裡面的 Controller，不像 Laravel 沒有一個專門的 Model 資料夾，Controller 在 Laravel App 資料夾裡面有一個 app/Http 的子資料夾，在 Http 底下有個 Controllers 的資料夾 在 Controllers 這個資料夾裡面，就有各式各樣 Controller.php 的檔案。
接下來，讓我們從新建一個 Controller 開始，首先讓我們使用指令
1$ php artisan make:controller ArticleController 之後你會看到在 Http 資料夾底下會有一個 ArticleController 這個檔案, Laravel 為我們簡單寫了一段 1&amp;lt;?php 2 3namespace App\Http\Controllers; 4 5use Illuminate\Http\Request; 6 7class ArticleController extends Controller 8{ 9 // 10} 11 其實就是這麼簡單，他就只是繼承了 Controller 這個類別，而 Controller 這個類別在哪裡呢？他就是在 App\Http\Controllers 資料夾底下的 Controller.php 這個檔案，讓我們繼續接著看看裡面寫了什麼東西：
1&amp;lt;?php 2 3namespace App\Http\Controllers; 4 5use Illuminate\Foundation\Bus\DispatchesJobs; 6use Illuminate\Routing\Controller as BaseController; 7use Illuminate\Foundation\Validation\ValidatesRequests; 8use Illuminate\Foundation\Auth\Access\AuthorizesRequests; 9 10class Controller extends BaseController 11{ 12 use AuthorizesRequests, DispatchesJobs, ValidatesRequests; 13} 14 在 BaseController 這個檔案裡，Illuminate就是 Laravel 的 namespace ，然後裡面用到了幾個簡單的 trait: AuthorizesRequests、DispatchesJobs和 ValidatesRequests，就這樣構成了我們 Controller 這個檔案。</description></item><item><title>Laravel Model</title><link>jimmycode.tw/posts/laravel-model/</link><pubDate>Sat, 21 Sep 2019 09:13:55 +0000</pubDate><guid>jimmycode.tw/posts/laravel-model/</guid><description>前面我們已經把資料庫都已經準備好了，接下來我們要進入 MVC 之中的 M 了，就是與業務邏輯、資料庫溝通有關係的那一層，在這裏，我們以 Article 為例 (文章)
讓我們用 artisan 來製作我們的 model 吧，使用指令
1php artisan make:model Article 接下來你就會看到在 App 這個資料夾出現了Article.php，讓我們打開他看看 Laravel 為了我們寫了什麼，讓我們按 code 說故事
1&amp;lt;?php 2 3namespace App; 4 5use Illuminate\Database\Eloquent\Model; 6 7class Article extends Model 8{ 9 // 10} 11 對，其實就是這麼簡單，他只是繼承了 Eloquent\Model 這個 Class，你可不要小看這個 Eloquent\Model，他算是 Laravel 裡的 ORM，他其實裡面很多功能很多東西呢！
註：ORM 就是指說我們可以使用物件導向的方法去與資料庫溝通，詳情可以看到最後
讓我們看看文件： https://laravel.com/docs/5.8/eloquent
中文也可以通喔：https://laravel.tw/docs/5.3/eloquent
其實你可以看到，他在裡面可以使用類似這樣
1protected $table = &amp;#39;&amp;lt;任何你想要宣告的table名稱&amp;gt;&amp;#39;; 假設 Article 這個 model 所要對應到的資料表不是 Articles，那麼你就可以使用這個屬性，將 Model 與 table 作出對應。不過你要知道框架之所以為框架，他就是可以有些「約定成俗」的事情所以如果你的資料表像前面所說的是 articles，那麼根本不用管這個$table 啦～</description></item><item><title>Laravel Database: Migration and Seeder</title><link>jimmycode.tw/posts/laravel-database-migration-and-seeder/</link><pubDate>Fri, 20 Sep 2019 14:18:21 +0000</pubDate><guid>jimmycode.tw/posts/laravel-database-migration-and-seeder/</guid><description>俗話說：「兵馬未動，糧草先行」，接下來讓我們講講 Laravel 關於 database 的部分。目前 Laravel 接受底下類型
MySQL PostgreSQL SQLite SQL Server 之後我們將以「Mysql」作為範例。首先，我們必須確保 資料庫 與 php 有所連結。讓我們打開 .env 這個檔案來看其中有一段關於 database 的敘述
1DB_CONNECTION=mysql 2DB_HOST=127.0.0.1 3DB_PORT=3306 4DB_DATABASE=laravel 5DB_USERNAME=homestead 6DB_PASSWORD=homestead 我們以 Mysql 為範例，DB_Connection 保持不變。然後 DB_HOST 和 DB_PORT 填入你要連線的資訊，之後填入連線的資料庫 DB_DATABASE ，還有連線的 USERNAME 和 PASSWORD
確保這些連線資訊正確之後開始我們準備 Database 裡面的資料啦，讓我們來看看 database 這個資料夾，裡面很簡單也只有三個資料夾
factories：他控制整個資料被填充的過程，例如：user 資料應該如何被產生？之後我們在 seeds 可以使用 factory()這個方法 migrations ：Laravel 很特別的地方就是讓我們資料庫有點感覺是版本控制 seeds: 裡面放置產生假資料的檔案，等等我們會用例子說明 factories 讓我們看看 Laravel 給我們預設的檔案，UserFactory.php 這個檔案，他裡面其實很簡單，程式碼如下：
1$factory-&amp;gt;define(User::class, function (Faker $faker) { 2 return [ 3 &amp;#39;name&amp;#39; =&amp;gt; $faker-&amp;gt;name, 4 &amp;#39;email&amp;#39; =&amp;gt; $faker-&amp;gt;unique()-&amp;gt;safeEmail, 5 &amp;#39;email_verified_at&amp;#39; =&amp;gt; now(), 6 &amp;#39;password&amp;#39; =&amp;gt; &amp;#39;$2y$10$92IXUNpkjO0rOQ5byMi.</description></item><item><title>Laravel Route(路由)</title><link>jimmycode.tw/posts/laravel-route%E8%B7%AF%E7%94%B1/</link><pubDate>Thu, 19 Sep 2019 13:09:20 +0000</pubDate><guid>jimmycode.tw/posts/laravel-route%E8%B7%AF%E7%94%B1/</guid><description>前一天我們稍微簡介一下資料夾的結構，談到 routes 這個資料夾放置所有和路由相關的檔案。打開 routes 資料夾，我們看到四個檔案
api.php :在做前後端分離專案的時候，我們會用到這個檔案 channels.php：和 Broadcast 有關係，這是 laravel 的功能，我自己也很少用過。期待未來在寫這個系列的時候一起來學習。 console.php：和指令有關係，我們會常常打 php artisan xxx ，這個檔案就是和這個部分有關係。 web.php：就是我們在瀏覽器打上的 url，後面那個 domain name 之後接下的字串，在這個檔案我們可以定義哪些字串要導向到哪個流程與檔案之類的 web.php 讓我們可以先玩一下 web.php看到 laravel 為我們預設了一段
1Route::get(&amp;#39;/&amp;#39;, function () { 2 return view(&amp;#39;welcome&amp;#39;); 3}); 讓我們按照 code 說一下故事：就是有一個 Route 的類別，他可以有一個 Get 的方法，/的意思就是不加任何東西，而 function 這一段就是指示當我們到/的時候應該要怎麼做，這個預設範例就是說我們可以return view('welcome') view()這個方法指向 resource 底下的 views 資料夾底下，傳入的字串是前綴詞，因此，他會把 welcome.blade.php 這個檔案傳給瀏覽器讀取。就是我們看到的那樣囉
所以，我們可以如法炮製在 web.php 寫一個
1Route::get(&amp;#39;hello&amp;#39;, function () { 2 return &amp;#39;Hello World&amp;#39; 3}); 然後在你的網址後面加入個/hello，就會看到 Hello World 的字串囉</description></item><item><title>Laravel 導覽與生命週期</title><link>jimmycode.tw/posts/laravel-%E5%B0%8E%E8%A6%BD%E8%88%87%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/</link><pubDate>Wed, 18 Sep 2019 14:46:40 +0000</pubDate><guid>jimmycode.tw/posts/laravel-%E5%B0%8E%E8%A6%BD%E8%88%87%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/</guid><description>其實 Laravel 作為 php 的框架，其實本質還是 php。當我們在第一天準備環境的時候，我們建立了一個 blog 的資料夾。裡面資料夾分別如下：
app/ ：我們主要工作的資料夾之一 bootstrap/ ：Laravel 相關啟動的資料夾，基本上我們不會動這裡 config/ ：如果你有什麼固定的需要設定的，可以寫在這裡，有需要的話才會需要在這裡工作 database/ ：關於建立 table、建立假資料的都在這裡 public/ ：進入點，以及前端編譯後的資料都會放在這裡 resource/：blade、以及編譯前的 js 會放在這裡 routes/ ：定義路由的地方，主要工作的資料夾之一 storage/ ：檔案存放、log 的地方 test/ ：顧名思義就是測試的地方 vendor/ ：composer 的資料夾，地位有點像是 npm 的 node_modules/ ，基本上這裡連動都可以不用動 `其他檔案：.env、.env.example、artisan 等等等 你看到很多個資料夾不用太緊張，就如同我上面說明的一樣，你主要會工作的資料夾就那幾個，其他能不動就不動，真的有需要才會進去裡面。
而在第一段的時候我們也說到 Laravel 的本質就是 php，所以其實我們可以試著打開進入點 public/index.php 來看看，你會發現大部分都是註解，真正重要的 code 只有幾行以下我就直接略過註解直接貼 code 給你們看
1&amp;lt;?php 2define(&amp;#39;LARAVEL_START&amp;#39;, microtime(true)); 3require __DIR__.&amp;#39;/../vendor/autoload.php&amp;#39;; 4$app = require_once __DIR__.&amp;#39;/../bootstrap/app.php&amp;#39;; 5$kernel = $app-&amp;gt;make(Illuminate\Contracts\Http\Kernel::class); 6$response = $kernel-&amp;gt;handle( 7 $request = Illuminate\Http\Request::capture() 8); 9$response-&amp;gt;send(); 10$kernel-&amp;gt;terminate($request, $response); 接下來請讓我看 code 說故事一樣</description></item><item><title>來談什麼是 MVC</title><link>jimmycode.tw/posts/%E4%BE%86%E8%AB%87%E4%BB%80%E9%BA%BC%E6%98%AF-mvc/</link><pubDate>Mon, 16 Sep 2019 16:35:26 +0000</pubDate><guid>jimmycode.tw/posts/%E4%BE%86%E8%AB%87%E4%BB%80%E9%BA%BC%E6%98%AF-mvc/</guid><description>Laravel 在 wiki 裡面寫道他是一種 MVC framework關於 MVC，他有點複雜，我很怕自己會有所說錯，簡而言之，他是許多設計模式的結合是一種架構現代 Web application 的架構模式與概念。
MVC 分別對應Ｍ odel、View 和 Controller。我們總是會希望我們在架構組織我們的程式碼是易讀、是好維護、是有意義的。有別於 PHP 常被人所詬病的 spaghetti 義大利麵式的程式碼，作為 MVC 的 Web framework:Laravel 無疑是解決了這個問題
註：義大利麵式的程式碼就是將所有資料庫連結、業務邏輯、頁面渲染全部都混做堆&amp;hellip;.隨著業務成長與一天天過去、換手的人越來越多，就會難以維護、難以組織與更新
當然 MVC 這個概念比 Laravel 的誕生還要早很多年，PHP 界也不只是只有 Laravel 這個框架獨有 MVC ，如果你搜尋 php mvc 的 web 框架還會有很多選項：例如 Symfony、Zend Framework 等等許多框架，你可以參考這個維基百科：https://zh.wikipedia.org/wiki/PHP%E6%A1%86%E6%9E%B6%E5%88%97%E8%A1%A8
作為 phper，如果有機會也學學其他框架也是一件好事的，（我是這麼期許自己的），不過我們此主題談的是 Laravel，所以當然是會繼續談 Laravel，而 Laravel 為什麼可以在 php 眾多框架中脫穎而出，其實就是如他官網所說的：「The PHP Framework for Web Artisans」，他的程式碼如果是高手的話真的可以寫得很「藝術」，我自己不是高手，但也在這個過程當中努力的成長成「Artisan」
PS. 請記得Artisan這個關鍵字，之後在 Laravel 會很常用到。
回到講解 MVC：
Model 負責關於 database 溝通或者封裝相關業務邏輯 View 負責一切你所看到的東西，也就是網頁的畫面 Controller 負責協調 Model 和 view 之間的溝通，控制流程、用戶的行為與 Model 之間的改變 真的很怕自己會寫錯，或者有什麼內容上面不太理解，所以我也附上其他相關的資料，如果我有錯誤的話也請麻煩留言告知</description></item><item><title>參賽前言、讀前基礎、環境預備</title><link>jimmycode.tw/posts/%E5%8F%83%E8%B3%BD%E5%89%8D%E8%A8%80%E3%80%81%E8%AE%80%E5%89%8D%E5%9F%BA%E7%A4%8E%E3%80%81%E7%92%B0%E5%A2%83%E9%A0%90%E5%82%99/</link><pubDate>Mon, 16 Sep 2019 09:21:10 +0000</pubDate><guid>jimmycode.tw/posts/%E5%8F%83%E8%B3%BD%E5%89%8D%E8%A8%80%E3%80%81%E8%AE%80%E5%89%8D%E5%9F%BA%E7%A4%8E%E3%80%81%E7%92%B0%E5%A2%83%E9%A0%90%E5%82%99/</guid><description>參賽前言 說真的，這裡真的不知道該寫些什麼，我也不知道我能不能像上次一樣寫滿 30 天，總之這次努力看看。
選擇一個自己最為擅長的語言：PHP，一個被所有工程師鄙視的語言哼，Laravel 的來到，無非是為這個已經被酸民酸到不行的語言注入一股強大的力量。
看遍一些 Laravel 的書籍之後，我覺得那些書籍都寫得過於簡單，舉例來說，很多書籍都沒有講到 Laravel 附帶的 phpunit 測試、還有 Laravel 與 websocket或者他可以與哪些 package 搭配會更加強大？或者 API、Redis、middleware、notification 怎麼用之類的。
希望我這個教學會是 Laravel 最詳盡的教學，也期許自己能把它寫完，順便探索與整理我的 Laravel 技能。PS. 原本我是想寫一些存檔在加入的，殊不知想著想著都已經 9/16 啦，完蛋啦，變成「時間驅動寫作」了哈哈哈
讀前基礎 希望你有些 php 和網頁的基礎，至少知道 php 的物件導向是該怎麼寫怎麼運作的。雖然我會盡量寫的平易近人一點，但有些過於基本的難免會直接簡單帶過去，不過如果你有任何問題，歡迎在底下留言詢問，我會竭盡所能地回答啦
環境預備 首先我們先來到官網，不得不說，英文對技術人真的有點重要（雖然作者我的英文還是很破），但有 google 翻譯以及一些英文的 sense 還是看得懂 Laravel 的文件啦，不得不說 Laravel 是我史上看過最棒的文件了～https://laravel.com/docs/6.x/installation
首先在安裝的部分他有說到了你要安裝一下 composer，假設你安裝好了 composer 之後你使用composer --version 這個指令就會看到有版本號
1$ composer --version 2Composer version 1.6.3 因為篇幅的關係，如果你發現下指令之後的結果沒有像上述一樣請自行 stackoverflow 或者 google 一下，也可以在底下留言啦，但要附上一些操作步驟和資訊，我還沒有練就通靈的能力喔哈哈哈
然後請用 composer 安裝一下 laravel 方便的安裝套件，使用底下的指令（我想文件已經告訴你們了）
1composer global require laravel/installer 然後之後用</description></item><item><title>Python 鐵人賽：遺珠之憾</title><link>jimmycode.tw/posts/Python-%E9%90%B5%E4%BA%BA%E8%B3%BD%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</link><pubDate>Tue, 30 Oct 2018 15:50:50 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E9%90%B5%E4%BA%BA%E8%B3%BD%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</guid><description>最後一天，終於寫到這裡
第一次參加鐵人賽，很幸運的可以連續30天完成。甚至有些時候差點要超過時間完成不了鐵人賽看了之前鐵人賽的文章，似乎過了一段時間在完成30天就會把挑戰第幾天凍結。（我也想要有鐵人煉成的成就啊～～
說真的這次給了我一個經驗，就是下次可能也要預先存幾個草稿好讓我可以之後準時發布我覺得也感謝我這次參加鐵人賽的經驗，讓我有機會好好整理Python的學習
總之，我來談談這次Python鐵人賽沒談到的遺珠之憾吧同時也是我之後會繼續專研的方向
基本與物件導向 多執行緒的議題 更深入的 Django和Flask 更深入的Pandas 關於機器學習/人工智慧：TensorFlow+Keras 其他爬蟲的框架：scrapy MapReduce 和 Spark 或Handoop 個人自己有看過的書籍而且覺得不錯
Python初學特訓班 Python 自動化的樂趣：搞定重複瑣碎&amp;amp;單調無聊的工作 Python新手使用Django架站的16堂課：活用Django Web Framework快速建構動態網站不過這本架站的16堂課已經是舊版，如果要新版的請至此（Python新手使用Django架站技術實作：活用Django 2.0 Web Framework建構動態網站的16堂課）https://www.books.com.tw/products/0010790747 個人推薦相關線上課程
https://morvanzhou.github.io/ Youtube Hahow 也有相關Python的課程，我自己在上的有：「Python 網頁爬蟲入門實戰」和「用 Python 理財：打造小資族選股策略」</description></item><item><title>Python 資料科學：Pandas</title><link>jimmycode.tw/posts/Python-%E8%B3%87%E6%96%99%E7%A7%91%E5%AD%B8%EF%BC%9Apandas/</link><pubDate>Mon, 29 Oct 2018 14:47:16 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B3%87%E6%96%99%E7%A7%91%E5%AD%B8%EF%BC%9Apandas/</guid><description>今天來說說資料分析的Python modules — pandas
首先我們來安裝他
1pip install pandas 接下來我要介紹在pandas兩個資料結構 Series 和 DataFrame他們的宣告很簡單，而且樣式也是很簡單，首先是series
1import pandas as pd 2 3l = [1,2,3,56,7,7,73,3,3,2] 4 5date = pd.date_range(&amp;#39;20180731&amp;#39;,periods=10) 6s = pd.Series(l,index= date) 7print(s) print(s)接下來你就會看到
12018-07-31 1 22018-08-01 2 32018-08-02 3 42018-08-03 56 52018-08-04 7 62018-08-05 7 72018-08-06 73 82018-08-07 3 92018-08-08 3 102018-08-09 2 11Freq: D, dtype: int64 所以series 很簡單，你可以想像成一個關係數列，然後之後我們可以藉由呼叫這個series的各種方法，如下
1print(s.loc[&amp;#39;20180731&amp;#39;]) #因為index 是時間可以這樣呼叫=&amp;gt;1 2print(s.loc[&amp;#39;20180731&amp;#39;:&amp;#39;20180802&amp;#39;]) #因為index從2018-07-31到2018-08-02 的值 3&amp;#39;&amp;#39;&amp;#39; 42018-07-31 1 52018-08-01 2 62018-08-02 3 7Freq: D, dtype: int64 8&amp;#39;&amp;#39;&amp;#39; 9print(s.</description></item><item><title>Python 網頁：Flask</title><link>jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Aflask/</link><pubDate>Sun, 28 Oct 2018 12:56:44 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Aflask/</guid><description>寫到這裡真的覺得自己下次要參加鐵人賽要想清楚。 要規劃好內容，也可能自己要寫一些存擋備份（不知道那些完成鐵人賽的是不是都是這樣？）
不然有時候寫到後面，真的不是很想繼續寫下去、也覺得自己寫的內容有點爛ＸＤ
也或許自己寫的這個技術並不是自己最在行的，而是自己下班的閒暇之餘所寫的，所以如果有錯或者有什麼提供建議再精進的方向給我！
今天要介紹Flask首先，就是要先安裝flask啊！
1pip install flask 接下來建立我們的檔案 index.py
1from flask import Flask 2app = Flask(__name__) 3@app.route(&amp;#34;/&amp;#34;) 4def hello(): 5 return &amp;#34;Hello World!&amp;#34; 6if __name__ == &amp;#34;__main__&amp;#34;: 7 app.run() 最後我們執行index.py就會看到類似底下的訊息
1 * Serving Flask app &amp;#34;index&amp;#34; (lazy loading) 2 * Environment: production 3 WARNING: Do not use the development server in a production environment. 4 Use a production WSGI server instead. 5 * Debug mode: off 6 * Running on http://127.</description></item><item><title>Python 網頁：Django- 來做一個部落格(2)</title><link>jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC2/</link><pubDate>Sat, 27 Oct 2018 15:56:02 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC2/</guid><description>今天，想把Django篇先結束ＸD
昨天，我們已經將post這個表註冊到後台並且已經migrate它現在，我們要開始做前端的畫面並且能夠顯示。 這非常的陽春，如果需要更加深研的請歡迎自行搜尋
首先你會好奇為什麼在後台儲存資料卻是post object，原因是你沒有設定要顯示的什麼東西
所以在這裡請編輯models.py
1from django.db import models 2from django.utils import timezone 3 4# Create your models here. 5class Post(models.Model): 6 title = models.CharField(max_length=200) 7 slug = models.CharField(max_length=200) 8 content = models.TextField() 9 pub_date = models.DateTimeField(default=timezone.now) 10 11 def __str__(self): 12 return self.title 加入 ＿str__ 方法並回傳他要回傳的名稱這樣就可以在後台看到標題了
然後請編輯一下blog/urls.py
1# ...（略） 2from django.contrib import admin 3from django.urls import path 4from mblog import views 5 6urlpatterns = [ 7 path(&amp;#39;&amp;#39;, views.homepage, name=&amp;#39;homepage&amp;#39;), 8 path(&amp;#39;admin/&amp;#39;, admin.</description></item><item><title>Python 網頁：Django- 來做一個部落格(1)</title><link>jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC1/</link><pubDate>Fri, 26 Oct 2018 15:06:28 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC1/</guid><description>昨天我們已經建立好部落格的大概專案結構，如下
1├── blog 2│ ├── __init__.py 3│ ├── __pycache__ 4│ │ ├── __init__.cPython-36.pyc 5│ │ ├── settings.cPython-36.pyc 6│ │ ├── urls.cPython-36.pyc 7│ │ └── wsgi.cPython-36.pyc 8│ ├── settings.py 9│ ├── urls.py 10│ └── wsgi.py 11├── db.sqlite3 12├── manage.py 13└── mblog 14 ├── __init__.py 15 ├── admin.py 16 ├── apps.py 17 ├── migrations 18 │ └── __init__.py 19 ├── models.py 20 ├── tests.py 21 └── views.py 接下來我們就來快速建立一個部落格吧
首先，我們主要work的資料夾都會在我們藉由startapp為起始的mblog資料夾內在models.py裡面做編輯，加入一個posts的表
1from django.db import models 2from django.</description></item><item><title>Python網頁篇：Django- 簡介</title><link>jimmycode.tw/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E7%B0%A1%E4%BB%8B/</link><pubDate>Thu, 25 Oct 2018 15:35:03 +0000</pubDate><guid>jimmycode.tw/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E7%B0%A1%E4%BB%8B/</guid><description>今天講點關於django概念上的東西
首先Django 的MVC不是傳統上的MVC ，而是MTVM- model.pyT- templatesV- View
詳細介紹可以參考此網址：http://mropengate.blogspot.com/2015/08/mvcdjangomtv.html
而今天要架一個blog的網站，首先django有趣的是他有一個初始專案開啟的資料夾以外，還有一個專門放網站設定網站程式的資料夾。所以我們要撰寫用django 架設 blog時還要再下一個指令
1Python manage.py startapp mblog 2#mblog 你可以用任何的名稱，只要不要和你本身目錄衝到 這時我們來看看目前程式資料夾的架構
1├── blog 2│ ├── __init__.py 3│ ├── __pycache__ 4│ │ ├── __init__.cPython-36.pyc 5│ │ ├── settings.cPython-36.pyc 6│ │ ├── urls.cPython-36.pyc 7│ │ └── wsgi.cPython-36.pyc 8│ ├── settings.py 9│ ├── urls.py 10│ └── wsgi.py 11├── db.sqlite3 12├── manage.py 13└── mblog 14 ├── __init__.py 15 ├── admin.py 16 ├── apps.py 17 ├── migrations 18 │ └── __init__.</description></item><item><title>Python網頁篇：Django- 初始環境</title><link>jimmycode.tw/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E5%88%9D%E5%A7%8B%E7%92%B0%E5%A2%83/</link><pubDate>Wed, 24 Oct 2018 14:13:41 +0000</pubDate><guid>jimmycode.tw/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E5%88%9D%E5%A7%8B%E7%92%B0%E5%A2%83/</guid><description>現在開始來講用Python開發網頁，這一篇到後面幾篇來講講用Django 架設一個用markdown寫作的部落格。
也藉著這個範例來說明一下django.
首先，當然是要先安裝好django啦！
1pip install django 然後要創建一個django的專案請使用
1django-admin startproject {專案名稱} 2#我這裡就是專案名稱為blog 3django-admin startproject blog 你的資料夾結構如下
1blog 2├── blog 3│ ├── __init__.py 4│ ├── settings.py 5│ ├── urls.py 6│ └── wsgi.py 7└── manage.py 接下來到blog的資料夾（或者你專案的資料夾下），使用
1python manage.py runserver 接下來會出現一個網址，像我的訊息就是
1Performing system checks... 2 3System check identified no issues (0 silenced). 4 5You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</description></item><item><title>Python 走入現實：json</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Ajson/</link><pubDate>Tue, 23 Oct 2018 15:01:37 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Ajson/</guid><description>今天來講怎麼用Python怎麼讀取json.
json 是一個資料表示的型式。以範例來看：
1import json 2 3# json 的資料形式字串 4x = &amp;#39;{ &amp;#34;name&amp;#34;:&amp;#34;jim&amp;#34;, &amp;#34;age&amp;#34;:25, &amp;#34;city&amp;#34;:&amp;#34;Taiwan&amp;#34;}&amp;#39; 5 6# 轉換json 7person = json.loads(x) 8 9print(type(person)) #&amp;lt;class &amp;#39;dict&amp;#39;&amp;gt; 10print(person){&amp;#39;name&amp;#39;: &amp;#39;jim&amp;#39;, &amp;#39;age&amp;#39;: 25, &amp;#39;city&amp;#39;: &amp;#39;Taiwan&amp;#39;} 11print(person[&amp;#39;age&amp;#39;]) #25 要讀取json非常簡單，import json這個module然後經由loads這個方法轉出，會產生一個dictionary型態資料
接下來，是反過來～把Python的物件轉換成json，則使用dumps方法
1import json 2 3person = {&amp;#39;name&amp;#39;: &amp;#39;jim&amp;#39;, &amp;#39;age&amp;#39;: 25, &amp;#39;city&amp;#39;: &amp;#39;Taiwan&amp;#39;} 4 5data = json.dumps(person) 6 7print(type(data)) #&amp;lt;class &amp;#39;str&amp;#39;&amp;gt; 8print(data) #{&amp;#34;name&amp;#34;: &amp;#34;jim&amp;#34;, &amp;#34;age&amp;#34;: 25, &amp;#34;city&amp;#34;: &amp;#34;Taiwan&amp;#34;}</description></item><item><title>Python 走入現實：selenium+爬蟲</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium%E7%88%AC%E8%9F%B2/</link><pubDate>Mon, 22 Oct 2018 14:54:04 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium%E7%88%AC%E8%9F%B2/</guid><description>昨天介紹了selenium 這個module今天來加強版，讓selenium 和beautifulSoup結合為一
1from selenium import webdriver 2from selenium.webdriver.support.ui import WebDriverWait 3from selenium.webdriver.support import expected_conditions 4from selenium.webdriver.common.by import By 5from bs4 import BeautifulSoup 6 7url =&amp;#39;https://tw.yahoo.com/&amp;#39; 8 9#今天講個特別的，我們可以不讓瀏覽器執行在前景，而是在背景執行（不讓我們肉眼看得見） 10#如以下宣告 options 11options = webdriver.ChromeOptions() 12options.add_argument(&amp;#39;--headless&amp;#39;) 13 14#打開瀏覽器,確保你已經有chromedriver在你的目錄下 15# 然後將options加入Chrome方法裡面，至於driver請用executable_path宣告進入 16browser=webdriver.Chrome(chrome_options=options, executable_path=&amp;#39;./chromedriver&amp;#39;) 17#在瀏覽器打上網址連入 18browser.get(url) 19 20#這時候就可以分析網頁裡面的元素 21element = browser.find_element_by_id(&amp;#39;UHSearchBox&amp;#39;) 22element.send_keys(&amp;#39;Hello World&amp;#39;) 23 24sumbit = browser.find_element_by_id(&amp;#39;UHSearchWeb&amp;#39;).click() 25 26# 等待目標表格&amp;#39;id 為 web&amp;#39;的div出現 27element = WebDriverWait(browser, 5).until( 28 expected_conditions.presence_of_element_located((By.ID, &amp;#39;web&amp;#39;)) 29) 30 31#然後就是beautifulsoup的範疇了，將browser.page_source放進去分析 32soup=BeautifulSoup(browser.page_source,&amp;#34;html.parser&amp;#34;) 33links = soup.</description></item><item><title>Python 走入現實：selenium</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium/</link><pubDate>Sun, 21 Oct 2018 05:24:21 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium/</guid><description>今天來介紹一個特別的module: selenium他是一個可以控制瀏覽器的module.
但如果你要控制瀏覽器載入這個module以外也要在下載相對應瀏覽器的driver還有相對應作業系統的版本，
我這裡以我自己作業系統為mac os 還有 瀏覽器的driver設定為我個人最常用的‘chrome’為例如果你是其他os或者要弄其他的瀏覽器，請造訪https://selenium-Python.readthedocs.io/installation.html
啊如果還是看不懂歡迎在底下留言討論。
先上範例程式碼：這裏我是用yahoo的網址然後在搜尋框打上hello world 並且做搜尋
1from selenium import webdriver 2 3url =&amp;#39;https://tw.yahoo.com/&amp;#39; 4 5#打開瀏覽器,確保你已經有chromedriver在你的目錄下 6browser=webdriver.Chrome(&amp;#39;./chromedriver&amp;#39;) 7#在瀏覽器打上網址連入 8browser.get(url) 9 10#這時候就可以分析網頁裡面的元素 11element = browser.find_element_by_id(&amp;#39;UHSearchBox&amp;#39;) 12element.send_keys(&amp;#39;Hello World&amp;#39;) 13 14sumbit = browser.find_element_by_id(&amp;#39;UHSearchWeb&amp;#39;).click() 關於selenium 你可以更多看文件：https://selenium-Python.readthedocs.io/index.html
接下來執行你就會很清楚的發現電腦另立一個新的chrome，然後坐著我們想要做的事&amp;hellip;
這樣的工作可以做什麼？可以延伸什麼？1.表單填寫：例如如果電子連署我可以大量搞死人連署（大誤ＸＤ2.軟體工程師的網頁測試3.可以和beautifulsoup搭配，天底下已沒有你爬不到的資料XD4.其他你覺得用瀏覽器很麻煩的動作</description></item><item><title>Python 走入現實：來爬蟲吧(3)</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A73/</link><pubDate>Sat, 20 Oct 2018 02:55:30 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A73/</guid><description>昨天看到一個大大po 鐵人賽的文章。終於解決了如何提取圖片的問題，原來，request也是可以讀到圖片檔的資訊的
來吧！ 我們來學習如何爬圖片！其實網頁要呈現圖片有幾個方向
img 標籤 css image 相關的屬性 用js 放進去（但不太可能有人做這種事情&amp;hellip;除非是互動性太高需要換圖片的那種） img 標籤要爬最簡單，看看src標籤就可以囉～ css的話就會比較麻煩一點總之，爬蟲前是要做一些功課的，他是一種極客製化的一種功能
這時就要說一下自己的切身之痛我很久以前也在下班時間玩Python的時候寫關於爬蟲的東西，結果不知道最近是不是網頁改版抑或是Python函式庫的問題，總之這個在去年還是前年寫的馬上出錯,怎麼debug都不對&amp;hellip;..怎麼google解法都解決不了
這時候你要去想辦法尋找解法，
是繼續在這個錯誤當中繞圈，跟他死嗑到底（想辦法正面和這個錯誤衝突）？ 尋找替代方案？ （和小學生一樣抄隔壁的作弊XD) 如果是接案或者那種有客戶你還有第三種選擇：說服他不要做這個功能（逃避隨可恥但有用？！！！！！！） 因為網路上其實很多人都有在寫Python抓圖片的程式或api ，你要相信一句話：你不是第一個發生這個問題的人
我和這個錯誤正面處理已經很久了，所以顯然第一個解法是不適合的，又或者等等寫完這篇鐵人賽或鐵人賽結束我會繼續想辦法解決這個錯誤，所以最後我來參考其他人的程式碼來看看他們怎麼抓圖片。
這時候，你有看懂Python程式的功力很重要，如何將他人的程式碼擷取或者看懂邏輯進而應用到自己的程式碼是一門藝術，我自己也還在摸索學習。
話不多說，上菜了，以爬https://www.inside.com.tw/ 為例如果你要爬其他網站，可以自行分析，或者歡迎在底下留言和我討論XD 我做不到我會google哈哈哈
分析一下inside的網頁，在他上方的slider 程式碼有段敘述如果你頑皮一點將url 裡面的網址貼上瀏覽器， yo 圖片get!
1&amp;lt;ul class=&amp;#34;hero_slides&amp;#34;&amp;gt; 2 &amp;lt;li class=&amp;#34;hero_slide js-hero_slide&amp;#34; style=&amp;#34;background-image: url(https://www.inside.com.tw/wp-content/uploads/2018/10/RTX2Z7S8.jpg)&amp;#34;&amp;gt; 3 所以接下來爬蟲囉！ 不知道inside 會不會吉我？哎呦 別這樣 你們如果改版的恐怕我底下的程式碼直接廢掉XD「同是工程師，相煎何太急」
這裏也要呼籲，爬蟲請務必遵守法律規範，因為網頁上的圖片是公開的，而且基本上我也沒要拿來幹嘛。所以我是合法使用（應該吧？？？！）
以下程式碼我是來抓inside 最上面slider 的幾張圖片，並且為了整齊將這些圖片都放到images這個資料夾裡
1import requests 2from bs4 import BeautifulSoup 3import os 4import re 5 6url=&amp;#34;https://www.inside.com.tw/&amp;#34; 7 8request=requests.get(url) 9content=request.content 10soup=BeautifulSoup(content,&amp;#34;html.parser&amp;#34;) 11 12container = soup.</description></item><item><title>Python 走入現實：圖形化介面</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E5%9C%96%E5%BD%A2%E5%8C%96%E4%BB%8B%E9%9D%A2/</link><pubDate>Fri, 19 Oct 2018 14:45:13 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E5%9C%96%E5%BD%A2%E5%8C%96%E4%BB%8B%E9%9D%A2/</guid><description>哈！ 結果到現在十點多才回到家沒有研究到多媒體資源到底該如何提取爬蟲過來，抱歉！ 趁著週末時間來好好研究，希望可以明天和大家分享一下怎麼爬多媒體資源（又或者鐵人賽之前吧？！趕不上的話&amp;hellip;.我不會學世堅跳海，只會和大家說聲抱歉啦哈）
這裏再用圖形化介面幫我代打啊哈這裏我使用的圖形化介面module是tkinter。
你會發現，原來Python這麼簡單！！！
1import tkinter as tk #哎這也是一種遺珠之憾，module也可以用別名，使用as加入你想改的名字也可以喔 2 3root = tk.Tk() 4root.title(&amp;#39;Hello World Application&amp;#39;) #介面的標題是&amp;#39;Hello World Application&amp;#39; 5 6root.mainloop() 只要import tkinter這個module, 接下來請呼叫他的Tk()方法記得，最後的mainloop方法也要，這樣你就呼叫出一個圖形化介面囉！
當然啦，只是這樣我這篇也太偷懶了XD昨天都這麼偷懶今天怎麼可以還這樣呢（昨天偷懶真的不是故意的啊！差點要熬夜隔天爬不起來上班啊）
所以，我來做一個可以按下按鈕，呼叫‘Hello World’訊息框的應用範例吧！
1import tkinter as tk 2import tkinter.messagebox as messagebox 3 4def HelloWorldMsgBox(): 5 print(&amp;#39;hello world&amp;#39;) 6 messagebox.showinfo(&amp;#34;Hello World Application&amp;#34;, &amp;#34;Hello World!&amp;#34;) #呼叫hello world的訊息框 7 8root = tk.Tk() 9root.title(&amp;#39;Hello World Application&amp;#39;) 10 11buttonHelloWorld = tk.Button(root, text=&amp;#39;SayHello&amp;#39;, width=25, command=HelloWorldMsgBox) 12buttonHelloWorld.pack() #按下去啟動上面定義好的HelloWorldMsgBox方法 13 14buttonClose = tk.Button(root, text=&amp;#39;Close&amp;#39;, width=25, command=root.</description></item><item><title>Python 走入現實：正規表達式</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F/</link><pubDate>Thu, 18 Oct 2018 15:47:55 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F/</guid><description>不好意思發現要爬蟲多媒體資源時發現一些問題，目前還在debug中哈哈&amp;hellip;
以後再來試試看怎麼取獲取多媒體資源，我承諾在鐵人賽結束前一定會想辦法生出來，今天為了能夠完成這一天先以正規表達式代打真是不好意思了。
在Python中用正規表達式非常簡單，就是用&amp;rsquo;re&amp;rsquo;這個module
1import re 2 3string = &amp;#39;Hello World&amp;#39; 4relist = re.findall(r&amp;#34;[a-z]*&amp;#34;,string) 5print(relist) 這樣你就會求出a-z 的文字喔。
正規表達式對於我們在搜尋或者分析資料非常好用
提供一些可以參考的資料：
https://regex101.com/ http://ju.outofmemory.cn/entry/71121</description></item><item><title>Python 走入現實：來爬蟲吧(2)</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A72/</link><pubDate>Wed, 17 Oct 2018 14:02:02 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A72/</guid><description>前一天我們談到如何使用Python發出類似瀏覽器的request，把所要的HTML+CSS+JS都給他抓過來。但是如果只是這樣那爬蟲又有什麼多厲害呢？ 爬蟲的厲害之處就是能把抓回來的東西，拿出來好好的分析，藉此獲得我們想要的資訊或者有用的資訊
因此，讓我接下來為他介紹收到request之後的事情吧！
BeautifulSoup 其實Python有許多的爬蟲套件，我之前個人下班在玩的時候都是用這個套件，當然也有其他可以爬的套件。這裏我介紹某位youtuber的資源：https://www.youtube.com/watch?v=T2xNeWutlcA
厲害吧！他居然用Python爬蟲去抓成人影片！呵呵 不過他用的是另外一種module 叫做pyquery
好啦，確定你有安裝好beautifulSoup之後就來開始吧這裡就不抓成人影片了，我們先開始抓取‘文字內容’，明天再來講我們怎麼抓取非文字內容的資料。我們來抓youtube今天熱門影片的標題們XD
大家都知道：youtube的熱門影片網址是：https://www.youtube.com/feed/trending
1import requests; 2from bs4 import BeautifulSoup; 3 4url=&amp;#34;https://www.youtube.com/feed/trending/&amp;#34; 5 6request=requests.get(url) 7content=request.content 8soup=BeautifulSoup(content,&amp;#34;html.parser&amp;#34;) 9 10container = soup.select(&amp;#34;h3 a&amp;#34;) 11 12# print(type(container)) 13# print(container) 14# 接下來只是寫入result.txt檔案的事情 15file = open(&amp;#39;result.text&amp;#39;,&amp;#39;w&amp;#39;) 16 17for item in container: 18 if item: 19 #print(type(item)) 20 value = item.get_text() 21 print(value) 22 file.write(value+&amp;#39;\n&amp;#39;) 23 #break #這裡也提一個起手式的遺珠之憾，就是你可以用continue和break來處理 迴圈敘述，這裏為了我之前debug方便，使用break來讓我先只看一個的結果。 24 25 26file.close() 用範例講解：首先先把兩個module beautifulsoup ＆request引入接下來你會看到我使用request.get 取得熱門影片的youtube網頁的內容。再來你就用soup=BeautifulSoup(content,&amp;quot;html.parser&amp;quot;)把content 丟入beautifulSoup解析，後面參數記得加上‘html.parser’
然後回去用瀏覽器打開https://www.youtube.com/feed/trending/ 這個網頁，可能希望你會有一些基礎的html+css基礎，總之你可以仔細看看每個標題的地方，上面都會有h3 以及我們最想要的標題文字正好都被包在a這裡面。</description></item><item><title>Python 走入現實：來爬蟲吧(1)</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A71/</link><pubDate>Tue, 16 Oct 2018 15:07:02 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A71/</guid><description>剛剛在想今天要寫什麼的時候&amp;hellip;.突然想到之前其實就有點想寫爬蟲的主題ＸＤ所以就來寫一波！
淺談網路與網頁 其實我們藉由瀏覽器打入網址看到的“網頁”，獲得的都是一種“資源”，而這個資源他所回傳的是HTML+CSS＋JS(當然對於‘api’來說，他有可能回傳的是&amp;rsquo;json'、’xml‘或者其他類型)。其實說穿了網頁前端說難不難說雜不雜，就是基於這三大天王。當然你會問，那麼我們常說的後端語言：php、ruby、或者是現在我們在談的Python呢？我們總不可能拿前端來連資料庫吧（安全緣故）？沒錯！ 對於開發者的角度來說，我們是用這些後端語言，但如果你發現，其實後端語言都是會由CGI或者後端渲染的引擎，當你試著對網頁開啟右鍵檢查時，他還是HTML+CSS+JS啊！
這裏還只是淺談，如果要繼續深入的話可以說非常非常多，預計30天鐵人賽都寫不完，這裏我極力推薦某個部落客寫的有關於http的文章以及一些我個人覺得可以更加深入的參考資料，淺顯明瞭、而且我也是讀過了對於網路、瀏覽器有更多的認識呢！
NotFalse 技術客所寫的http教學系列 來做個網路瀏覽器吧！Let&amp;rsquo;s build a web browser! 系列 ：去年某大大寫的鐵人賽系列，看不懂沒關係，我也看不是太懂XD 但前面幾篇文章多少對於瀏覽器如何運作或者網路如何操作會有更多的了解 維基 或者google: 當然你也可以用wiki或自行google來幫助自己更加了解 總之，我們可以知道我們爬回來的東西就是一連串的文字，就是HTML+CSS+JS/除非你是對API 當然就獲得其他類型的資料
環境建置 如果你不喜歡自己的環境太過髒亂，你想要有‘virtual’ 環境，那非常好，Python3自己有內建，另外我自己或網路上也推薦‘virtualenv’這個modules
總之，時間不多 let&amp;rsquo;s start!我就先假設大家想要有一個不受污染的環境吧先確定安裝好pip之後請執行
1pip install virtualenv #安裝virtualenv這個環境 2virtualenv crawler #建立一個名字叫做crawler的虛擬環境 3source crawler/bin/activate #啟動這個crawler 這個環境(for mac) 4\crawler\Scripts\activate.bat #或者也可以執行這個指令 (for windows) [參考](https://programwithus.com/learn-to-code/Pip-and-virtualenv-on-Windows/) 5 你的環境如果有啟動的話應該可以看到你們前面會有個類似(crawler)的字樣。要離開的話就使用&amp;rsquo;deactivate&amp;rsquo;這個指令吧！在虛擬環境之下/或者直接本機請安裝幾個會需要用到爬蟲的module吧！
1pip install requests #安裝一個可以發出網路request的module 2pip install BeautifulSoup4 #可以用這個module分析回傳回來的html+css+js 牛刀小試一下 在想要不要一口氣談完爬蟲的同時我發現時間很晚了，所以就只好分個幾天慢慢說明好了。前面說到我們的爬蟲通常會拿回來HTML+CSS+JS，那我們就來驗證一下吧！建立crawler.py
1import requests; 2from bs4 import BeautifulSoup; 3 4url=&amp;#34;https://tw.yahoo.com/&amp;#34; 5 6request=requests.get(url) 7content=request.content 8 9print(content) 執行後你看到了什麼呢？是不是html+css+js呢？ 或者你也可以使用</description></item><item><title>Python 走入現實：檔案</title><link>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AA%94%E6%A1%88/</link><pubDate>Mon, 15 Oct 2018 14:34:09 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AA%94%E6%A1%88/</guid><description>恩&amp;hellip;想不到什麼更好聽的標題名稱了哈哈，總之接下來要介紹一些可以在實際操作的內容。今天來講講怎麼做一個檔案以及怎麼去讀檔好了。
首先，讀檔的範例如下：
1f = open(&amp;#34;hello.txt&amp;#34;,&amp;#34;r&amp;#34;) #open 的第二個參數至關重要，之後我會再繼續說明，r這個參數就是檔案是唯讀的 2print(f.read()) #這是讀全部內容的 3print(f.read(10)) #讀前面幾個文字 請注意你執行這個Python檔案的目錄，然後確認這個目錄底下使否有hello.txt的檔案。這樣就會把資料讀出來。
另外，寫檔或者建檔的程式範例如下
1f = open(&amp;#34;demo.txt&amp;#34;, &amp;#34;a&amp;#34;) #a 這個參數就是附加檔案內容，檔案不管存在不存在 2f.write(&amp;#34;Now the file has one more line!&amp;#34;) 之後你就會在目錄下找到demo.txt這個檔案，然後就會看到這個內容。除了“a” 以外也可以用“x”或“w”， 前者是file“必須不存在”，加入x這個參數就會幫你建立這個檔案。而w這個參數就會不管這個檔案存不存在，就會把原本的內容全部重洗掉然後加入。</description></item><item><title>Python 起手式：遺珠之憾</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</link><pubDate>Sun, 14 Oct 2018 14:03:53 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</guid><description>我覺得起手式有些還未講完的。不過我覺得還是希望可以先結束這一塊！然後開始寫一些爬蟲或file io、爬蟲之類的。
來吧！所以來開始撰寫一些“遺珠之憾”，希望給大家一些資源好好學習。讓大家知道其實還有很多沒有說到的部分。
多重listlist不只是可以單維，也可以多維。例如像是底下這個樣子 1list = [[1,2,3],[4,5,6]] 2&amp;gt;&amp;gt;&amp;gt; list[0][1] 32 4&amp;gt;&amp;gt;&amp;gt; list[1][2] 56 turpleturple 不是可以只有用括弧包一、二個值而已，也可以包很多，另外兩個turple也可以相加，不過兩者的相加不過就是兩個的串連。 1&amp;gt;&amp;gt;&amp;gt; x = (1,2,&amp;#39;abc&amp;#39;,&amp;#39;def&amp;#39;,6) 2&amp;gt;&amp;gt;&amp;gt; y = (3,4,&amp;#39;ghi&amp;#39;) 3&amp;gt;&amp;gt;&amp;gt; x+y 4(1, 2, &amp;#39;abc&amp;#39;, &amp;#39;def&amp;#39;, 6, 3, 4, &amp;#39;ghi&amp;#39;) 5(1, 2, &amp;#39;abc&amp;#39;, &amp;#39;def&amp;#39;, 6, 3, 4, &amp;#39;ghi&amp;#39;) 6&amp;gt;&amp;gt;&amp;gt; y = (6,2,&amp;#39;ghi&amp;#39;) 7&amp;gt;&amp;gt;&amp;gt; x+y 8(1, 2, &amp;#39;abc&amp;#39;, &amp;#39;def&amp;#39;, 6, 6, 2, &amp;#39;ghi&amp;#39;) lambda我們一般來說會這樣寫def 函式 1 return a+b if m &amp;gt; n else n 2#result 3&amp;gt;&amp;gt;&amp;gt; add(5,6) 411 但是我今天研究還有lambda的寫法。</description></item><item><title>Python 起手式：module</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Amodule/</link><pubDate>Sat, 13 Oct 2018 08:24:09 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Amodule/</guid><description>這將會是起手式的最後一篇文章，之後將會寫關於爬蟲、File IO 或者其他像是Django 與Flask的淺談。這裏我要來給大家介紹一個蠻有趣的東西，通常我們寫程式不會都是一個檔案寫到底的，所以這裏我們要展示一下如果多個檔案的話，Python要如何運用&amp;hellip;同時也教教大家我們是怎麼使用module的
要把module用在自己的Python檔案要怎麼用呢？ 其實很簡單：就是用&amp;rsquo;import&amp;rsquo;這個關鍵字就好。
所以你可以看到之前數字遊戲當中以及之後有許多的範例程式碼會看到import或者from這些關鍵字&amp;hellip;那些大部分是Python內建的modules,或者透過pip安裝後的modules&amp;hellip;
以下我展示我們如果要引入別的檔案該怎麼辦？來假設目前的目錄有x.py 和y.py
1#x.py 2class Aclass: 3 def sayHello(self): 4 print(&amp;#39;Hello World&amp;#39;) 如果y.py要用x.py裡面的x.py的Aclass怎麼辦呢？你可以用from或import這些關鍵字啦，有兩種寫法
1#y.py 寫法一 2import x #將x.py所有內容引入 3 4test = x.Aclass() 5test.sayHello() #Hello World 6 7#y.py 寫法二 8from x import Aclass #將x.py引入裡面的Aclass 9 10test = Aclass() 11test.sayHello() #Hello World 這樣就大概完成啦，說真的因為Python都是目前下班的玩具語言，好少這樣玩也好少這樣寫，可能還有很多東西可以值得探究，所以就留待明天繼續寫吧～ 起手式：遺珠之憾！</description></item><item><title>Python 起手式：繼承</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B9%BC%E6%89%BF/</link><pubDate>Fri, 12 Oct 2018 14:47:42 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B9%BC%E6%89%BF/</guid><description>其實物件導向的世界很大，有空可以去翻翻設計模式（design pattern)(大誤？！或許我只是新手，只是寫給for 新手或者我自己寫來看，所以就沒太多的專研，但物件導向確實是個值得探討很久的議題，預計可以多寫幾天的鐵人賽（誒～ 好啦，我還是配合自己的步調好了，我還是希望後面我可以寫到爬蟲啊、Django或者flask等等的。
經過研究發現，我們其實不知不覺就已經使用到繼承，我以昨天寫的person 類別為例。
1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayToPersonHello(self,name): 6 print(&amp;#39;Hello &amp;#39;+ name) 7 8print(type(Person)) #&amp;lt;class &amp;#39;type&amp;#39;&amp;gt; 9print(type(John)) #&amp;lt;class &amp;#39;__main__.Person&amp;#39;&amp;gt; 10print(Person.__bases__) #(&amp;lt;class &amp;#39;object&amp;#39;&amp;gt;,) 其實我們在寫person這個類別的時候，其實就繼承了object這個類別&amp;hellip;
所以接下來，我們可以宣告women這個類別繼承Person, 在Python好簡單，只要類別名稱旁邊加入（）即可，然後括弧內加入類別的名稱。
1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayToPersonHello(self,name): 6 print(&amp;#39;Hello &amp;#39;+ name) 7 8class Women(Person): 9 def __init__(self,height,weight): 10 super().</description></item><item><title>Python 起手式：談物件導向</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E8%AB%87%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/</link><pubDate>Thu, 11 Oct 2018 14:37:57 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E8%AB%87%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/</guid><description>嗚，到第11天了！今天來談談物件導向的部分，物件導向簡單來說就是一種“物件”的資料型態。這種資料型態比較特別的就是在物件裡，有“屬性”和“方法”，不像之前所介紹的資料型態比較單向，數字就是數字;文字就是文字。
Python的物件表示非常簡單，只要使用&amp;rsquo;class&amp;rsquo;這個關鍵字就好，然後記得要“縮排”，在Python當中，縮排可以視為一種區塊。而要使用物件這種資料型態只要用你所宣告的class新名稱，然後加入‘()’就好了。如下所示：
1class Person: 2 height=5 3 weight=40 4 5John = Person() 6print(John.height) #5 然後在上面的例子中，我們的height和weight都被寫死了，在現實世界我們的height和weight都不太一樣，在物件導向的世界有construct這個方法可以使用，php、ruby都是這樣，那Python呢？請看底下示範
1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 6John = Person(5, 40) 7print(John.height) #5 Python厲害的地方是不用特別宣告屬性，直接在init 這個方法做出宣告即可。請記得，self是必要的，然後記得縮排，Python的construct就完成了
而物件導向除了屬性，也有方法，在這裡我用程式帶過：
1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayHello(self): 6 print(&amp;#39;Hello&amp;#39;) 7 8John = Person(5, 40) 9John.sayHello() #Hello 所以呢，Python的方法就是用def這個關鍵字，然後請記得加入self，記得縮排就可以啦！當然，也可以試試看加入外部的參數
1class Person: 2 def __init__(self, height, weight): 3 self.</description></item><item><title>Python 起手式：Functions</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Afunctions/</link><pubDate>Wed, 10 Oct 2018 12:32:19 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Afunctions/</guid><description>前幾天總算把變數的部分有點寫得差不多了，但我知道根據我自己研究起來的資料還有很多很多可以探討的，但我也不想拿來騙鐵人賽的天數XD 所以算是寫了一個段落就告別一個階段。這是一個新的階段，就是來講講關於程式的函式，又可能稱為功能之類的，總之php是這樣寫的：
1&amp;lt;?php 2function sayHello($name){ 3 echo &amp;#39;hello, &amp;#39;.$name; 4} 5 6sayHello(&amp;#39;Jim&amp;#39;); #output: hello, Jim function 有點像是物件導向裡面的封裝，把你要跑的流程或者要使用的變數等等寫在一個區塊中，並且為這個區塊取一個名稱，而你只要呼叫這個名稱而且給予這個區塊可以處理的input就可以輸出經過這個區塊處理好的output或者要做的作為，在這個區塊中，你可以return也可以不return （但似乎有return會比較好）
function就是現實世界中我們遇到的數學函式，例如三角函數或者什麼幾元幾次方程式之類的，你代入某個數，就會出來一個結果。
Python的function也超簡單的
1def functionname( parameters ): 2 # ...statement... 請注意喔，Python的':&amp;lsquo;及縮排都極為重要，要放入statement 請縮排。在這裡我就做一個簡單示例吧！
1def sayHello(name): 2 print(&amp;#39;Hello ,&amp;#39;+name) 3 4sayHello(&amp;#39;Jim&amp;#39;) #Hello ,Jim</description></item><item><title>Python 起手式：dictionary</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Adictionary/</link><pubDate>Tue, 09 Oct 2018 13:54:18 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Adictionary/</guid><description>寫到這裡，真的覺得可以寫滿30天持續不間斷的真的超級強大的，我覺得自己快撐不住了。不過為了能夠學會Python，我仍然願意忍受工作的辛苦想耍廢之後，還是要繼續寫下去&amp;hellip;&amp;hellip; 同時，原本是想自己慢慢寫慢慢自己看的，沒想到居然有這麼多人訂閱這篇文。真是讓我受寵若驚，這也是我必須要繼續寫下去的理由。
Python 中也有一個資料型態，叫做“Dictionary”，有點像是php的 associative arraysphp 是這樣表示的：
1$age = array(&amp;#34;Peter&amp;#34;=&amp;gt;&amp;#34;35&amp;#34;, &amp;#34;Ben&amp;#34;=&amp;gt;&amp;#34;37&amp;#34;, &amp;#34;Joe&amp;#34;=&amp;gt;&amp;#34;43&amp;#34;); 而在Python當中，dictionary是這樣表示的
1age = {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37, &amp;#39;Joe&amp;#39;: 43} 2age[&amp;#39;Peter&amp;#39;] # 35 而dictionary 和 list一樣可以修改
1age[&amp;#39;Ben&amp;#39;]=38 2age # {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 38, &amp;#39;Joe&amp;#39;: 43} 3 至於dictionary的刪除或清空則需要這樣
1age = {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37, &amp;#39;Joe&amp;#39;: 43} 2del age[&amp;#39;Joe&amp;#39;] 3age # {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37} 4age.clear() 5age # {} 比較特別的是，dictionary可以轉換成string
1age = {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37, &amp;#39;Joe&amp;#39;: 43} 2len(age) # 3 3str(age) # &amp;#34;{&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37, &amp;#39;Joe&amp;#39;: 43}&amp;#34; 4type(str(age)) # &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; 5type(age) # &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt; 6 其他操作</description></item><item><title>Python 起手式：淺談tuples</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87tuples/</link><pubDate>Mon, 08 Oct 2018 13:49:55 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87tuples/</guid><description>tuples 也是Python的資料型態之一，同屬於“列表”的一種。宣告方式如下
1&amp;gt;&amp;gt;&amp;gt; tuple =(&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;); 2&amp;gt;&amp;gt;&amp;gt; tuple 3(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;) tuple 同樣與list一樣可以放置不同的資料型態，唯一不同的是兩者的宣告方式一個是用小括弧;另一個則是使用中括弧。兩者最大不同之處就是tuple不能修改、新增，而list可以。
1&amp;gt;&amp;gt;&amp;gt; list = [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;] 2&amp;gt;&amp;gt;&amp;gt; list[0]=&amp;#39;c&amp;#39; 3&amp;gt;&amp;gt;&amp;gt; list 4[&amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;] 5&amp;gt;&amp;gt;&amp;gt; tuple=(&amp;#39;a&amp;#39;,0,2,&amp;#39;c&amp;#39;) 6&amp;gt;&amp;gt;&amp;gt; tuple 7(&amp;#39;a&amp;#39;, 0, 2, &amp;#39;c&amp;#39;) 8&amp;gt;&amp;gt;&amp;gt; tuple[0]=&amp;#39;b&amp;#39; 9Traceback (most recent call last): 10 File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; 11TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment 參考資料：
https://www.w3schools.com/Python/Python_tuples.asp http://itman2266.blogspot.com/2013/05/Python-tuple.html https://ithelp.ithome.com.tw/articles/10185010</description></item><item><title>Python起手式：探討lists</title><link>jimmycode.tw/posts/Python%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%8E%A2%E8%A8%8Elists/</link><pubDate>Sun, 07 Oct 2018 07:01:07 +0000</pubDate><guid>jimmycode.tw/posts/Python%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%8E%A2%E8%A8%8Elists/</guid><description>前面談到資料結構numbers 數字。今天來講講在程式語言當中很重要的list（我發現之前用collection 形容有點不太恰當，我會修改之前寫的文章！事實上在Python中有一個collection的module 誒～我鐵人賽又可以多一天來寫啦XD）
關於collection 可以參考：https://docs.Python.org/2/library/collections.html我想以後再找一天為這個部分做個小專題好了！
另外本篇文章我也是參考：https://www.tutorialspoint.com/Python/Python_lists.htm
在現實中，我們也是有這種list的概念。像是班級的學生名冊、或者成績風雲榜、排名等等，就是那種以“串”為單位的資料型態。在php當中，就是array ,也是程式語言中常稱呼的「Array」(陣列)注意：Python 沒有 array
在Python中，list宣告很簡單
1&amp;gt;&amp;gt;&amp;gt; list = [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;] 2&amp;gt;&amp;gt;&amp;gt; print(list) 3[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] 用[]作為宣告的符號，包住你想要包的資料，資料與資料以,作為區隔 而list 可以變化他的值，其中有 insert 、append、或者index等等方法&amp;hellip;.你可以任意運用以下我謹以程式碼帶過操作：
1&amp;gt;&amp;gt;&amp;gt; list= [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;] 2&amp;gt;&amp;gt;&amp;gt; list 3[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;] 4&amp;gt;&amp;gt;&amp;gt; type(list) 5&amp;lt;class &amp;#39;list&amp;#39;&amp;gt; 6&amp;gt;&amp;gt;&amp;gt; list.append(&amp;#39;e&amp;#39;) #將元素放到list的最後 7&amp;gt;&amp;gt;&amp;gt; list 8[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;] 9&amp;gt;&amp;gt;&amp;gt; list.count(&amp;#39;a&amp;#39;) #這個元素在list有幾個 101 11##值得一提的是如果要知道list裡面有幾個元素不可以用count(),count裡面一定要有參數，你可以使用len(list) 12&amp;gt;&amp;gt;&amp;gt; len(list) 135 14&amp;gt;&amp;gt;&amp;gt; list.insert(0,&amp;#39;a&amp;#39;) #你也可以宣告index(list index以0為開頭)，然後插入元素，不過在那個index之後的元素將會都往後移。 15&amp;gt;&amp;gt;&amp;gt; list 16[&amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;] 17&amp;gt;&amp;gt;&amp;gt; list.</description></item><item><title>Python 起手式：淺談 numbers</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87-numbers/</link><pubDate>Sat, 06 Oct 2018 00:42:04 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87-numbers/</guid><description>原本想說變數與型態得部分一天寫完就好，但昨天整理了一下發現原來Python 的型態博大精深，有發現到另外自己以前在玩轉Python沒有注意的細節。（說真的有時候寫Python也很少會注意到這些細節，反正就是要寫什麼查什麼，出了錯自己debug&amp;hellip;）
鐵人賽的好處就是為了要給別人看，所以你必須要好好整理、你寫的文章說的話都要是True，不可以隨便唬弄人，也藉著這個機會也是好好為自己學習的Python做出整理。
放心，Python的變數不會拖太久，我預計就特別在拉出來講numbers以及collections 就好，文字與boolean因為是蠻簡單的型態，上網查的時候也沒有發現什麼特別的點，所以就不繼續著墨這裏。(20181007更：我發現用collections 稱呼非常不恰當，所以我決定直接以list、tuple和dictionary 稱呼並逐天深入了解介紹)
Numbers 有三種 numbers就是我們現實生活中常用到的數字，舉凡整數、正整數、負數以及小數等等&amp;hellip; 為了確保自己在numbers的理解沒有問題，我特別參考了官網對於numbers的教學：https://docs.Python.org/3/tutorial/introduction.html#numbers
numbers 有三種
int float complex 簡單來說，Python的numbers 就是可以加減乘除的，同時也支援我們現實的四則運算。
1&amp;gt;&amp;gt;&amp;gt; 1+1 22 3&amp;gt;&amp;gt;&amp;gt; 1+5*6 431 5&amp;gt;&amp;gt;&amp;gt; (1+5)*6 636 7&amp;gt;&amp;gt;&amp;gt; type(1+1) 8&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 9&amp;gt;&amp;gt;&amp;gt; type(1+5*6) 10&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 11&amp;gt;&amp;gt;&amp;gt; type((1+5)*6) 12&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 整數 int 這個型態最簡單了，就是1到9和0，現實世界中的正整數、負整數和0要宣告負整數很簡單，像現實世界當中加個-就好
1&amp;gt;&amp;gt;&amp;gt; -1 2-1 3&amp;gt;&amp;gt;&amp;gt; type(-1) 4&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 5&amp;gt;&amp;gt;&amp;gt; type(0) 6&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 7&amp;gt;&amp;gt;&amp;gt; type(15) 8&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 小數/浮點數 float float就是現實遇到的小數，只要你用.符號就可以囉
1&amp;gt;&amp;gt;&amp;gt; 1.5 21.5 3&amp;gt;&amp;gt;&amp;gt; type(1.5) 4&amp;lt;class &amp;#39;float&amp;#39;&amp;gt; complex 這東西有點複雜，我自己也不是很能理解，由於工作的關係也鮮少使用到這個型態。意思是除了純數字及符號以外你還可以加入一些虛數，參考網址：http://www.</description></item><item><title>Python 起手式：來談談變數與型態</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E4%BE%86%E8%AB%87%E8%AB%87%E8%AE%8A%E6%95%B8%E8%88%87%E5%9E%8B%E6%85%8B/</link><pubDate>Fri, 05 Oct 2018 15:14:27 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E4%BE%86%E8%AB%87%E8%AB%87%E8%AE%8A%E6%95%B8%E8%88%87%E5%9E%8B%E6%85%8B/</guid><description>有許多人說，程式＝資料結構＋演算法，這句話確實沒有錯，前面我們說到演算法的部分、現在來談談“資料結構”的部分
一般來說我也不會特別去整理他，是因為今天要寫鐵人賽所以特別花時間整理一下。以免自己有漏掉或寫錯的部分（其實前面幾天也是邊查邊寫啦！不知道有沒有人也是這樣子？會不會很不專業哈哈，每支程式片段還是會花一段時間確認執行過程與執行結果。以免自己有說錯的地方）我參考自：https://www.w3schools.com/Python/Python_variables.asp
前面談到程式語言的控制流程，也就是control flow，以及如果再control flow中出錯需要做的Error Handling. 我想我應該是少數幾位把control flow和exception 放在前面寫的作者吧ＸＤ 其實正常來說，綜觀程式教學書都先是變數與型態先教再說&amp;hellip;
變數 變數其實就放放置的名稱&amp;hellip; 恩&amp;hellip;用一行程式說明比較快
1a=6 說明：這裏的‘a’ 就是我說的變數啦！Python的變數宣告很簡單，只要是文字就好（然後意外試過中文也可以喔&amp;hellip;但非常不建議這樣做）
1變數=5 2print(變數) #Output 是5 然後根據上面我提供的參考網址Ｗ3C 有提供很清楚明確的命名變數規則：
變數必須以字母或者文字或者_作為開頭及組成變數名稱的元素而已，不可以用其他的例如數字為開頭(ex. 1a, 2b 這種都是不會通過的變數名稱) 不可以使用Python原本有的保留字或關鍵字 (ex. class之類) 變數的名稱大小寫敏感(ex.CLASS雖然是保留字卻可以當變數、a 和Ａ是不一樣的啊) 關於Python保留字的部分不想上網查的話就直接用程式查一下吧(我也是剛剛才知道的呢ＸＤ)
1import keyword 2print(keyword.kwlist) 3&amp;#39;&amp;#39;&amp;#39; 4[&amp;#39;False&amp;#39;, &amp;#39;None&amp;#39;, &amp;#39;True&amp;#39;, &amp;#39;and&amp;#39;, &amp;#39;as&amp;#39;, &amp;#39;assert&amp;#39;, &amp;#39;break&amp;#39;, &amp;#39;class&amp;#39;, &amp;#39;continue&amp;#39;, &amp;#39;def&amp;#39;, &amp;#39;del&amp;#39;, &amp;#39;elif&amp;#39;, &amp;#39;else&amp;#39;, &amp;#39;except&amp;#39;, &amp;#39;finally&amp;#39;, &amp;#39;for&amp;#39;, &amp;#39;from&amp;#39;, &amp;#39;global&amp;#39;, &amp;#39;if&amp;#39;, &amp;#39;import&amp;#39;, &amp;#39;in&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;lambda&amp;#39;, &amp;#39;nonlocal&amp;#39;, &amp;#39;not&amp;#39;, &amp;#39;or&amp;#39;, &amp;#39;pass&amp;#39;, &amp;#39;raise&amp;#39;, &amp;#39;return&amp;#39;, &amp;#39;try&amp;#39;, &amp;#39;while&amp;#39;, &amp;#39;with&amp;#39;, &amp;#39;yield&amp;#39;] 5&amp;#39;&amp;#39;&amp;#39; 相較於php變數宣告要用'$&amp;lsquo;字開頭（自然就沒有保留字和大小寫敏感問題啦ＸＤ），這點應該php就勝過了吧?</description></item><item><title>Python 起手式：Error Handling-以猜數字遊戲為例</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Aerror-handling-%E4%BB%A5%E7%8C%9C%E6%95%B8%E5%AD%97%E9%81%8A%E6%88%B2%E7%82%BA%E4%BE%8B/</link><pubDate>Thu, 04 Oct 2018 12:52:05 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Aerror-handling-%E4%BB%A5%E7%8C%9C%E6%95%B8%E5%AD%97%E9%81%8A%E6%88%B2%E7%82%BA%E4%BE%8B/</guid><description>Python同樣與其他語言一樣，也有他的Error Handling, 什麼是Error Handling呢？程式有輸入也有輸出，還有控制的過程，但萬一在過程當中出錯了怎麼辦？就像郵局從寄信方收到信件、最後要經過處理、透過郵差送信給收信方，在這樣繁複的過程中，有可能會出現一些問題而導致收信方收不到信件。
對於程式本身，有哪些地方會出錯呢？這裡我以短短幾年工程師生涯所遇到的雷來談談～ 程式本身沒有錯，錯的是撰寫程式的人XD（好悲催～） 好啦！這也就是我們工程師存在的價值啦！沒有人能夠一定保證程式永遠都不會出錯～ Garbage in Garbage out，使用者習慣與環境千千百百種，都會有可能有當初撰寫程式者沒有預期到的輸入，況且，在軟體工程界當中：「沒有不變的需求」，可能這一段時間他可以完全無誤地跑，但有可能以後時間長了或者增加了新需求後，就不能跑了&amp;hellip;
還有啊，有時候也不見得是程式撰寫者及程式本身的錯誤，在寫程式的過程當中，有時會呼叫外部的函式庫或外部的API，這有時也不是你的錯，但就這麼剛好他回傳或者你送出的就不是你所期待的，那麼就會噴錯了。
為了解決當程式面對這些error可以仍持續地執行下去。你就一定要有error handling，以確保使用者不會“驚嚇”到
關於Python的error handling 敘述如下
1try: 2 {statement area} 3catch (error type),(value): 4 {error handing} 5else: 6 { statement area continue...} 7finally: 8 {finally area} 說明：
在Python界當中，縮排和:很重要！請務必注意！ 而catch後面的 error type和value 不一定要加，你也可以單純的’catch:‘這樣一行帶過
至於error type你可以參考這個網址 else 則是當try所包的statement無誤的時候會執行的。
最後finally子句就是無論try或有沒有取得exception,都會執行的區域，php同樣也有類似finally的敘述。
以昨天寫的猜數字小遊戲為例子，可能出錯的就是input那一塊，因為input是由使用者輸入的，萬一使用者輸入的不是數字怎麼辦呢？同時，我們也加入可以計算你猜數字的次數需求。
所以會改成底下這個樣子：
1import random 2ans = random.randint(0,10) #取從1到10的亂數 3times = 0 4print(&amp;#39;請猜一個0~10的數字&amp;#39;) 5play = True 6 7while(play): 8 try: 9 guess = int(input(&amp;#39;來隨便猜一個數字吧: &amp;#39;)) #input出來預設為str，轉型為int 10 except: 11 print(&amp;#39;程式出現非預期的錯誤，遊戲結束，答案是&amp;#39;+str(ans)) 12 #str()是將數字轉文字，&amp;#39;+&amp;#39;串接的必須是同樣的型態。 13 play = False 14 else: 15 times = times+1 #每猜一次就要+1 16 if (guess &amp;gt; ans): 17 print(&amp;#39;喔你猜得太大囉&amp;#39;) 18 elif (guess &amp;lt; ans): 19 print(&amp;#39;喔你猜得太小囉&amp;#39;) 20 else: 21 print(&amp;#39;恭喜你猜對了！&amp;#39;) 22 play = False 23 finally: 24 print(&amp;#39;你猜了&amp;#39;+str(times)+&amp;#39;次&amp;#39;) 說真的，我寫程式也很少寫error handling，我也是邊查資料邊寫邊做的。如果有錯誤或者要補充的歡迎來指教及提醒。 參考網址</description></item><item><title>Python 起手式：總是要有control flow！</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B8%BD%E6%98%AF%E8%A6%81%E6%9C%89control-flow%EF%BC%81/</link><pubDate>Wed, 03 Oct 2018 14:09:29 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B8%BD%E6%98%AF%E8%A6%81%E6%9C%89control-flow%EF%BC%81/</guid><description>前言 昨天展示了超簡單input和output的小程式，如果程式只是in and out ,那麼有什麼好繼續學的呢？當然啦，garbage in ,garbage out，如果丟程式非預期的輸入，當然程式輸出就是各種error或垃圾啦！程式的厲害之處及關鍵就是在於他的演算法，演算法你可以理解為“做事情的方法”，做事情、總是會有一套流程與一連串的動作，而在這樣的流程與動作中，我們可以分類一些路徑，在這裡我們稱之為「control flow」(控制流)
control flow 分為兩個：條件和迴圈
Python的註解方法 ㄧ開始，我應該要先介紹註解，哈 昨天就應該先寫的～
註解是一個程式撰寫上的說明，你可以使用它向下次要看你程式的人（或者也可能也是你自己）說明你這段要寫的內容、可能怎麼運用、或者提醒什麼注意事項。
1//這是單行註解用法 2&amp;#39;&amp;#39;&amp;#39; 3這是多行註解用法 4&amp;#39;&amp;#39;&amp;#39; Python的條件敘述 Python的條件敘述表示如下（此為虛擬碼-一個不是正式程式碼的表示法）
1if (boolean exp1): 2 #statementsA... 3elif (boolean exp2): 4 #statementsB... 5else: 6 #statementsC... 說明：
在Python 中，縮排是一件非常重要的事情，有點像是php的{} ，所以Python就是一種強迫你排版的程式語言（誤！
exp 是運算式，在if 和elif 用括弧把它包起來，而exp將會輸出true 或false ,就是現實中的對還是錯，如上面虛擬碼所示，如果exp1 是對的就會走statementsA;exp2是對的就會走statementsB;兩個都錯的話就走statementsC，對了 如果只有一個條件的話只要寫if&amp;hellip;else 就好，elif的區塊可以省略。還有，else 是代表前面的敘述式都沒有對的話，最後才走的流程。
關於條件敘述你可以參考這個維基資料 注意if、elif、else 後面要加上： Python 沒有switch&amp;hellip;case的敘述喔，相關資料以及要實現的可以參考此網址 Python的迴圈敘述 1# 1) 2for i in range(start,stop,step): 3 #statements 4# 2) 5while (exp): 6 #statements 說明:</description></item><item><title>Python 起手式：寫個Hello World吧！</title><link>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E5%AF%AB%E5%80%8Bhello-world%E5%90%A7%EF%BC%81/</link><pubDate>Tue, 02 Oct 2018 13:45:22 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E5%AF%AB%E5%80%8Bhello-world%E5%90%A7%EF%BC%81/</guid><description>安裝Python 工欲善其事，必先利其器！ 要學習寫Python，當然就是要先安裝Python啦！
首先，你要先安裝Python，這裡我就不贅述了，你首先要去[https://www.Python.org/] 找到可以downloads 這裏找到你目前用的作業系統適合的安裝檔，下載後執行它，按照畫面的提示一一去安裝～ 這樣就可以囉！
然後請打開你任何一種的command line，無論是windows 的命令提示字元還是mac os 的terminal 或者zsh (我個人是使用zsh 啦)，key 上
1python3 --version 接下來如果你看到有個Python 的字樣後面接版本號，那就表示：我們可以開始寫Python囉！
使用文字編輯器和Python的IDLE 你可以選擇vs-code、或是subl 甚至是記事本也可以，來撰寫你的Python程式。
我這裏通常用的都是vs-code, 而這裡，你也可以在command line 裡打上Python3，進入Python的Shell，有點像是下圖：
有點像是laravel 的artisan tinker 或者 php -a 或者ruby 的irb呢！Tips:如何離開這個IDLE呢？ 打上exit()就可以!
HelloWorld 程式 好了，我們可以開始寫Python程式了，請再任意一個目錄之下，創造一個名為helloworld.py的檔案（Python的執行副檔名基本上都是以py為結尾），然後放入
1print(&amp;#39;hello world&amp;#39;) 然後，回到你放helloworld.py的目錄之下，使用
1python3 helloworld.py 一下子，你就會看到這個hello world這個字樣了
當然爾，你也可以使用Python的Shell，那更為簡單，就是直接打下print(&amp;quot;helloworld&amp;quot;)就可以直接看到hello world啦！
寫個問答小遊戲 如果只是一個hello world 真的還不是很夠味，所以就來寫個簡單的小問答，程式之所以叫做程式就是有input，也有output，所以，我們來寫個可以輸入些東西，然後也會輸出點東西的小程式
1ans = input(&amp;#39;what is your favorite programming language? &amp;#39;) 2print(&amp;#39;your favorite programming language is &amp;#39;+ ans) 說明：
Input 是一個小函數，他可以接受從command line輸入的任何文字，ans 這個變數接下input所收到的輸入，最後用print 把它印出來，在Python中，文字串接就只要用'+&amp;lsquo;就可以了！ 執行結果如下圖</description></item><item><title>Python 第一天：廢話的前言</title><link>jimmycode.tw/posts/Python-%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%9A%E5%BB%A2%E8%A9%B1%E7%9A%84%E5%89%8D%E8%A8%80/</link><pubDate>Mon, 01 Oct 2018 12:59:36 +0000</pubDate><guid>jimmycode.tw/posts/Python-%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%9A%E5%BB%A2%E8%A9%B1%E7%9A%84%E5%89%8D%E8%A8%80/</guid><description>人生總會有第一次，人生第一次參加鐵人賽！不知道最後是否可以完賽哈哈
我是一個php方面的偏後端工程師，資歷大概也才短短的兩三年，在工作時偶爾也會碰到javascript、HTML和小小討厭的css，所以能夠和Python有個連結，真的是純屬意外！ 而目前很可惜在工作中也鮮少使用Python，關於Python的更深學習與體會都是日後自己在以前學生＆下班業餘時間自學以及拿來玩樂的語言。
雖然現在有這麼多對手出來，尤其是“Go”，但不知道為什麼我還是對Python情有獨鍾，甚至有時會想，到底可以將Python練到怎麼樣的程度可以去應徵Python相關職業呢？Python 可以涵括網頁、爬蟲、機器學習與大數據，幾乎能包的都可以包，或許是這樣，我選擇Python作為主題，當作一個正式學習的起點
當初遇到這個語言是因為，我那時候打了一個關鍵字「如何當駭客」，後來有文章指出當駭客有個前提就是要學會Python!於是就邊玩邊做、邊學邊玩的馬馬虎虎學習這份程式語言。結果駭客沒當成，倒作了一位網頁工程師？！就是主要寫php，但“偶爾”也會被要求要看一下mysql、弄弄html\css\js的“假全端”工程師
工作後，在空閒之餘，發現有些工作的需求實在沒有必要常常重複在做，於是將有些簡單的小動作程式化，自行開始一個小小side project：office ，這專案全部都適用Python撰寫，可能有些在現在還可以用、有些可能工作沒用到也隨之廢棄了，但這確實帶給我對於Python有著更深的認識與操作，也驚訝於它的強大
我是超新手，如果你是高高手的話而且也看到我文章的錯誤，請不用客氣，盡情地指出我的錯誤吧！ 希望未來在Python工作界，我們可以有機會相互切磋！</description></item></channel></rss>