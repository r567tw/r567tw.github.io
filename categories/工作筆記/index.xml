<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工作筆記 on Jimmy 's Code</title><link>https://jimmycode.tw/categories/%E5%B7%A5%E4%BD%9C%E7%AD%86%E8%A8%98/</link><description>Recent content in 工作筆記 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022-{year} Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sun, 27 Mar 2022 08:21:32 +0800</lastBuildDate><atom:link href="https://jimmycode.tw/categories/%E5%B7%A5%E4%BD%9C%E7%AD%86%E8%A8%98/index.xml" rel="self" type="application/rss+xml"/><item><title>原來可以這麼寫(16): sonarqube好好玩</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB16-sonarqube%E5%A5%BD%E5%A5%BD%E7%8E%A9/</link><pubDate>Sun, 27 Mar 2022 08:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB16-sonarqube%E5%A5%BD%E5%A5%BD%E7%8E%A9/</guid><description>最近在職涯上發生了一些事情，總覺得不太適合在這裡公開分享&amp;hellip; 就算了吧&amp;hellip;還是專注於現在的工作、找出自己持續成長的路線這樣
最近來玩一個名為SonarQube的東西 最近工作期間發現一個名為SonarQube的東西, 發現還蠻好玩的 想說可以放在工作中分享一下，投影片做得很簡單，意思意思就好
投影片 然後也快速用docker-compose快速架了起來
1#### sonarqube container #########2sonarqube:3image:sonarqube4ports:5- 9000:9000有夠給他簡單的拉, 不過我想後續的維運及導入日常才是關鍵吧！
GraphQL or 403 覺得經手專案兩年多&amp;hellip;不得不說自己最近感受到成長小小停滯，當然自己還是對專案有熱情、熱愛各種技術解決方案、最近學習WebSocket&amp;amp;GraphQL都頗有心得。for example, 想我最近就在社群上問了一個題目：``
然後有個神人大大回覆如以下：
於是就對GraphQL更深的認識拉，開心撒花～
從SonarQube上學到的東西 上面有點岔題討論關於Graphql的事情，現在把他拉回來。 我覺得Sonarqube真的對我很有幫助。當我最近把我手上的專案丟到Sonarqube分析，我以為會爆多技術債，但好像也才2x-3x天而已&amp;hellip;，而且他有code smell的部分，都讓我學習到不少東西，甚至是常常我會拿這些東西與我身旁同事分享討論的那種&amp;hellip;
同時更提醒自己如何加強自己寫code的習慣、知道如何寫出更好、更易讀的code
小君曰：最近覺得軟體開發應該要是一種「團隊合作」&amp;hellip;</description></item><item><title>原來可以這麼寫(15): 新增一個r567tw的repo</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB15-%E6%96%B0%E5%A2%9E%E4%B8%80%E5%80%8Br567tw%E7%9A%84repo/</link><pubDate>Mon, 29 Nov 2021 04:45:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB15-%E6%96%B0%E5%A2%9E%E4%B8%80%E5%80%8Br567tw%E7%9A%84repo/</guid><description>新增一個名為r567tw的repo 最近發現github 上面有個新玩法，可以在自己的github做出一個自己的介紹頁面，於是我便下去玩了一下。
原來只要建立一個和自己帳號名稱一樣的github repo就可以做到了，像我的就是這個樣子: 連結 另外也可以看一下別人的github profile 怎麼寫：awesome-github-profile-readme 年底了，覺得自己一事無成 好拉，這句話其實有點自損自己，或許是因為時間的關係，總覺得前陣子想要離職的情緒有點過去了。只是最近突然事情有點多、要溝通的事兒也很多，我想要告訴自己：專心寫code
其他的就什麼都不要想，專心工作吧！同時也因為是年底，也在盤整自己最近的學習路徑與狀況，趁著黑色星期五敗了LaraCast 終身方案 藉著這個機會，希望來好好繼續提升Laravel能力囉
DevOps Day Taipei 2021 一日遊 終於在疫情緩和的時候，11/24在台北文創參加DevOps Day Taipei 2021 謝謝公司的幫忙，讓我可以和另外一個同事一起參加。至於相關的筆記我目前記錄在這裡 我的心得其實蠻簡單的：DevOps的世界真的好大 以及對Dx的更深一層認識，其實這可以更擴大成開發者在開發過程的體驗。
我還蠻喜歡這篇文章：開發者體驗 DX,Developer eXperience 推薦給大家讀一讀。 然後當晚也敗了一下Hackmd的Prime方案 (因為Hackmd真的還蠻好用的,我決定之後拿來做一下筆記的資料庫)
參加 Kotlin 讀書會 因為我們Laravel的傳教士去JetBrain公司工作去推廣Kotlin 於是我決定來學習一下Kotlin，最近剛好舉辦第四梯次的新手讀書會，目前感覺還蠻好玩的，希望可以陸續參加到最後 💪，希望可以來學好Kotlin這門語言囉，來去當Android工程師
1fun main(){ 2 println(&amp;#34;Learning Kotlin!&amp;#34;) 3} 小君曰：出來混總是要學幾個新語言混混</description></item><item><title>原來可以這麼寫(13): 其實我會一點點Ruby</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB13-%E5%85%B6%E5%AF%A6%E6%88%91%E6%9C%83%E4%B8%80%E9%BB%9E%E9%BB%9Eruby/</link><pubDate>Sat, 29 May 2021 04:45:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB13-%E5%85%B6%E5%AF%A6%E6%88%91%E6%9C%83%E4%B8%80%E9%BB%9E%E9%BB%9Eruby/</guid><description>都在 SQL啦，哪次不SQL 最近工作主要的部分是幫忙營運單位做資料匯出相關需求，沒有同事在說我還以為去年我應徵的是「資料工程師」呢！
不過說真的，其實我很喜歡「資料庫」，喜歡SQL語言，所以其實我覺得做這些東西是在挑戰自己、很好玩&amp;hellip;. 更期望之後可以碰碰其他的SQL 像是PostgreSQL 啊、Oracle 之類的。
總之我覺得藉此經驗能挑戰自己寫SQL 也很不錯，雖然有夥伴說其實你就匯出Row data 給他們就好啊，叫他們自己拉Excel 做就好&amp;hellip;. 但我就是想要幫忙他們解決問題麻😅
真不知道如果要應徵DBA ，我這種粗粗淺淺的菜鳥經驗能不能試試？
沒梗了，來講Ruby 簡單交代一下最近工作狀況，也紀錄自己的歷程。本來這個系列就是要來記錄的啊～
每個月我們都有小組例會，每個月大概一個人會有這麼一回吧&amp;hellip;. 總之，我發現我有點沒梗了，所以來分享一下自己以前自學的語言：Ruby
然後沒有想到，AWS Lambda 竟然有支援Ruby , cool ! so fun !
雖然我有在這裏寫一篇文章Ruby 筆記，不過那都沒什麼排版，我也懶得改ＸＤ
以下就是我之後將在例會報告的ＰＰＴ啦
https://www.slideshare.net/ssusereb2ee2/ruby-248463972
小君曰：其實我會一點點的Ruby啦，不知道這樣能不能應徵Ruby Engineer ? 哈</description></item><item><title>原來可以這麼寫(12): 我❤️Golang</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB12-%E6%88%91%E2%9D%A4%EF%B8%8Fgolang/</link><pubDate>Sat, 24 Apr 2021 11:47:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB12-%E6%88%91%E2%9D%A4%EF%B8%8Fgolang/</guid><description>最近處理兩個大功能，一個是要建立websocket server 讓交易流程去串(開發官網購買)(但說真的交易流程用websocket 真的有點怪怪的？就我的認知 websocket 的部分應該是在一個很即時的情境，但用在這種只是為了獲得通知的目的確實有點怪怪的&amp;hellip; 但說真的我也沒有辦法提出更好更優的方案，作為一位只能聽命行事的超基層也只能照做QAQ)
另外是要做有關於批次匯入的功能&amp;hellip;. 呵呵以前就有做過類似Excel 匯入的功能，我深知道那是一個巨大無比的坑，坑是在一開始的規劃，你既然開放前面使用者可以用Excel 檔匯入，那你就得面對使用者的Excel檔可能有千起百怪的樣式、無法驗證或無法預期的輸入&amp;hellip;套句我之前有位主管說的話：你要防使用者想防賊一樣啊！
總之，這個功能其實去年有做一下下，但後來被靠北中止了&amp;hellip;.現在又復活，當然給他們凹一下，仔細把流程討論清楚先，然後再做&amp;hellip;. （其實正確的流程及我想表達的意思是：PM/SA 你們給我生出流程圖和規格書啊！）
然而，在這兩大功能夾擊下，我算是很平安的度過及學習、開發，並沒有像之前趣聽小說匯入被搞得人仰馬翻、混亂不已&amp;hellip;.在這個過程中，修修幾個bug、調整幾段程式碼&amp;hellip;. 其中一項是調整拆帳報表的功能
原本，我是用Laravel 匯出拆帳報表，並用上 Laravel-excel 這個套件，殊不知測試環境都弄好好的，但到了正式就完蛋（匯不出來）
因此，我發現當前端送 request 直接製作檔案的這個版本實在有點&amp;hellip;.糟糕。
後來規劃出了第二套版本：就是當前端送出request 後丟到queue後再慢慢做&amp;hellip; 也是一樣用到剛剛說的那個套件，那個套件可以很輕易的用queue的方式製作excel 檔。
測試環境一樣好好的，但正式環境還是爆掉&amp;hellip;. 後來發現只要調大我們機器的CPU 就可以匯出了&amp;hellip;.，不然就是我真的功力不精無法好好使用這個套件囧！
但是！每次調大機器CPU 實在不是什麼好方法&amp;hellip;. 而同事告訴我：不應該堅持用laravel/php處理這種CPU bound的事項&amp;hellip;. 於是&amp;hellip;.我採用的AWS Lambda 方案，而Lambda 用Go 開發&amp;hellip;.
結果是：原本用Laravel Queue要跑兩三十分鐘的報表居然奇蹟的在5~15秒內搞定。
然後再寫的過程當中也越來越喜歡Go這門語言。不過我知道我要學習的還太多，這在我使用Go上面只是剛開始而已。
謝謝後端團隊的大家讓我可以任性的使用看看這門語言，並且在我有問題的時候願意幫助我＾＾
於是乎，這個月的技術分享會就分享我使用Golang的心得了&amp;hellip;&amp;hellip;
https://www.slideshare.net/ssusereb2ee2/golang-246642054
額外加碼： 最近docker 使用上常常有那個build 失敗的image 和container bla bla 的，最近看到一個很好用的清除指令紀錄一下：
1docker system prune 小君曰：想要轉職成Golang 工程師。。。</description></item><item><title>原來可以這麼寫(11): 每個人的心中都要有DevOps</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB11-%E6%AF%8F%E5%80%8B%E4%BA%BA%E7%9A%84%E5%BF%83%E4%B8%AD%E9%83%BD%E8%A6%81%E6%9C%89devops/</link><pubDate>Sat, 20 Mar 2021 04:29:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB11-%E6%AF%8F%E5%80%8B%E4%BA%BA%E7%9A%84%E5%BF%83%E4%B8%AD%E9%83%BD%E8%A6%81%E6%9C%89devops/</guid><description>最近工作比較沒有什麼新鮮事，所以開始在將手上專案有比較完整的文件化之後，開始逐步導入TDD ,寫一些Unit Test 以確保程式碼的品質。
但老實說：我還是不是太懂Laravel Feature 和 Unit 這兩個資料夾的區別？我知道Unit 是要做單元測試，是測試那個類別的行為，但我目前大多都在寫Feature Test&amp;hellip; 如果有大大知道Unit 該在何時寫、什麼情境下要寫，歡迎不吝賜教！
研究Socket/API Gateway 因為要導入官網購物車購買，討論一連串的流程與討論，最後希望我Laravel 要開一個socket server，但研究的結果其實發現 因為我們專案的版本比較低，所以沒辦法使用Laravel-Websocket 套件，也就是在Laravel 裡面自己開socket server 那種，變成我們要另外用Node 的套件去建立&amp;hellip; 然後&amp;hellip; 又衍伸第二種方案，在AWS Api-gateway 架起websocket api ，然後他可以指定動作去call API&amp;hellip;
這個方案很好玩&amp;hellip; 不過在研究初期卡關在怎麼用Laravel 取出 connectid , 因為AWS example 是用Node 的Lambda 去串的，很簡單就取出connectid&amp;hellip; 。我Laravel 怎麼print request 的body 還是 header ，顯然就是找不太到那個connectid &amp;hellip;
後來實在有點卡太久了(大概一天)，被同事叫我去寫AWS Support XD
人生第一次寫AWS Support 耶，然後AWS 團隊真的很用心很貼心，告訴我很詳細的步驟及方法、解決方案，原來，如果要讓Laravel 的 後端讀得到 connectid ，是要透過CLI 去設定啊&amp;hellip; (目前API gateway 控制台還沒有支援這個)，不然就是需要把integration type 改成 HTTP ，去寫 request template 這樣。</description></item><item><title>原來可以這麼寫(10)：同步與非同步</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB10%EF%BC%9A%E5%90%8C%E6%AD%A5%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5/</link><pubDate>Sat, 30 Jan 2021 14:39:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB10%EF%BC%9A%E5%90%8C%E6%AD%A5%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5/</guid><description>來到第十篇原來這麼寫啦，看來這個系列真的常駐我這個部落格真的很久呢！
要冷靜啊！ 然後這次真的是史上我接過任務最難的一波，有一天還差點情緒崩潰在工作現場爆哭&amp;hellip; 真的覺得自己很丟臉很誇張&amp;hellip;&amp;hellip;
不過事後想想，那是因為我自己對自己的要求也實在太高了，也一直過度自責、苛責自己的規劃上有很大的問題&amp;hellip;.. 真的很辛苦各位我的同事。總之，這次的經驗告訴我：要努力試著讓情緒歸情緒、工作歸工作。哭完，問題還是在那裡，我們一定要努力地解決問題。工程師的存在正是為此啊。 我自己最喜歡得形容詞就是忠心！忠心於工作、忠心於自己的技術能力、也忠心於自己的信仰。我想藉著上面的事件也再度應證與難怪自己為什麼會有那種過度反應了吧 結論是：calm down ! 挽起袖子來解決問題
小說的匯入任務 這個任務為什麼對我來說蠻困難的，我覺得技術問題是一回事，其次我自己也檢討是不是太晚將問題丟出來了？我的個性常常是獨立做事，說真的還蠻就事論事得、原生工程師性格。而我通常認為我自己不是那個第一個遇到同樣問題的人，所以總是自己想辦法處理、想辦法解決&amp;hellip;. 像是Laravel 的開發與專案、API維護上，我其實就非常游刃有餘、自由自在。(當然溝通上面的gap 與問題是需要慢慢的與團隊磨合與自己努力調整的)，DevOps 的精神就是逐步改善麻！
但我卻忽略有時候其實是有時間上的問題，在過年前要匯入這麼多的小說，一共12000多章節，剛好我台東人在過年期間卻要請長長的年假，我才驚訝發現：我hold 不住了。看來，下次也要注意時間，好讓PM與SA 能夠發覺與注意到我的狀況，能hold 住專案。
自動匯入方案的產生 不過還好啦，謝謝同事、夥伴們的體諒與幫助。在禮拜五怒給他加班到十一點的時候把這個自動化方案寫出來(但當然啦，這個我覺得也需要事先給PM測試，所以同時我也預備自己的手動匯入程式方案&amp;hellip;但等等分享我遇到的問題與啟發)
手動匯入的些許失敗經驗與啟發 但說真的，小說匯入其實這次第二波了。上一次真的我自己沒有準備好&amp;hellip; 可是這次我吸取第一次的失敗經驗，重新調整流程、設計。於是這次在匯入資料上面就非常的順利，還記得第一次營運單位有兩天的時間都無法到後台修改資料&amp;hellip;但這次一個下午就搞定了。
事實上，我只是把匯入分成兩個階段進行，第一階段是把資料放進去資料庫(就是這個步驟才會不建議營運單位修改資料，以免我們的id 亂跳&amp;hellip;)，而第二階段是去別人小說的網站把音擋下載下來上傳到我們server上的指定位置，驅動我們同事寫好的自建音檔模組。於是完成了這整個匯入流程。
而第二階段的處理原本我用Python 寫 request.get(url) 這樣去下載，寫檔案後上傳的“同步方案”，一支處理就要10秒多&amp;hellip;. 然後12000多就&amp;hellip; 超級慢的啦！
中間還遇到工作電腦爆掉的問題&amp;hellip; 真的是很衰&amp;hellip; 第一次遇到&amp;hellip;. 但所幸謝謝我們家的MIS幫我工作電腦換好一個power 這樣，於是只有一點點時間是不知道怎麼辦而已。
隔天早上，發現我那支居然跑到一半不跑了&amp;hellip; 還好我之前在設計上有納入可中斷性，就算中斷了重新執行也可以從還沒處理的部分繼續接著處理&amp;hellip; 但就像剛剛說的一個一個上傳真的很慢啊&amp;hellip;. 於是開始研究 Python 的 非同步方案版本&amp;hellip;
1import aiohttp 2import aiofiles 3import asyncio 4import time 5import os 6 7 8#定義協程(coroutine) 9async def main(links): 10 11 async with aiohttp.ClientSession() as session: 12 tasks = [ 13 asyncio.</description></item><item><title>原來可以這麼寫(9):結果我變成Python 工程師？</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB9%E7%B5%90%E6%9E%9C%E6%88%91%E8%AE%8A%E6%88%90Python-%E5%B7%A5%E7%A8%8B%E5%B8%AB%EF%BC%9F/</link><pubDate>Mon, 18 Jan 2021 13:06:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB9%E7%B5%90%E6%9E%9C%E6%88%91%E8%AE%8A%E6%88%90Python-%E5%B7%A5%E7%A8%8B%E5%B8%AB%EF%BC%9F/</guid><description>祝大家新年快樂。原來可以這麼寫這個系列終於來到第九篇！
說聲好消息，最近工作獲得肯定(撒花～)。只是不知道年終到底有多少&amp;hellip;搞不好&amp;hellip;其實很少&amp;hellip;. 這個就題外話啦，在這個公開網路場合還是不宜多說XD
從資料庫匯出資料 最近接到一個需求，是要從資料庫匯出資料。其實這個東西並不是很難，寫寫SQL 語法就能搞定&amp;hellip;但因為安全的因素我們的資料庫通常要透過SSH 跳板才能進去。可是他們匯出資料的需求是要by 一個顧客（客戶），你媽咧我難道一個一個SQL 撈出來然後再丟進Excel 嗎？
不！這絕對不是工程師的思維&amp;hellip; 後來想想我在我第一份工作的時候開啟了一個side project : office: https://github.com/r567tw/office
那時候為什麼我要開啟這個專案呢？原因是，我當時負責重構一個網站系統，是用Laravel 重構原本native php 改寫的報名網站&amp;hellip;. (這大概可以說是我工程師生涯其中一個直得常常拿出來說嘴的一個成就&amp;hellip;但當然啦我之後在想覺得那時候我初出茅廬才維護一年多就改寫實在有點冒險&amp;hellip;只怪我當時太年輕太衝動太不懂事了&amp;hellip;. 裡面還是有一些遺珠之憾等級的小後悔～)
啊話說開了，總之那時候有要驗證台灣的身分證字號，還有生成台灣的身分證字號&amp;hellip;這當然網路上可以有工具可以用啦，但你不覺得開瀏覽器-&amp;gt;搜尋-&amp;gt; 點進網址 -&amp;gt; 可能還有點一些按鈕bla 的才能搞定自己的需求很麻煩嗎？
於是你看到office 裡面就有一個資料夾應運而生：id_card_number 隨著時間推移，裡面的工具也越來越多XD
這次我就用到使用ssh 連接到database 來幫我完成需求的工具：connectDBthoughSSH
1import pymysql 2import sshtunnel 3import dotenv 4import os 5 6dotenv.load_dotenv() 7 8server = sshtunnel.SSHTunnelForwarder( 9 ssh_address_or_host=(os.getenv(&amp;#39;SSH_HOST&amp;#39;), 22), # 指定ssh登入的跳轉機的address 10 ssh_username=os.getenv(&amp;#39;SSH_USER&amp;#39;), # 跳轉機的使用者 11 ssh_pkey=os.getenv(&amp;#39;SSH_PEM_PATH&amp;#39;), # 跳轉機的密碼 12 remote_bind_address=(os.getenv(&amp;#39;DB_HOST&amp;#39;), 3306) 13) 14 15server.start() 16 17db = pymysql.connect( 18 host=&amp;#39;127.</description></item><item><title>原來可以這麼寫(8): SAM 真的好好玩～</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB8-sam-%E7%9C%9F%E7%9A%84%E5%A5%BD%E5%A5%BD%E7%8E%A9%EF%BD%9E/</link><pubDate>Sun, 18 Oct 2020 13:57:59 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB8-sam-%E7%9C%9F%E7%9A%84%E5%A5%BD%E5%A5%BD%E7%8E%A9%EF%BD%9E/</guid><description>這篇文章有點廢，沒什麼技術點&amp;hellip; 純粹是拿部落格當筆記的概念。
玩 AWS SAM 最近在玩AWS SAM CLI 部署 lambda ，真的好好玩喔，最近拿來部署好關於一些資料庫、SQS、KMS 等等的東西&amp;hellip; 以下是我花了一點時間研究好怎麼寫template.yaml &amp;hellip; 都要變成yaml 工程師拉！
更多的Mysql 研究 另外因為某個原因，讓我最近一直在研究database lock 的問題&amp;hellip; 原來，加一個[for update]就可以達成了，真的好好玩～
1selectpointsfromcustomersforupdate資料來源：https://oldmo860617.medium.com/transaction-%E4%BD%B5%E7%99%BC%E9%8C%AF%E8%AA%A4%E8%88%87%E9%9A%94%E9%9B%A2%E5%B1%A4%E7%B4%9A-51b8af6178ae
https://blog.xuite.net/vexed/tech/22289223-%E7%94%A8+SELECT+&amp;hellip;+FOR+UPDATE+%E9%81%BF%E5%85%8D+Race+condition 徹底解決Composer 記憶體不夠的問題 再裝某些Composer package 時常常遇到記憶體不足的問題，後來查到一個超棒的指令
1COMPOSER_MEMORY_LIMIT=-1 composer update 資料來源：https://medium.com/@kycd.dark/%E5%9F%B7%E8%A1%8C-composer-update-%E6%99%82%E9%81%87%E5%88%B0-composer-memory-limit-aee4f2df56ee
小君曰：「真廢」</description></item><item><title>原來可以這麼寫(7): 資料庫筆記第一彈</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB7-%E8%B3%87%E6%96%99%E5%BA%AB%E7%AD%86%E8%A8%98%E7%AC%AC%E4%B8%80%E5%BD%88/</link><pubDate>Tue, 06 Oct 2020 11:39:45 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB7-%E8%B3%87%E6%96%99%E5%BA%AB%E7%AD%86%E8%A8%98%E7%AC%AC%E4%B8%80%E5%BD%88/</guid><description>在工作上被賦予資料庫Schema的設計責任
像是因應贈課功能、訂閱功能、關鍵字功能等等。也因此發現資料庫的學問真的博大精深
看來我還需要多多的磨練。
1. unsigned &amp;amp; zerofill 在資料庫常常看到unsigned這個字，最近想一想覺得要好好研究他，查了一下資料，就我個人的理解是：
unsigned: 將數字「無符號化」，意表這個欄位就是0 和正整數
zerofill: 在查資料也發現zerofill , 原來它是資料庫中，拿來前面補零的語法與功能。
文章來源：https://twgreatdaily.com/RbGjcW4BMH2_cNUgvI0q.html
2. 資料庫怎麼設計 在查資料發現一個很棒的github repo , 告訴我們怎麼設計schema 或怎麼最佳化實踐，目前有空會再看看，好好消化一下。分享一下：https://github.com/alextanhongpin/database-design</description></item><item><title>原來可以這麼寫(6): 換了一個佈景主題</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB6-%E6%8F%9B%E4%BA%86%E4%B8%80%E5%80%8B%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C/</link><pubDate>Sat, 22 Aug 2020 08:56:10 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB6-%E6%8F%9B%E4%BA%86%E4%B8%80%E5%80%8B%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C/</guid><description>我換了一個佈景主題，你知道的，後端工程師美感幾乎都不怎麼樣。我覺得我開發的佈景主題好像還是不是很好用、很美&amp;hellip; 所以找了一個新的佈景主題，好看多了&amp;hellip;&amp;hellip;
參加 AWS 工作坊 最近有機會上課，課程名稱是：PHP 開發者工作坊 -深入淺出 AWS 無伺服器 LAMP 架構(https://awsphpday.splashthat.com/)，引用了外國人寫的一系列文章：https://aws.amazon.com/tw/blogs/compute/introducing-the-new-serverless-lamp-stack/
從這一系列文章，這個人定義出新的LAMP定義： L- Lambda , A- API gateway , M-Mysql , Ｐ-PHP。並且介紹如何實作以及實現。
之後滿心期待報名，甚至還報名了三次，兩次用私人信箱、一次用公司信箱。AWS真的有夠現實的，只有公司信箱報名的那個有成功XD 另外也發現原來我們公司的公假這麼好請XD 只要主管有同意就好 哈哈
有機會認識到Pahud 大大，他真的是一個很熱情的人，在會後請教他問題都很熱情地回答哈哈，同時也深入到Bref 這個套件、以及 Pahud 大大開發的套件可以如何方便的部署serverless laravel 在 AWS 上，我真的很期待這門課程也很開心得到很多不錯的收穫，同時也認識到AWS CDK，目前也正以緩慢的速度慢慢理解學習他（畢竟我又不是DevOps 哈哈）&amp;hellip;&amp;hellip;
啊主要這門課程他就是在介紹他開發的這個套件：https://github.com/aws-samples/cdk-serverless-lamp
這個套件主要是依據AWS CDK為基底，做出符合serverless laravel 的contruct lib ，可以很方便的讓開發者使用開箱
AWS SAM CLI ＆ Lambda 同時我的第一個 Lambda 專案終於開發到一個階段了，甚至也經過前輩的Code Review 完！真的很期待他上架的時候，除了是我第一個Nodejs 架上專案也是第一個 Lambda 專案，而且很認真的畫流程圖、一步一步開發規劃。就是可惜目前開發順序＆上架就是有點混亂、這也是讓我有點不爽的地方，一直被「中間插件」&amp;hellip; 然後等到上架可能又有更多東西要調&amp;hellip;那開發者到底為什麼當初要規劃那麼多？幫使用者想那麼多？（不過軟體工程不就是需求常常會改來改去嗎？ 真的很好奇更標準更專業的IT他們怎麼處理這一塊？）
同時，這個專案也要慢慢學習與習慣用SAM CLI ，之前我們公司的Lambda 管理與開發比較亂、現在有了SAM之後會比較好整理及有次序，能夠成為公司內導入這部分的其中一份子真的蠻令人興奮的！也希望我的 第一個 Lambda 專案可以趕快上去！ 這樣我就又有一個成績可以炫耀（誤
小君曰：最近都在搞AWS呢</description></item><item><title>原來可以這麼寫(5): 原來MySQL 博大精深</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB5-%E5%8E%9F%E4%BE%86mysql-%E5%8D%9A%E5%A4%A7%E7%B2%BE%E6%B7%B1/</link><pubDate>Sun, 26 Jul 2020 06:34:37 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB5-%E5%8E%9F%E4%BE%86mysql-%E5%8D%9A%E5%A4%A7%E7%B2%BE%E6%B7%B1/</guid><description>最近工作接下交易與金流的部分，開始將自己最近火燙燙學習的 Nodejs 來拿去試試水溫。不過，被callback 弄的昏頭轉向的&amp;hellip;. 所幸，最後藉著文件與冷靜，慢慢的下斷點、看結果，參考之前前人寫的code , 才慢慢走出來，甚至處理到進度似乎發展還不錯。
MySQL 的 insert 新寫法 因為專案需求，我雖然接下這個舊專案，但是要開發新功能，於是，我覺得可以趁此改善專案架構與程式碼品質，原本程式碼的SQL 是用那種字串方式連結的，但我知道這樣會有SQL injection 的問題，所以在新功能＆參考舊程式碼的過程當中，也慢慢的將字串方式改成可以防止SQL injection 的方式。同時也意外發現Mysql insert 有新的寫法：
1INSERTINTOtableSETa=1,b=2,c=3比起原本冗長INSERT INTO table (a, b, c) VALUES (1,2,3), 我覺得這種set 的方法真的很不錯，這樣在對照上及程式碼易讀性也更勝一籌，所以覺得可以評估是否要引入的可能性&amp;hellip;..
參考資料：https://stackoverflow.com/questions/861722/mysql-insert-into-table-values-vs-insert-into-table-set
參加LaravelConf 2020 其實本週還真的沒啥事情，除了就是討論、開發、維護、就是這些不斷的循環&amp;hellip;. 工程師的人生就是這麼平凡無奇，但週末參加了 LaravelConf 2020 , 這次我買的是線上回放票，整體下來感覺很不錯，聽Ant 大大的對PHP＆Laravel 之未來的一席話，真的有所感受與領悟啊！然後我覺得比起之前參與過的2017、2019，我發現我又更加聽懂了很多內容，覺得感受到自己的成長真的蠻棒的，不過整體的心得文與筆記我想之後會再好好整理起來。現在還有安可場，可以再去買票去聽啊
小君曰：工程師的生活就是這麼平凡無奇，且有趣</description></item><item><title>原來可以這麼寫(4) : 終於接新專案</title><link>https://jimmycode.tw/posts/%E7%B5%82%E6%96%BC%E6%8E%A5%E6%96%B0%E5%B0%88%E6%A1%88/</link><pubDate>Sat, 18 Jul 2020 16:06:34 +0000</pubDate><guid>https://jimmycode.tw/posts/%E7%B5%82%E6%96%BC%E6%8E%A5%E6%96%B0%E5%B0%88%E6%A1%88/</guid><description>近況 最近工作終於接到新的任務，雖然還是在同一個專案&amp;hellip;..
事情是這樣的，我們那個專案的後台分成兩個部分的人負責，一個是後台、另外一個則是交易&amp;hellip;..而我進來公司後，一直都是處理後台，對於交易都是一知半解，只知道要打Lambda 而已。而這次，在專案時程終於沒這麼趕的情況下，以統一後端接口(俗語說：天下大勢，合久必分、分久必合)，我被授命要接下這交易功能的後續維護＆開發新功能&amp;hellip;. 這對我是一種挑戰，因為我終於可以有段時間不用繼續和PHP掛勾拉XD (交易lambda 是使用NodeJS)
況且，最近也剛學習了一點 NodeJS, 前陣子上完六角學院的 NodeJS 課程，很期待可以將自己新學習到語言運用到實務專案，不過之後還是要多多進修將nodeJS 補齊基礎拉，而且這個又是金流與交易，其實我自己說實在有點抖抖的＆很興奮能接到此挑戰！
總之，為自己加油拉！而且其實也沒用到太高的技巧,那些 nodejs 其實還算好懂的
Mysql: COALESCE 因為在 trace 與理解交易商業邏輯的 code 當中，我看到我們用到COALESCE 在SQL語法中&amp;hellip;原來，他是一個好方便的參數啊，可以回傳在列表裡的第一個非null的值。
例如
1SELECTCOALESCE(NULL,NULL,NULL,&amp;#39;W3Schools.com&amp;#39;,NULL,&amp;#39;Example.com&amp;#39;);這行sql 語法就會回傳W3Schools.com
相關可以參考的資料：https://www.w3schools.com/sql/func_mysql_coalesce.asp
沒用過還真的不知道可以這樣用啊！
強化與習得Docker技能 在今年初，看到Hahow 上面有個關於Docker 的新課程，在最近終於把那門課程上完了，雖然，自己本身工作就已經在使用Docker了，而且為了讓自己可以弄個舒服的開發環境，以符合自己早期的開發習慣，還自己簡單刻了 docker-compose.yml , 好讓自己資料庫可以用自己本機。（我們專案資料庫是用AWS RDS），所以早在上課之前對Docker 就有略知一二。不過，經過有系統的整理後確實能對Docker有更多的理解。像是中間會多了一個虛擬Linux container層,而每一個命令都是新的Container層而互不干擾，他的教學其實還蠻淺顯易懂的，我這裡可以推薦一下：Docker 部署入門完全指南-圖片速學攻略(https://hahow.in/courses/5df27f1fa5ee510022a08500/main) 不過之後還是會想研究一下，會有點想要像我們公司專案一樣，把 Laravel 部署到 Fargate 的部分&amp;hellip;&amp;hellip;
小君曰：接到新專案囉，雖然還是在一刻(我們公司產品簡稱) XD</description></item><item><title>原來可以這麼寫(3) : 關於我的工作流程</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB3-%E9%97%9C%E6%96%BC%E6%88%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><pubDate>Sun, 12 Jul 2020 08:42:58 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB3-%E9%97%9C%E6%96%BC%E6%88%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid><description>來開始交代一周一次的功課了XD
希望技術部落格可以一周一篇文章, 提升更多的技術含量
記錄自己一天比一天更佳進步的軌跡
關於trello trello 是很多Team會用到的一個工具,可以用來管理專案與任務安排
它真的是一個真的很方便以及很有幫助的工具
我的前一份工作和現在這一份都有用到這個trello
一開始進入公司的時候 我發現到他們trello 有 進行中, Todo , 完成後請檢察等等的分類, 然後用tag作專案上的分類, 用了一陣子之後發現他們這樣的管理方式真的很不錯
所以就應用在我的side project 管理上
不過我個人也對這樣的部分做了一個調整: 加入了一個研究中的list
畢竟做為小小工程師而言, 作side project 的目標除了是興趣與證明自己的實力以外
也是還要將一些新的東西應用與練習的麻~ 好幫助自己真的可以越來越進步
於是就來分享看看我這個trello 的 template 喔: https://trello.com/b/PFi72D78/r567tws-template
歡迎用我的template去管理你們的專案～
如果有甚麼改進的建議或管理好方法歡迎來告訴我喔
Composer scripts 本周也學到composer 可以在composer.json 裡面寫一些指令, 可以在安裝後,更新後或者安裝前,更新前可以寫command 執行
至於這裡就有豐富關於此的內容，這裡我就不贅述：https://docs.phpcomposer.com/articles/scripts.html
我看到這個的想法是: 哇以後那些php的初始專案就可以不用這麼麻煩了耶, 只要下載後, composer install 或 composer update , 就可以使用了&amp;hellip;&amp;hellip;
我是一個很懶的工程師,也很不喜歡背來背去那些指令, 況且每次都要google 一下把指令們copy &amp;amp; paste , 真的很麻煩
有了這個東西,方便多了, 不用跑 cp .env.example .env 和php artisan key:generage
不過也發覺, 原來我還不懂composer XDDDD</description></item><item><title>原來可以這麼寫(2):好久沒寫文章了</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB2%E5%A5%BD%E4%B9%85%E6%B2%92%E5%AF%AB%E6%96%87%E7%AB%A0%E4%BA%86/</link><pubDate>Sat, 04 Jul 2020 13:40:51 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB2%E5%A5%BD%E4%B9%85%E6%B2%92%E5%AF%AB%E6%96%87%E7%AB%A0%E4%BA%86/</guid><description>哈哈, 原本想說可以一個禮拜寫一篇技術文章的
但就是「懶」，所以到現在才出所謂的第二篇&amp;hellip;.
距離通過工作試用期也已經超過一個月了，我覺得工作上還算是得心應手，進度都在掌握中，也很喜歡目前的工作狀態，只是&amp;hellip;.我好想接新專案啊&amp;hellip;..
在家工作心得 之前，因為疫情關係，我們公司試行了在家工作。老實說，這是我人生第一次在家工作。第一次的時候，還沒有待滿一個月&amp;hellip;第一次，好慌、好亂&amp;hellip;.完全不知道在做什麼
但是，等我慢慢熟悉專案與產品、進度也漸漸掌握起來了，第二次試行、第三次試行，搞清楚自己目前的戰鬥位置、狀況，**突然覺得，在家工作好棒啊，甚至有點享受、開心！**只要我進度在掌握中就好拉，也確實，我也漸漸掌握好專案的進度ＸＤ
可惜，台灣疫情控制實在太好了，之前公司試行在家工作的制度就這樣無疾而終。
我好想要繼續在家上班啊&amp;hellip;
結論：在家上班的前置工作與預備真的要做好
Ｍysql function/trigger 在做搜尋API這個功能時，因為原有資料庫欄位的設計限制與需要，欄位存了HTML標籤，但這反而造成我們在搜尋類似‘p’這種關鍵字時，會變成所有的資料都被回傳，形同沒有搜尋&amp;hellip;. 那時還算菜&amp;hellip; 同事後來找到一個解法，就是新增新的欄位，利用Mysql function 的功能，再加上trigger , 可以在每次資料庫有異動時，新的欄位可以放入沒有html標籤的原資料，從而在API開發上,搜尋這個新的欄位，就可以克服這個問題
我以為只有oracle 資料庫有這種trigger 功能，因為我以前有在學校上課有修過這個oracle資料庫的課，所以對這個略知一二，但沒想到Mysql 也有這樣的功能，於是花了一點時間重新複習，把以前上課的回憶都找回來了啊&amp;hellip; 而網路上,也有幫忙去除html 標籤的現成function, 配合trigger 的onupdate &amp;amp; oninsert , 再配合sql 語法將現在線上資料的html標籤去除, 真的是一個不錯的方案&amp;hellip;.不過如果你知道有更好的方式解決，歡迎告訴我＆交流～
windows docker 問題 因為公司產品有使用到docker, 另外我在公司配備的是 windows電腦 （好想要被配備mac啊～～），於是在某次午休回來時，發現為什麼我的API 會出現問題？明明token , 程式都沒什麼問題啊&amp;hellip; 後來我發現好像原來是docker 在windows休眠之後醒來後, docker內部container的時間會和外部window 不是一樣的，因為我的專案有調用到aws的api , 在時間不sync的情況下當然api就出錯了&amp;hellip;. 我記得有搜尋到某篇文章說怎麼解決那個問題,好像到window設定什麼東西的&amp;hellip;. 總之,那是之前遇到的,我也不知道我那時的紀錄丟到哪了,現在我寫文章的時候一直找不到ＸＤ 但我說一下我的解法：因為文章裡面交代得實在太麻煩了,於是我決定：重開docker 大法哈哈哈
Laravel env 問題 我在開發時候,有時候調用一些env的資料, 後來發現, 為什麼都調用不到&amp;hellip; 經查詢後發現，原來是因為執行了php artisan config:cache的指令關係&amp;hellip;. 詳細可以看看這篇文章：https://learnku.com/laravel/t/3362/laravel-use-env-to-read-the-environment-variable-null
結論：媽的，坑&amp;hellip;.好拉, 對不起，我沒好好認真看文件所以犯蠢&amp;hellip;.
Laravel 的queue 和玩玩 graphQL 剛好專案有用到, laravel 的queue 功能, 我預計之後為這個寫一篇專屬文章筆記一下這個, 以後面試可以大膽說用到queue了哈哈</description></item><item><title>原來可以這麼寫(1):新工作第一週</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB1%E6%96%B0%E5%B7%A5%E4%BD%9C%E7%AC%AC%E4%B8%80%E9%80%B1/</link><pubDate>Sun, 08 Mar 2020 04:53:23 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB1%E6%96%B0%E5%B7%A5%E4%BD%9C%E7%AC%AC%E4%B8%80%E9%80%B1/</guid><description>去年的12月，我從上一間公司離職。其實，一月是打算好好去玩～ 突然覺得自己韓國去得真是很好的時候，不然可能回來就要自行隔離幾天了ＸＤ 想知道韓國旅遊心得的可以到我的樂在信仰中喔：https://r567tw.tw/2020韓國之旅/
然後二月就是各種找工作、思考要做那些工作&amp;hellip;..然後各種的無聲卡、拒絕、邀請進去&amp;hellip;。
有一家做博弈的接案公司最誇張，其實我本來就沒打算做博弈了，去面試也只是想說「以戰養戰」的態度、寫寫題目，看看有沒有需要再精進的&amp;hellip;（是說這間在話術上也很厲害，在頁面其實沒有看到博弈，他們也說他們不標榜自己是博弈，只是接案剛好有大部分都是接博弈的&amp;hellip;&amp;hellip;），然後我就隨意地寫寫，甚至幾題我是空白沒寫，想說記起來回家研究怎麼寫會更好&amp;hellip;結果超好笑的是下禮拜居然還發給我錄取通知&amp;hellip;.（到底有多缺人Xd）
還有一間是說我們「氣不合」，這個理由真的很靠杯，雖然我也知道面試這種事其實與技術能力沒有太大關聯，技術能力只是代表你能帶多少籌碼，最重要的還是面試官喜不喜歡你麻～ 但直接用「談論起來氣不合」這種直白的理由真的會覺得很不尊重面試者，這間公司的名稱就不公佈了，想知道可以私訊～
總之三月之後正式工作，進入了一間大型傳統機構，薪水上蠻滿意的。不過我想先等三個月培訓期度過了在公開自己在哪裡好了，不然培訓期沒過真的會很好笑很尷尬ＸＤ
不過我覺得是時候應該要好好記錄工作上的筆記與東西了，畢竟有紀錄有籌碼，這樣下次在跳、再找也更有話可以嘴，同時也是一種回顧自己進步的軌跡的概念～
有一句話我很喜歡：「Don&amp;rsquo;t Prove; Improve」（連結 ）
話不多說，這個系列的文章就叫做「原來可以這麼寫」，紀錄我看前輩、同事的code的筆記、以及一些工作上學到的新概念、新技術～然後後面的標題可以自行發揮創意，像這週就比較沒創意：新工作第一週！
原來可以直接創造一個class&amp;hellip; 1trait TraitA { 2 public function HelloWorld(){ 3 echo&amp;#39;Hello World&amp;#39;; 4 } 5} 6trait TraitB { 7 public function HELLOTWO(){ 8 echo&amp;#39;hELLO tWO &amp;#39;; 9 } 10} 11$helper = new class { 12 useTraitA,TraitB; 13}; 14$helper-&amp;gt;HelloWorld(); &amp;lt;=&amp;gt; 運算子 這個很少遇到，沒寫道真的不會記得～
他會比較兩邊的值，然後會回傳0,1,-1
至於規則可以參考：https://www.php.net/manual/zh/language.operators.comparison.php
filter_var https://blog.xuite.net/coke750101/networkprogramming/57002113-PHP+filter_var%28%29+%E5%87%BD%E6%95%B8Filter+%E5%87%BD%E6%95%B8
AWS ECR: 類似aws方提供的docker hub KMS: 加解密服務 Lambda : 微服務的部分 匿名函數 https://www.</description></item></channel></rss>