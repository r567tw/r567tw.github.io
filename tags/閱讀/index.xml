<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>閱讀 on Jimmy 's Code</title><link>https://jimmycode.tw/tags/%E9%96%B1%E8%AE%80/</link><description>Recent content in 閱讀 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022 Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sat, 30 Apr 2022 14:21:32 +0800</lastBuildDate><atom:link href="https://jimmycode.tw/tags/%E9%96%B1%E8%AE%80/index.xml" rel="self" type="application/rss+xml"/><item><title>Pragmatic Programmer：需求坑</title><link>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note2/</link><pubDate>Sat, 30 Apr 2022 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note2/</guid><description>Pragmatic Programmer 他談很多題目，裏面也談到很多如何寫程式的廣泛技巧，例如第一篇我們談到的正交性, 以及知識資產的部分。未來可能我也會陸陸續續分享他各種不同的篇幅與個人領悟。
這次我想要分享他其中一個篇章：需求坑。
做軟體工程師越久，就越覺得這個小篇章所講的有感。我們常常把客戶的“第一次需求”當真，並且就一頭埋入實作它的解決方案。
這種最初的需求並不是真正的需求。客戶可能本身沒有意識到這一點，但其實這種需求是一種邀我們去進一步探索的邀請 如同這本書定義需求是一種過程，是藉由一次又一次的回饋當中循環暸解的。
另外有感而發的是：之前網路上看到某粉專寫道的一句話
有時候我們在實作處理需求時，或許不要總是陷入一定要寫很多程式碼。有的時候不用寫程式的解決方案可能比寫一堆程式碼會是更佳優秀、適合的解喔
小君曰：less code, more better</description></item><item><title>Pragmatic Programmer：知識資產</title><link>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note1/</link><pubDate>Sat, 16 Apr 2022 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note1/</guid><description>Pragmatic Programmer 有談工程師的學習(知識資產)，我覺得蠻有趣的，可以記錄看看 在這個小篇章，我最有印象的是這句話： 管理知識資產與管理金融資產非常相似 像是你管理金融資產會注意以下幾點：
定期投資(固定時間有週期的學習、調整) 多元化(不要把雞蛋放在同一個籃子裡) 管理風險 低買高賣 審查與調整 相對的，你如何管理知識資產，如何進化你自己的程式功力就也是這樣！於是Pragmatic Programmer 這本書就提出幾個務實的建議，我整理如下：
每年至少學一門新語言 每個閱讀一本技術書 也要閱讀非技術的書 上課 參與本地使用者群組或會議 批判性思考：「為什麼」、「這對誰有好處」、「時空背景是什麼」、「何時何地用」、「為什麼會有這個問題」 小君曰：我覺得每一年排一次出去外面面試其實也是個不錯的idea.</description></item><item><title>工程師必讀的書之一：Pragmatic Programmer</title><link>https://jimmycode.tw/posts/2022/04/pragmatic_programmer/</link><pubDate>Sat, 09 Apr 2022 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2022/04/pragmatic_programmer/</guid><description>最近有點水貨，都在讀一些書，不過最近在看得這本書個人私底下認為應該作為工程師必看的一本書之一。原因是你可以從這本書或多或少得到一些啟示、有用的技巧可以帶回到你個人的專案當中，而且他應該算是可以每一年都拿出來複習一遍的好書之一。
這本書如同標題所示：The Pragmatic Programmer。天瓏書局也有在賣，歡迎去購買～(連結 )，
這本書談了很多東西、像是重構、測試、需求與開發等，與之前我看的軟實力不同，前者偏向做人與軟體工程師的人生，但後者更比較偏向軟體工程師的實際操作、練習等等，相比之下，我比較喜歡後者，也就是Pragmatic Programmer
他有點將內容分成很多一小段一小段的，我覺得非常適用於我們目前這種速食閱讀的時代，偶爾就能翻一翻幾個小篇章提醒自己一下，而且它也不一定適用要從頭讀到尾的那種閱讀方式。
像最近他就講到需求是一種過程就很有感覺，他說到菜鳥開發人員最常犯的一種錯誤就是聽到客戶的需求就馬上做，但根據經驗來看，很多時候客戶的初次需求往往不一定就真的是需求，是需要一步一步藉由回饋加以確認的！
另外原本我有點不喜歡我家老闆一直care 我API的規格，甚至有時候明明就這幾個欄位前端不會用到，卻硬是被要求去傳&amp;hellip;，但讀到這裡有個篇章：正交性，主張一個好的系統可以讓其中一個的變化不會影響其他任何一個，舉個例子來說，就像資料庫程式碼與使用者介面應該要是正交的
這不免就讓我發現原來我老闆的顧慮或許是正確的
但是正交性真的也能應用於我與前端溝通用的API嗎？這裡我給個問號
最後，我覺得這本書帶給我新的立志：成為Pragmatic Programmer（務實的工程師） 比起之前我想的，成為專家？成為厲害的工程師？我倒覺得這個flag務實多了
那麼什麼是務實的工程師呢？
重視你手中的工作與手藝(程式碼) 找出合適的解決方案 虛懷若谷、持續學習 小君曰：我是一位務實的Programmer&amp;hellip;&amp;hellip;</description></item><item><title>讀改變世界的九大演算法</title><link>https://jimmycode.tw/posts/2022/04/%E6%94%B9%E8%AE%8A%E4%B8%96%E7%95%8C%E7%9A%84%E4%B9%9D%E5%A4%A7%E6%BC%94%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 02 Apr 2022 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2022/04/%E6%94%B9%E8%AE%8A%E4%B8%96%E7%95%8C%E7%9A%84%E4%B9%9D%E5%A4%A7%E6%BC%94%E7%AE%97%E6%B3%95/</guid><description>簡單分享一下最近看的一本書：改變世界的九大演算法 。
我覺得他算是被歸類在科普書，只是它是一種電腦科學的「科」。在這本書開宗明義也寫道他不是寫給我們這種電腦科學工作者看的，所以也不會分享那種排序啊、圖論等等在我大學必修的那些演算法這樣拉XD
而作者也很厲害，用各種生活例子與比較平易近人的語法講解搜尋引擎、加密、神經網路、資料庫、數位簽章等等在我們生活中常常使用到的演算法，著實令人感到佩服。
我最喜歡他第十章的內容，標題是 「什麼是可計算的」，像他就講到是否有可能製作出尋找當機的程式、能不能找出幫我們自動找出錯誤、毀壞的程式&amp;hellip;並且在小節裡面壓根就寫明「有些程式根本不可能存在」。這或多或少帶給我一些啟示與想法，原來電腦不是沒有弱點、他也是有它所做不到的極限與困難，這使我不禁想起之前在學習DevOps的第一句就是：「追求所謂百分百可靠度是錯誤的目標」
或多或少緩解我寫出bug的罪惡感與自責（大誤～
小君曰：其實資料結構對了，比較差的演算法也可以出頭天&amp;hellip;</description></item><item><title>讀原子習慣</title><link>https://jimmycode.tw/posts/2021/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%BE%86%E8%AE%80%E6%9B%B8-%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/</link><pubDate>Sat, 04 Dec 2021 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2021/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%BE%86%E8%AE%80%E6%9B%B8-%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/</guid><description>最近讀了一本書叫做「原子習慣」，是一本很常在暢銷榜上的一本書&amp;hellip;作為工程師，非技術相關的書還是要有些涉獵啊～
之前買過這本書，後來賣掉。但後來又覺得想把它買回來，於是在五倍券發放的時候又把他買下來了XD
現在想來真的覺得自己蠻蠢的呵呵，有興趣的可以自行去買書，我這裡就記錄一下我從這本書獲得的心得。對了！ 我覺得這本書很棒的一點是他每一章後面都有重點整理、然後重點的句子都會做粗體標示，這帶給我很不錯的閱讀體驗，但相對也讓我有點難想一個字一個字讀下去&amp;hellip;
寫在法則之前 如果你覺得改變習觀很難，問題不在於你，而在你的系統 改變有三種層次：結果、過程與身份認同 習慣就是重複次數多到足以自動化的行為 習慣形成的四個步驟：提示、渴望、回應(我這裡比較想翻譯成執行&amp;hellip;)、獎賞 法則一：提示 讓提示顯而易見 對自己實際的作為保持意識、保持覺察，是改變習慣最大的挑戰之一(講到日本列車員指差確認部分&amp;hellip;) 當X情境時發生時，我就會執行Y反應 盡量避免把一個習慣的情境跟另一個習慣的情境混在一起 例如：手機 法則二：渴望 讓習慣有吸引力 所處文化決定了哪些行為對我們有吸引力 我們最早的習慣並非來自選擇，而是模仿 這部分在談談夥伴與社群的部分&amp;hellip; 創造一個動機儀式：在執行困難的習慣之前，做一件你很享受的事 重新思考你的習慣，把重點放在益處而非壞處(要懂得轉換思考模式好讓自己維持習慣) 法則三：回應 謎之音：這裡有DevOps的味道&amp;hellip;
讓行動輕而易舉 關鍵是由重複開始，而非完美&amp;hellip;開始重複實行就對了 最小努力原則：讓習慣簡單到就算沒有意願也會執行 兩分鐘法則：新習慣的開始應該要花不到兩分鐘 法則四：獎賞 讓獎賞令人滿足 前三個法則是增加我們執行某個行為的機率，但獎賞法則是增加我們下一次重複該行為的可能性 習慣追蹤 「當測量成了目標，就不在是個好的測量方式」測量只有在引導你、幫助你看清全局、而不是消耗你心神的時候，才對你有用(古德哈特定律 ) 習慣中斷：基本上不要錯過兩次，盡快恢復正軌 寫在法則之後 當習慣符合你天生的傾向與能力，執行起來就比較容易，堅持下去也比較令人滿足 基因決定的不是你的命運，而是你在哪個領域會有機會(性格如何影響習慣) 反省與複查是一個讓你對自身表現長久保持覺察的過程 個人回應與結論 其實對我來說重點與癥結點在於「回應」，也就是執行。還有如何創造一個系統，讓自己維持習慣的執行與養成。
例如每天早上就是讀聖經、背英文單字和學習程式這樣，有一個早晨的「習慣set」，或者下班就是去運動、睡前小閱讀幾頁的書&amp;hellip;這樣的一個晚上「習慣set」&amp;hellip;總之，我們都希望自己成為更好的人吧?!
小君曰：不想要成為一直耍廢、退步的人&amp;hellip;</description></item></channel></rss>