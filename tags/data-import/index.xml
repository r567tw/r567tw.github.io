<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data-import on Jimmy 's Code</title><link>jimmycode.tw/tags/data-import/</link><description>Recent content in data-import on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022-{year} Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sat, 30 Jan 2021 14:39:00 +0000</lastBuildDate><atom:link href="jimmycode.tw/tags/data-import/index.xml" rel="self" type="application/rss+xml"/><item><title>原來可以這麼寫(10)：同步與非同步</title><link>jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB10%EF%BC%9A%E5%90%8C%E6%AD%A5%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5/</link><pubDate>Sat, 30 Jan 2021 14:39:00 +0000</pubDate><guid>jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB10%EF%BC%9A%E5%90%8C%E6%AD%A5%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5/</guid><description>來到第十篇原來這麼寫啦，看來這個系列真的常駐我這個部落格真的很久呢！
要冷靜啊！ 然後這次真的是史上我接過任務最難的一波，有一天還差點情緒崩潰在工作現場爆哭&amp;hellip; 真的覺得自己很丟臉很誇張&amp;hellip;&amp;hellip;
不過事後想想，那是因為我自己對自己的要求也實在太高了，也一直過度自責、苛責自己的規劃上有很大的問題&amp;hellip;.. 真的很辛苦各位我的同事。總之，這次的經驗告訴我：要努力試著讓情緒歸情緒、工作歸工作。哭完，問題還是在那裡，我們一定要努力地解決問題。工程師的存在正是為此啊。 我自己最喜歡得形容詞就是忠心！忠心於工作、忠心於自己的技術能力、也忠心於自己的信仰。我想藉著上面的事件也再度應證與難怪自己為什麼會有那種過度反應了吧 結論是：calm down ! 挽起袖子來解決問題
小說的匯入任務 這個任務為什麼對我來說蠻困難的，我覺得技術問題是一回事，其次我自己也檢討是不是太晚將問題丟出來了？我的個性常常是獨立做事，說真的還蠻就事論事得、原生工程師性格。而我通常認為我自己不是那個第一個遇到同樣問題的人，所以總是自己想辦法處理、想辦法解決&amp;hellip;. 像是Laravel 的開發與專案、API維護上，我其實就非常游刃有餘、自由自在。(當然溝通上面的gap 與問題是需要慢慢的與團隊磨合與自己努力調整的)，DevOps 的精神就是逐步改善麻！
但我卻忽略有時候其實是有時間上的問題，在過年前要匯入這麼多的小說，一共12000多章節，剛好我台東人在過年期間卻要請長長的年假，我才驚訝發現：我hold 不住了。看來，下次也要注意時間，好讓PM與SA 能夠發覺與注意到我的狀況，能hold 住專案。
自動匯入方案的產生 不過還好啦，謝謝同事、夥伴們的體諒與幫助。在禮拜五怒給他加班到十一點的時候把這個自動化方案寫出來(但當然啦，這個我覺得也需要事先給PM測試，所以同時我也預備自己的手動匯入程式方案&amp;hellip;但等等分享我遇到的問題與啟發)
手動匯入的些許失敗經驗與啟發 但說真的，小說匯入其實這次第二波了。上一次真的我自己沒有準備好&amp;hellip; 可是這次我吸取第一次的失敗經驗，重新調整流程、設計。於是這次在匯入資料上面就非常的順利，還記得第一次營運單位有兩天的時間都無法到後台修改資料&amp;hellip;但這次一個下午就搞定了。
事實上，我只是把匯入分成兩個階段進行，第一階段是把資料放進去資料庫(就是這個步驟才會不建議營運單位修改資料，以免我們的id 亂跳&amp;hellip;)，而第二階段是去別人小說的網站把音擋下載下來上傳到我們server上的指定位置，驅動我們同事寫好的自建音檔模組。於是完成了這整個匯入流程。
而第二階段的處理原本我用Python 寫 request.get(url) 這樣去下載，寫檔案後上傳的“同步方案”，一支處理就要10秒多&amp;hellip;. 然後12000多就&amp;hellip; 超級慢的啦！
中間還遇到工作電腦爆掉的問題&amp;hellip; 真的是很衰&amp;hellip; 第一次遇到&amp;hellip;. 但所幸謝謝我們家的MIS幫我工作電腦換好一個power 這樣，於是只有一點點時間是不知道怎麼辦而已。
隔天早上，發現我那支居然跑到一半不跑了&amp;hellip; 還好我之前在設計上有納入可中斷性，就算中斷了重新執行也可以從還沒處理的部分繼續接著處理&amp;hellip; 但就像剛剛說的一個一個上傳真的很慢啊&amp;hellip;. 於是開始研究 Python 的 非同步方案版本&amp;hellip;
1import aiohttp 2import aiofiles 3import asyncio 4import time 5import os 6 7 8#定義協程(coroutine) 9async def main(links): 10 11 async with aiohttp.ClientSession() as session: 12 tasks = [ 13 asyncio.</description></item></channel></rss>