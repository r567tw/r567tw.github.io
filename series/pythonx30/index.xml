<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PythonX30 on Jimmy 's Code</title><link>/series/pythonx30/</link><description>Recent content in PythonX30 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022-{year} Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Tue, 30 Oct 2018 15:50:50 +0000</lastBuildDate><atom:link href="/series/pythonx30/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 鐵人賽：遺珠之憾</title><link>/posts/Python-%E9%90%B5%E4%BA%BA%E8%B3%BD%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</link><pubDate>Tue, 30 Oct 2018 15:50:50 +0000</pubDate><guid>/posts/Python-%E9%90%B5%E4%BA%BA%E8%B3%BD%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</guid><description>最後一天，終於寫到這裡
第一次參加鐵人賽，很幸運的可以連續30天完成。甚至有些時候差點要超過時間完成不了鐵人賽看了之前鐵人賽的文章，似乎過了一段時間在完成30天就會把挑戰第幾天凍結。（我也想要有鐵人煉成的成就啊～～
說真的這次給了我一個經驗，就是下次可能也要預先存幾個草稿好讓我可以之後準時發布我覺得也感謝我這次參加鐵人賽的經驗，讓我有機會好好整理Python的學習
總之，我來談談這次Python鐵人賽沒談到的遺珠之憾吧同時也是我之後會繼續專研的方向
基本與物件導向 多執行緒的議題 更深入的 Django和Flask 更深入的Pandas 關於機器學習/人工智慧：TensorFlow+Keras 其他爬蟲的框架：scrapy MapReduce 和 Spark 或Handoop 個人自己有看過的書籍而且覺得不錯
Python初學特訓班 Python 自動化的樂趣：搞定重複瑣碎&amp;amp;單調無聊的工作 Python新手使用Django架站的16堂課：活用Django Web Framework快速建構動態網站不過這本架站的16堂課已經是舊版，如果要新版的請至此（Python新手使用Django架站技術實作：活用Django 2.0 Web Framework建構動態網站的16堂課）https://www.books.com.tw/products/0010790747 個人推薦相關線上課程
https://morvanzhou.github.io/ Youtube Hahow 也有相關Python的課程，我自己在上的有：「Python 網頁爬蟲入門實戰」和「用 Python 理財：打造小資族選股策略」</description></item><item><title>Python 資料科學：Pandas</title><link>/posts/Python-%E8%B3%87%E6%96%99%E7%A7%91%E5%AD%B8%EF%BC%9Apandas/</link><pubDate>Mon, 29 Oct 2018 14:47:16 +0000</pubDate><guid>/posts/Python-%E8%B3%87%E6%96%99%E7%A7%91%E5%AD%B8%EF%BC%9Apandas/</guid><description>今天來說說資料分析的Python modules — pandas
首先我們來安裝他
1pip install pandas 接下來我要介紹在pandas兩個資料結構 Series 和 DataFrame他們的宣告很簡單，而且樣式也是很簡單，首先是series
1import pandas as pd 2 3l = [1,2,3,56,7,7,73,3,3,2] 4 5date = pd.date_range(&amp;#39;20180731&amp;#39;,periods=10) 6s = pd.Series(l,index= date) 7print(s) print(s)接下來你就會看到
12018-07-31 1 22018-08-01 2 32018-08-02 3 42018-08-03 56 52018-08-04 7 62018-08-05 7 72018-08-06 73 82018-08-07 3 92018-08-08 3 102018-08-09 2 11Freq: D, dtype: int64 所以series 很簡單，你可以想像成一個關係數列，然後之後我們可以藉由呼叫這個series的各種方法，如下
1print(s.loc[&amp;#39;20180731&amp;#39;]) #因為index 是時間可以這樣呼叫=&amp;gt;1 2print(s.loc[&amp;#39;20180731&amp;#39;:&amp;#39;20180802&amp;#39;]) #因為index從2018-07-31到2018-08-02 的值 3&amp;#39;&amp;#39;&amp;#39; 42018-07-31 1 52018-08-01 2 62018-08-02 3 7Freq: D, dtype: int64 8&amp;#39;&amp;#39;&amp;#39; 9print(s.</description></item><item><title>Python 網頁：Flask</title><link>/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Aflask/</link><pubDate>Sun, 28 Oct 2018 12:56:44 +0000</pubDate><guid>/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Aflask/</guid><description>寫到這裡真的覺得自己下次要參加鐵人賽要想清楚。 要規劃好內容，也可能自己要寫一些存擋備份（不知道那些完成鐵人賽的是不是都是這樣？）
不然有時候寫到後面，真的不是很想繼續寫下去、也覺得自己寫的內容有點爛ＸＤ
也或許自己寫的這個技術並不是自己最在行的，而是自己下班的閒暇之餘所寫的，所以如果有錯或者有什麼提供建議再精進的方向給我！
今天要介紹Flask首先，就是要先安裝flask啊！
1pip install flask 接下來建立我們的檔案 index.py
1from flask import Flask 2app = Flask(__name__) 3@app.route(&amp;#34;/&amp;#34;) 4def hello(): 5 return &amp;#34;Hello World!&amp;#34; 6if __name__ == &amp;#34;__main__&amp;#34;: 7 app.run() 最後我們執行index.py就會看到類似底下的訊息
1 * Serving Flask app &amp;#34;index&amp;#34; (lazy loading) 2 * Environment: production 3 WARNING: Do not use the development server in a production environment. 4 Use a production WSGI server instead. 5 * Debug mode: off 6 * Running on http://127.</description></item><item><title>Python 網頁：Django- 來做一個部落格(2)</title><link>/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC2/</link><pubDate>Sat, 27 Oct 2018 15:56:02 +0000</pubDate><guid>/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC2/</guid><description>今天，想把Django篇先結束ＸD
昨天，我們已經將post這個表註冊到後台並且已經migrate它現在，我們要開始做前端的畫面並且能夠顯示。 這非常的陽春，如果需要更加深研的請歡迎自行搜尋
首先你會好奇為什麼在後台儲存資料卻是post object，原因是你沒有設定要顯示的什麼東西
所以在這裡請編輯models.py
1from django.db import models 2from django.utils import timezone 3 4# Create your models here. 5class Post(models.Model): 6 title = models.CharField(max_length=200) 7 slug = models.CharField(max_length=200) 8 content = models.TextField() 9 pub_date = models.DateTimeField(default=timezone.now) 10 11 def __str__(self): 12 return self.title 加入 ＿str__ 方法並回傳他要回傳的名稱這樣就可以在後台看到標題了
然後請編輯一下blog/urls.py
1# ...（略） 2from django.contrib import admin 3from django.urls import path 4from mblog import views 5 6urlpatterns = [ 7 path(&amp;#39;&amp;#39;, views.homepage, name=&amp;#39;homepage&amp;#39;), 8 path(&amp;#39;admin/&amp;#39;, admin.</description></item><item><title>Python 網頁：Django- 來做一個部落格(1)</title><link>/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC1/</link><pubDate>Fri, 26 Oct 2018 15:06:28 +0000</pubDate><guid>/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC1/</guid><description>昨天我們已經建立好部落格的大概專案結構，如下
1├── blog 2│ ├── __init__.py 3│ ├── __pycache__ 4│ │ ├── __init__.cPython-36.pyc 5│ │ ├── settings.cPython-36.pyc 6│ │ ├── urls.cPython-36.pyc 7│ │ └── wsgi.cPython-36.pyc 8│ ├── settings.py 9│ ├── urls.py 10│ └── wsgi.py 11├── db.sqlite3 12├── manage.py 13└── mblog 14 ├── __init__.py 15 ├── admin.py 16 ├── apps.py 17 ├── migrations 18 │ └── __init__.py 19 ├── models.py 20 ├── tests.py 21 └── views.py 接下來我們就來快速建立一個部落格吧
首先，我們主要work的資料夾都會在我們藉由startapp為起始的mblog資料夾內在models.py裡面做編輯，加入一個posts的表
1from django.db import models 2from django.</description></item><item><title>Python網頁篇：Django- 簡介</title><link>/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E7%B0%A1%E4%BB%8B/</link><pubDate>Thu, 25 Oct 2018 15:35:03 +0000</pubDate><guid>/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E7%B0%A1%E4%BB%8B/</guid><description>今天講點關於django概念上的東西
首先Django 的MVC不是傳統上的MVC ，而是MTVM- model.pyT- templatesV- View
詳細介紹可以參考此網址：http://mropengate.blogspot.com/2015/08/mvcdjangomtv.html
而今天要架一個blog的網站，首先django有趣的是他有一個初始專案開啟的資料夾以外，還有一個專門放網站設定網站程式的資料夾。所以我們要撰寫用django 架設 blog時還要再下一個指令
1Python manage.py startapp mblog 2#mblog 你可以用任何的名稱，只要不要和你本身目錄衝到 這時我們來看看目前程式資料夾的架構
1├── blog 2│ ├── __init__.py 3│ ├── __pycache__ 4│ │ ├── __init__.cPython-36.pyc 5│ │ ├── settings.cPython-36.pyc 6│ │ ├── urls.cPython-36.pyc 7│ │ └── wsgi.cPython-36.pyc 8│ ├── settings.py 9│ ├── urls.py 10│ └── wsgi.py 11├── db.sqlite3 12├── manage.py 13└── mblog 14 ├── __init__.py 15 ├── admin.py 16 ├── apps.py 17 ├── migrations 18 │ └── __init__.</description></item><item><title>Python網頁篇：Django- 初始環境</title><link>/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E5%88%9D%E5%A7%8B%E7%92%B0%E5%A2%83/</link><pubDate>Wed, 24 Oct 2018 14:13:41 +0000</pubDate><guid>/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E5%88%9D%E5%A7%8B%E7%92%B0%E5%A2%83/</guid><description>現在開始來講用Python開發網頁，這一篇到後面幾篇來講講用Django 架設一個用markdown寫作的部落格。
也藉著這個範例來說明一下django.
首先，當然是要先安裝好django啦！
1pip install django 然後要創建一個django的專案請使用
1django-admin startproject {專案名稱} 2#我這裡就是專案名稱為blog 3django-admin startproject blog 你的資料夾結構如下
1blog 2├── blog 3│ ├── __init__.py 4│ ├── settings.py 5│ ├── urls.py 6│ └── wsgi.py 7└── manage.py 接下來到blog的資料夾（或者你專案的資料夾下），使用
1python manage.py runserver 接下來會出現一個網址，像我的訊息就是
1Performing system checks... 2 3System check identified no issues (0 silenced). 4 5You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</description></item><item><title>Python 走入現實：json</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Ajson/</link><pubDate>Tue, 23 Oct 2018 15:01:37 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Ajson/</guid><description>今天來講怎麼用Python怎麼讀取json.
json 是一個資料表示的型式。以範例來看：
1import json 2 3# json 的資料形式字串 4x = &amp;#39;{ &amp;#34;name&amp;#34;:&amp;#34;jim&amp;#34;, &amp;#34;age&amp;#34;:25, &amp;#34;city&amp;#34;:&amp;#34;Taiwan&amp;#34;}&amp;#39; 5 6# 轉換json 7person = json.loads(x) 8 9print(type(person)) #&amp;lt;class &amp;#39;dict&amp;#39;&amp;gt; 10print(person){&amp;#39;name&amp;#39;: &amp;#39;jim&amp;#39;, &amp;#39;age&amp;#39;: 25, &amp;#39;city&amp;#39;: &amp;#39;Taiwan&amp;#39;} 11print(person[&amp;#39;age&amp;#39;]) #25 要讀取json非常簡單，import json這個module然後經由loads這個方法轉出，會產生一個dictionary型態資料
接下來，是反過來～把Python的物件轉換成json，則使用dumps方法
1import json 2 3person = {&amp;#39;name&amp;#39;: &amp;#39;jim&amp;#39;, &amp;#39;age&amp;#39;: 25, &amp;#39;city&amp;#39;: &amp;#39;Taiwan&amp;#39;} 4 5data = json.dumps(person) 6 7print(type(data)) #&amp;lt;class &amp;#39;str&amp;#39;&amp;gt; 8print(data) #{&amp;#34;name&amp;#34;: &amp;#34;jim&amp;#34;, &amp;#34;age&amp;#34;: 25, &amp;#34;city&amp;#34;: &amp;#34;Taiwan&amp;#34;}</description></item><item><title>Python 走入現實：selenium+爬蟲</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium%E7%88%AC%E8%9F%B2/</link><pubDate>Mon, 22 Oct 2018 14:54:04 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium%E7%88%AC%E8%9F%B2/</guid><description>昨天介紹了selenium 這個module今天來加強版，讓selenium 和beautifulSoup結合為一
1from selenium import webdriver 2from selenium.webdriver.support.ui import WebDriverWait 3from selenium.webdriver.support import expected_conditions 4from selenium.webdriver.common.by import By 5from bs4 import BeautifulSoup 6 7url =&amp;#39;https://tw.yahoo.com/&amp;#39; 8 9#今天講個特別的，我們可以不讓瀏覽器執行在前景，而是在背景執行（不讓我們肉眼看得見） 10#如以下宣告 options 11options = webdriver.ChromeOptions() 12options.add_argument(&amp;#39;--headless&amp;#39;) 13 14#打開瀏覽器,確保你已經有chromedriver在你的目錄下 15# 然後將options加入Chrome方法裡面，至於driver請用executable_path宣告進入 16browser=webdriver.Chrome(chrome_options=options, executable_path=&amp;#39;./chromedriver&amp;#39;) 17#在瀏覽器打上網址連入 18browser.get(url) 19 20#這時候就可以分析網頁裡面的元素 21element = browser.find_element_by_id(&amp;#39;UHSearchBox&amp;#39;) 22element.send_keys(&amp;#39;Hello World&amp;#39;) 23 24sumbit = browser.find_element_by_id(&amp;#39;UHSearchWeb&amp;#39;).click() 25 26# 等待目標表格&amp;#39;id 為 web&amp;#39;的div出現 27element = WebDriverWait(browser, 5).until( 28 expected_conditions.presence_of_element_located((By.ID, &amp;#39;web&amp;#39;)) 29) 30 31#然後就是beautifulsoup的範疇了，將browser.page_source放進去分析 32soup=BeautifulSoup(browser.page_source,&amp;#34;html.parser&amp;#34;) 33links = soup.</description></item><item><title>Python 走入現實：selenium</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium/</link><pubDate>Sun, 21 Oct 2018 05:24:21 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium/</guid><description>今天來介紹一個特別的module: selenium他是一個可以控制瀏覽器的module.
但如果你要控制瀏覽器載入這個module以外也要在下載相對應瀏覽器的driver還有相對應作業系統的版本，
我這裡以我自己作業系統為mac os 還有 瀏覽器的driver設定為我個人最常用的‘chrome’為例如果你是其他os或者要弄其他的瀏覽器，請造訪https://selenium-Python.readthedocs.io/installation.html
啊如果還是看不懂歡迎在底下留言討論。
先上範例程式碼：這裏我是用yahoo的網址然後在搜尋框打上hello world 並且做搜尋
1from selenium import webdriver 2 3url =&amp;#39;https://tw.yahoo.com/&amp;#39; 4 5#打開瀏覽器,確保你已經有chromedriver在你的目錄下 6browser=webdriver.Chrome(&amp;#39;./chromedriver&amp;#39;) 7#在瀏覽器打上網址連入 8browser.get(url) 9 10#這時候就可以分析網頁裡面的元素 11element = browser.find_element_by_id(&amp;#39;UHSearchBox&amp;#39;) 12element.send_keys(&amp;#39;Hello World&amp;#39;) 13 14sumbit = browser.find_element_by_id(&amp;#39;UHSearchWeb&amp;#39;).click() 關於selenium 你可以更多看文件：https://selenium-Python.readthedocs.io/index.html
接下來執行你就會很清楚的發現電腦另立一個新的chrome，然後坐著我們想要做的事&amp;hellip;
這樣的工作可以做什麼？可以延伸什麼？1.表單填寫：例如如果電子連署我可以大量搞死人連署（大誤ＸＤ2.軟體工程師的網頁測試3.可以和beautifulsoup搭配，天底下已沒有你爬不到的資料XD4.其他你覺得用瀏覽器很麻煩的動作</description></item><item><title>Python 走入現實：來爬蟲吧(3)</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A73/</link><pubDate>Sat, 20 Oct 2018 02:55:30 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A73/</guid><description>昨天看到一個大大po 鐵人賽的文章。終於解決了如何提取圖片的問題，原來，request也是可以讀到圖片檔的資訊的
來吧！ 我們來學習如何爬圖片！其實網頁要呈現圖片有幾個方向
img 標籤 css image 相關的屬性 用js 放進去（但不太可能有人做這種事情&amp;hellip;除非是互動性太高需要換圖片的那種） img 標籤要爬最簡單，看看src標籤就可以囉～ css的話就會比較麻煩一點總之，爬蟲前是要做一些功課的，他是一種極客製化的一種功能
這時就要說一下自己的切身之痛我很久以前也在下班時間玩Python的時候寫關於爬蟲的東西，結果不知道最近是不是網頁改版抑或是Python函式庫的問題，總之這個在去年還是前年寫的馬上出錯,怎麼debug都不對&amp;hellip;..怎麼google解法都解決不了
這時候你要去想辦法尋找解法，
是繼續在這個錯誤當中繞圈，跟他死嗑到底（想辦法正面和這個錯誤衝突）？ 尋找替代方案？ （和小學生一樣抄隔壁的作弊XD) 如果是接案或者那種有客戶你還有第三種選擇：說服他不要做這個功能（逃避隨可恥但有用？！！！！！！） 因為網路上其實很多人都有在寫Python抓圖片的程式或api ，你要相信一句話：你不是第一個發生這個問題的人
我和這個錯誤正面處理已經很久了，所以顯然第一個解法是不適合的，又或者等等寫完這篇鐵人賽或鐵人賽結束我會繼續想辦法解決這個錯誤，所以最後我來參考其他人的程式碼來看看他們怎麼抓圖片。
這時候，你有看懂Python程式的功力很重要，如何將他人的程式碼擷取或者看懂邏輯進而應用到自己的程式碼是一門藝術，我自己也還在摸索學習。
話不多說，上菜了，以爬https://www.inside.com.tw/ 為例如果你要爬其他網站，可以自行分析，或者歡迎在底下留言和我討論XD 我做不到我會google哈哈哈
分析一下inside的網頁，在他上方的slider 程式碼有段敘述如果你頑皮一點將url 裡面的網址貼上瀏覽器， yo 圖片get!
1&amp;lt;ul class=&amp;#34;hero_slides&amp;#34;&amp;gt; 2 &amp;lt;li class=&amp;#34;hero_slide js-hero_slide&amp;#34; style=&amp;#34;background-image: url(https://www.inside.com.tw/wp-content/uploads/2018/10/RTX2Z7S8.jpg)&amp;#34;&amp;gt; 3 所以接下來爬蟲囉！ 不知道inside 會不會吉我？哎呦 別這樣 你們如果改版的恐怕我底下的程式碼直接廢掉XD「同是工程師，相煎何太急」
這裏也要呼籲，爬蟲請務必遵守法律規範，因為網頁上的圖片是公開的，而且基本上我也沒要拿來幹嘛。所以我是合法使用（應該吧？？？！）
以下程式碼我是來抓inside 最上面slider 的幾張圖片，並且為了整齊將這些圖片都放到images這個資料夾裡
1import requests 2from bs4 import BeautifulSoup 3import os 4import re 5 6url=&amp;#34;https://www.inside.com.tw/&amp;#34; 7 8request=requests.get(url) 9content=request.content 10soup=BeautifulSoup(content,&amp;#34;html.parser&amp;#34;) 11 12container = soup.</description></item><item><title>Python 走入現實：圖形化介面</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E5%9C%96%E5%BD%A2%E5%8C%96%E4%BB%8B%E9%9D%A2/</link><pubDate>Fri, 19 Oct 2018 14:45:13 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E5%9C%96%E5%BD%A2%E5%8C%96%E4%BB%8B%E9%9D%A2/</guid><description>哈！ 結果到現在十點多才回到家沒有研究到多媒體資源到底該如何提取爬蟲過來，抱歉！ 趁著週末時間來好好研究，希望可以明天和大家分享一下怎麼爬多媒體資源（又或者鐵人賽之前吧？！趕不上的話&amp;hellip;.我不會學世堅跳海，只會和大家說聲抱歉啦哈）
這裏再用圖形化介面幫我代打啊哈這裏我使用的圖形化介面module是tkinter。
你會發現，原來Python這麼簡單！！！
1import tkinter as tk #哎這也是一種遺珠之憾，module也可以用別名，使用as加入你想改的名字也可以喔 2 3root = tk.Tk() 4root.title(&amp;#39;Hello World Application&amp;#39;) #介面的標題是&amp;#39;Hello World Application&amp;#39; 5 6root.mainloop() 只要import tkinter這個module, 接下來請呼叫他的Tk()方法記得，最後的mainloop方法也要，這樣你就呼叫出一個圖形化介面囉！
當然啦，只是這樣我這篇也太偷懶了XD昨天都這麼偷懶今天怎麼可以還這樣呢（昨天偷懶真的不是故意的啊！差點要熬夜隔天爬不起來上班啊）
所以，我來做一個可以按下按鈕，呼叫‘Hello World’訊息框的應用範例吧！
1import tkinter as tk 2import tkinter.messagebox as messagebox 3 4def HelloWorldMsgBox(): 5 print(&amp;#39;hello world&amp;#39;) 6 messagebox.showinfo(&amp;#34;Hello World Application&amp;#34;, &amp;#34;Hello World!&amp;#34;) #呼叫hello world的訊息框 7 8root = tk.Tk() 9root.title(&amp;#39;Hello World Application&amp;#39;) 10 11buttonHelloWorld = tk.Button(root, text=&amp;#39;SayHello&amp;#39;, width=25, command=HelloWorldMsgBox) 12buttonHelloWorld.pack() #按下去啟動上面定義好的HelloWorldMsgBox方法 13 14buttonClose = tk.Button(root, text=&amp;#39;Close&amp;#39;, width=25, command=root.</description></item><item><title>Python 走入現實：正規表達式</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F/</link><pubDate>Thu, 18 Oct 2018 15:47:55 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F/</guid><description>不好意思發現要爬蟲多媒體資源時發現一些問題，目前還在debug中哈哈&amp;hellip;
以後再來試試看怎麼取獲取多媒體資源，我承諾在鐵人賽結束前一定會想辦法生出來，今天為了能夠完成這一天先以正規表達式代打真是不好意思了。
在Python中用正規表達式非常簡單，就是用&amp;rsquo;re&amp;rsquo;這個module
1import re 2 3string = &amp;#39;Hello World&amp;#39; 4relist = re.findall(r&amp;#34;[a-z]*&amp;#34;,string) 5print(relist) 這樣你就會求出a-z 的文字喔。
正規表達式對於我們在搜尋或者分析資料非常好用
提供一些可以參考的資料：
https://regex101.com/ http://ju.outofmemory.cn/entry/71121</description></item><item><title>Python 走入現實：來爬蟲吧(2)</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A72/</link><pubDate>Wed, 17 Oct 2018 14:02:02 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A72/</guid><description>前一天我們談到如何使用Python發出類似瀏覽器的request，把所要的HTML+CSS+JS都給他抓過來。但是如果只是這樣那爬蟲又有什麼多厲害呢？ 爬蟲的厲害之處就是能把抓回來的東西，拿出來好好的分析，藉此獲得我們想要的資訊或者有用的資訊
因此，讓我接下來為他介紹收到request之後的事情吧！
BeautifulSoup 其實Python有許多的爬蟲套件，我之前個人下班在玩的時候都是用這個套件，當然也有其他可以爬的套件。這裏我介紹某位youtuber的資源：https://www.youtube.com/watch?v=T2xNeWutlcA
厲害吧！他居然用Python爬蟲去抓成人影片！呵呵 不過他用的是另外一種module 叫做pyquery
好啦，確定你有安裝好beautifulSoup之後就來開始吧這裡就不抓成人影片了，我們先開始抓取‘文字內容’，明天再來講我們怎麼抓取非文字內容的資料。我們來抓youtube今天熱門影片的標題們XD
大家都知道：youtube的熱門影片網址是：https://www.youtube.com/feed/trending
1import requests; 2from bs4 import BeautifulSoup; 3 4url=&amp;#34;https://www.youtube.com/feed/trending/&amp;#34; 5 6request=requests.get(url) 7content=request.content 8soup=BeautifulSoup(content,&amp;#34;html.parser&amp;#34;) 9 10container = soup.select(&amp;#34;h3 a&amp;#34;) 11 12# print(type(container)) 13# print(container) 14# 接下來只是寫入result.txt檔案的事情 15file = open(&amp;#39;result.text&amp;#39;,&amp;#39;w&amp;#39;) 16 17for item in container: 18 if item: 19 #print(type(item)) 20 value = item.get_text() 21 print(value) 22 file.write(value+&amp;#39;\n&amp;#39;) 23 #break #這裡也提一個起手式的遺珠之憾，就是你可以用continue和break來處理 迴圈敘述，這裏為了我之前debug方便，使用break來讓我先只看一個的結果。 24 25 26file.close() 用範例講解：首先先把兩個module beautifulsoup ＆request引入接下來你會看到我使用request.get 取得熱門影片的youtube網頁的內容。再來你就用soup=BeautifulSoup(content,&amp;quot;html.parser&amp;quot;)把content 丟入beautifulSoup解析，後面參數記得加上‘html.parser’
然後回去用瀏覽器打開https://www.youtube.com/feed/trending/ 這個網頁，可能希望你會有一些基礎的html+css基礎，總之你可以仔細看看每個標題的地方，上面都會有h3 以及我們最想要的標題文字正好都被包在a這裡面。</description></item><item><title>Python 走入現實：來爬蟲吧(1)</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A71/</link><pubDate>Tue, 16 Oct 2018 15:07:02 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A71/</guid><description>剛剛在想今天要寫什麼的時候&amp;hellip;.突然想到之前其實就有點想寫爬蟲的主題ＸＤ所以就來寫一波！
淺談網路與網頁 其實我們藉由瀏覽器打入網址看到的“網頁”，獲得的都是一種“資源”，而這個資源他所回傳的是HTML+CSS＋JS(當然對於‘api’來說，他有可能回傳的是&amp;rsquo;json'、’xml‘或者其他類型)。其實說穿了網頁前端說難不難說雜不雜，就是基於這三大天王。當然你會問，那麼我們常說的後端語言：php、ruby、或者是現在我們在談的Python呢？我們總不可能拿前端來連資料庫吧（安全緣故）？沒錯！ 對於開發者的角度來說，我們是用這些後端語言，但如果你發現，其實後端語言都是會由CGI或者後端渲染的引擎，當你試著對網頁開啟右鍵檢查時，他還是HTML+CSS+JS啊！
這裏還只是淺談，如果要繼續深入的話可以說非常非常多，預計30天鐵人賽都寫不完，這裏我極力推薦某個部落客寫的有關於http的文章以及一些我個人覺得可以更加深入的參考資料，淺顯明瞭、而且我也是讀過了對於網路、瀏覽器有更多的認識呢！
NotFalse 技術客所寫的http教學系列 來做個網路瀏覽器吧！Let&amp;rsquo;s build a web browser! 系列 ：去年某大大寫的鐵人賽系列，看不懂沒關係，我也看不是太懂XD 但前面幾篇文章多少對於瀏覽器如何運作或者網路如何操作會有更多的了解 維基 或者google: 當然你也可以用wiki或自行google來幫助自己更加了解 總之，我們可以知道我們爬回來的東西就是一連串的文字，就是HTML+CSS+JS/除非你是對API 當然就獲得其他類型的資料
環境建置 如果你不喜歡自己的環境太過髒亂，你想要有‘virtual’ 環境，那非常好，Python3自己有內建，另外我自己或網路上也推薦‘virtualenv’這個modules
總之，時間不多 let&amp;rsquo;s start!我就先假設大家想要有一個不受污染的環境吧先確定安裝好pip之後請執行
1pip install virtualenv #安裝virtualenv這個環境 2virtualenv crawler #建立一個名字叫做crawler的虛擬環境 3source crawler/bin/activate #啟動這個crawler 這個環境(for mac) 4\crawler\Scripts\activate.bat #或者也可以執行這個指令 (for windows) [參考](https://programwithus.com/learn-to-code/Pip-and-virtualenv-on-Windows/) 5 你的環境如果有啟動的話應該可以看到你們前面會有個類似(crawler)的字樣。要離開的話就使用&amp;rsquo;deactivate&amp;rsquo;這個指令吧！在虛擬環境之下/或者直接本機請安裝幾個會需要用到爬蟲的module吧！
1pip install requests #安裝一個可以發出網路request的module 2pip install BeautifulSoup4 #可以用這個module分析回傳回來的html+css+js 牛刀小試一下 在想要不要一口氣談完爬蟲的同時我發現時間很晚了，所以就只好分個幾天慢慢說明好了。前面說到我們的爬蟲通常會拿回來HTML+CSS+JS，那我們就來驗證一下吧！建立crawler.py
1import requests; 2from bs4 import BeautifulSoup; 3 4url=&amp;#34;https://tw.yahoo.com/&amp;#34; 5 6request=requests.get(url) 7content=request.content 8 9print(content) 執行後你看到了什麼呢？是不是html+css+js呢？ 或者你也可以使用</description></item><item><title>Python 走入現實：檔案</title><link>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AA%94%E6%A1%88/</link><pubDate>Mon, 15 Oct 2018 14:34:09 +0000</pubDate><guid>/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AA%94%E6%A1%88/</guid><description>恩&amp;hellip;想不到什麼更好聽的標題名稱了哈哈，總之接下來要介紹一些可以在實際操作的內容。今天來講講怎麼做一個檔案以及怎麼去讀檔好了。
首先，讀檔的範例如下：
1f = open(&amp;#34;hello.txt&amp;#34;,&amp;#34;r&amp;#34;) #open 的第二個參數至關重要，之後我會再繼續說明，r這個參數就是檔案是唯讀的 2print(f.read()) #這是讀全部內容的 3print(f.read(10)) #讀前面幾個文字 請注意你執行這個Python檔案的目錄，然後確認這個目錄底下使否有hello.txt的檔案。這樣就會把資料讀出來。
另外，寫檔或者建檔的程式範例如下
1f = open(&amp;#34;demo.txt&amp;#34;, &amp;#34;a&amp;#34;) #a 這個參數就是附加檔案內容，檔案不管存在不存在 2f.write(&amp;#34;Now the file has one more line!&amp;#34;) 之後你就會在目錄下找到demo.txt這個檔案，然後就會看到這個內容。除了“a” 以外也可以用“x”或“w”， 前者是file“必須不存在”，加入x這個參數就會幫你建立這個檔案。而w這個參數就會不管這個檔案存不存在，就會把原本的內容全部重洗掉然後加入。</description></item><item><title>Python 起手式：遺珠之憾</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</link><pubDate>Sun, 14 Oct 2018 14:03:53 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/</guid><description>我覺得起手式有些還未講完的。不過我覺得還是希望可以先結束這一塊！然後開始寫一些爬蟲或file io、爬蟲之類的。
來吧！所以來開始撰寫一些“遺珠之憾”，希望給大家一些資源好好學習。讓大家知道其實還有很多沒有說到的部分。
多重listlist不只是可以單維，也可以多維。例如像是底下這個樣子 1list = [[1,2,3],[4,5,6]] 2&amp;gt;&amp;gt;&amp;gt; list[0][1] 32 4&amp;gt;&amp;gt;&amp;gt; list[1][2] 56 turpleturple 不是可以只有用括弧包一、二個值而已，也可以包很多，另外兩個turple也可以相加，不過兩者的相加不過就是兩個的串連。 1&amp;gt;&amp;gt;&amp;gt; x = (1,2,&amp;#39;abc&amp;#39;,&amp;#39;def&amp;#39;,6) 2&amp;gt;&amp;gt;&amp;gt; y = (3,4,&amp;#39;ghi&amp;#39;) 3&amp;gt;&amp;gt;&amp;gt; x+y 4(1, 2, &amp;#39;abc&amp;#39;, &amp;#39;def&amp;#39;, 6, 3, 4, &amp;#39;ghi&amp;#39;) 5(1, 2, &amp;#39;abc&amp;#39;, &amp;#39;def&amp;#39;, 6, 3, 4, &amp;#39;ghi&amp;#39;) 6&amp;gt;&amp;gt;&amp;gt; y = (6,2,&amp;#39;ghi&amp;#39;) 7&amp;gt;&amp;gt;&amp;gt; x+y 8(1, 2, &amp;#39;abc&amp;#39;, &amp;#39;def&amp;#39;, 6, 6, 2, &amp;#39;ghi&amp;#39;) lambda我們一般來說會這樣寫def 函式 1 return a+b if m &amp;gt; n else n 2#result 3&amp;gt;&amp;gt;&amp;gt; add(5,6) 411 但是我今天研究還有lambda的寫法。</description></item><item><title>Python 起手式：module</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Amodule/</link><pubDate>Sat, 13 Oct 2018 08:24:09 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Amodule/</guid><description>這將會是起手式的最後一篇文章，之後將會寫關於爬蟲、File IO 或者其他像是Django 與Flask的淺談。這裏我要來給大家介紹一個蠻有趣的東西，通常我們寫程式不會都是一個檔案寫到底的，所以這裏我們要展示一下如果多個檔案的話，Python要如何運用&amp;hellip;同時也教教大家我們是怎麼使用module的
要把module用在自己的Python檔案要怎麼用呢？ 其實很簡單：就是用&amp;rsquo;import&amp;rsquo;這個關鍵字就好。
所以你可以看到之前數字遊戲當中以及之後有許多的範例程式碼會看到import或者from這些關鍵字&amp;hellip;那些大部分是Python內建的modules,或者透過pip安裝後的modules&amp;hellip;
以下我展示我們如果要引入別的檔案該怎麼辦？來假設目前的目錄有x.py 和y.py
1#x.py 2class Aclass: 3 def sayHello(self): 4 print(&amp;#39;Hello World&amp;#39;) 如果y.py要用x.py裡面的x.py的Aclass怎麼辦呢？你可以用from或import這些關鍵字啦，有兩種寫法
1#y.py 寫法一 2import x #將x.py所有內容引入 3 4test = x.Aclass() 5test.sayHello() #Hello World 6 7#y.py 寫法二 8from x import Aclass #將x.py引入裡面的Aclass 9 10test = Aclass() 11test.sayHello() #Hello World 這樣就大概完成啦，說真的因為Python都是目前下班的玩具語言，好少這樣玩也好少這樣寫，可能還有很多東西可以值得探究，所以就留待明天繼續寫吧～ 起手式：遺珠之憾！</description></item><item><title>Python 起手式：繼承</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B9%BC%E6%89%BF/</link><pubDate>Fri, 12 Oct 2018 14:47:42 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B9%BC%E6%89%BF/</guid><description>其實物件導向的世界很大，有空可以去翻翻設計模式（design pattern)(大誤？！或許我只是新手，只是寫給for 新手或者我自己寫來看，所以就沒太多的專研，但物件導向確實是個值得探討很久的議題，預計可以多寫幾天的鐵人賽（誒～ 好啦，我還是配合自己的步調好了，我還是希望後面我可以寫到爬蟲啊、Django或者flask等等的。
經過研究發現，我們其實不知不覺就已經使用到繼承，我以昨天寫的person 類別為例。
1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayToPersonHello(self,name): 6 print(&amp;#39;Hello &amp;#39;+ name) 7 8print(type(Person)) #&amp;lt;class &amp;#39;type&amp;#39;&amp;gt; 9print(type(John)) #&amp;lt;class &amp;#39;__main__.Person&amp;#39;&amp;gt; 10print(Person.__bases__) #(&amp;lt;class &amp;#39;object&amp;#39;&amp;gt;,) 其實我們在寫person這個類別的時候，其實就繼承了object這個類別&amp;hellip;
所以接下來，我們可以宣告women這個類別繼承Person, 在Python好簡單，只要類別名稱旁邊加入（）即可，然後括弧內加入類別的名稱。
1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayToPersonHello(self,name): 6 print(&amp;#39;Hello &amp;#39;+ name) 7 8class Women(Person): 9 def __init__(self,height,weight): 10 super().</description></item><item><title>Python 起手式：談物件導向</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E8%AB%87%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/</link><pubDate>Thu, 11 Oct 2018 14:37:57 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E8%AB%87%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/</guid><description>嗚，到第11天了！今天來談談物件導向的部分，物件導向簡單來說就是一種“物件”的資料型態。這種資料型態比較特別的就是在物件裡，有“屬性”和“方法”，不像之前所介紹的資料型態比較單向，數字就是數字;文字就是文字。
Python的物件表示非常簡單，只要使用&amp;rsquo;class&amp;rsquo;這個關鍵字就好，然後記得要“縮排”，在Python當中，縮排可以視為一種區塊。而要使用物件這種資料型態只要用你所宣告的class新名稱，然後加入‘()’就好了。如下所示：
1class Person: 2 height=5 3 weight=40 4 5John = Person() 6print(John.height) #5 然後在上面的例子中，我們的height和weight都被寫死了，在現實世界我們的height和weight都不太一樣，在物件導向的世界有construct這個方法可以使用，php、ruby都是這樣，那Python呢？請看底下示範
1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 6John = Person(5, 40) 7print(John.height) #5 Python厲害的地方是不用特別宣告屬性，直接在init 這個方法做出宣告即可。請記得，self是必要的，然後記得縮排，Python的construct就完成了
而物件導向除了屬性，也有方法，在這裡我用程式帶過：
1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayHello(self): 6 print(&amp;#39;Hello&amp;#39;) 7 8John = Person(5, 40) 9John.sayHello() #Hello 所以呢，Python的方法就是用def這個關鍵字，然後請記得加入self，記得縮排就可以啦！當然，也可以試試看加入外部的參數
1class Person: 2 def __init__(self, height, weight): 3 self.</description></item><item><title>Python 起手式：Functions</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Afunctions/</link><pubDate>Wed, 10 Oct 2018 12:32:19 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Afunctions/</guid><description>前幾天總算把變數的部分有點寫得差不多了，但我知道根據我自己研究起來的資料還有很多很多可以探討的，但我也不想拿來騙鐵人賽的天數XD 所以算是寫了一個段落就告別一個階段。這是一個新的階段，就是來講講關於程式的函式，又可能稱為功能之類的，總之php是這樣寫的：
1&amp;lt;?php 2function sayHello($name){ 3 echo &amp;#39;hello, &amp;#39;.$name; 4} 5 6sayHello(&amp;#39;Jim&amp;#39;); #output: hello, Jim function 有點像是物件導向裡面的封裝，把你要跑的流程或者要使用的變數等等寫在一個區塊中，並且為這個區塊取一個名稱，而你只要呼叫這個名稱而且給予這個區塊可以處理的input就可以輸出經過這個區塊處理好的output或者要做的作為，在這個區塊中，你可以return也可以不return （但似乎有return會比較好）
function就是現實世界中我們遇到的數學函式，例如三角函數或者什麼幾元幾次方程式之類的，你代入某個數，就會出來一個結果。
Python的function也超簡單的
1def functionname( parameters ): 2 # ...statement... 請注意喔，Python的':&amp;lsquo;及縮排都極為重要，要放入statement 請縮排。在這裡我就做一個簡單示例吧！
1def sayHello(name): 2 print(&amp;#39;Hello ,&amp;#39;+name) 3 4sayHello(&amp;#39;Jim&amp;#39;) #Hello ,Jim</description></item><item><title>Python 起手式：dictionary</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Adictionary/</link><pubDate>Tue, 09 Oct 2018 13:54:18 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Adictionary/</guid><description>寫到這裡，真的覺得可以寫滿30天持續不間斷的真的超級強大的，我覺得自己快撐不住了。不過為了能夠學會Python，我仍然願意忍受工作的辛苦想耍廢之後，還是要繼續寫下去&amp;hellip;&amp;hellip; 同時，原本是想自己慢慢寫慢慢自己看的，沒想到居然有這麼多人訂閱這篇文。真是讓我受寵若驚，這也是我必須要繼續寫下去的理由。
Python 中也有一個資料型態，叫做“Dictionary”，有點像是php的 associative arraysphp 是這樣表示的：
1$age = array(&amp;#34;Peter&amp;#34;=&amp;gt;&amp;#34;35&amp;#34;, &amp;#34;Ben&amp;#34;=&amp;gt;&amp;#34;37&amp;#34;, &amp;#34;Joe&amp;#34;=&amp;gt;&amp;#34;43&amp;#34;); 而在Python當中，dictionary是這樣表示的
1age = {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37, &amp;#39;Joe&amp;#39;: 43} 2age[&amp;#39;Peter&amp;#39;] # 35 而dictionary 和 list一樣可以修改
1age[&amp;#39;Ben&amp;#39;]=38 2age # {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 38, &amp;#39;Joe&amp;#39;: 43} 3 至於dictionary的刪除或清空則需要這樣
1age = {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37, &amp;#39;Joe&amp;#39;: 43} 2del age[&amp;#39;Joe&amp;#39;] 3age # {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37} 4age.clear() 5age # {} 比較特別的是，dictionary可以轉換成string
1age = {&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37, &amp;#39;Joe&amp;#39;: 43} 2len(age) # 3 3str(age) # &amp;#34;{&amp;#39;Peter&amp;#39;: 35, &amp;#39;Ben&amp;#39;: 37, &amp;#39;Joe&amp;#39;: 43}&amp;#34; 4type(str(age)) # &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; 5type(age) # &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt; 6 其他操作</description></item><item><title>Python 起手式：淺談tuples</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87tuples/</link><pubDate>Mon, 08 Oct 2018 13:49:55 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87tuples/</guid><description>tuples 也是Python的資料型態之一，同屬於“列表”的一種。宣告方式如下
1&amp;gt;&amp;gt;&amp;gt; tuple =(&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;); 2&amp;gt;&amp;gt;&amp;gt; tuple 3(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;) tuple 同樣與list一樣可以放置不同的資料型態，唯一不同的是兩者的宣告方式一個是用小括弧;另一個則是使用中括弧。兩者最大不同之處就是tuple不能修改、新增，而list可以。
1&amp;gt;&amp;gt;&amp;gt; list = [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;] 2&amp;gt;&amp;gt;&amp;gt; list[0]=&amp;#39;c&amp;#39; 3&amp;gt;&amp;gt;&amp;gt; list 4[&amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;] 5&amp;gt;&amp;gt;&amp;gt; tuple=(&amp;#39;a&amp;#39;,0,2,&amp;#39;c&amp;#39;) 6&amp;gt;&amp;gt;&amp;gt; tuple 7(&amp;#39;a&amp;#39;, 0, 2, &amp;#39;c&amp;#39;) 8&amp;gt;&amp;gt;&amp;gt; tuple[0]=&amp;#39;b&amp;#39; 9Traceback (most recent call last): 10 File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; 11TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment 參考資料：
https://www.w3schools.com/Python/Python_tuples.asp http://itman2266.blogspot.com/2013/05/Python-tuple.html https://ithelp.ithome.com.tw/articles/10185010</description></item><item><title>Python起手式：探討lists</title><link>/posts/Python%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%8E%A2%E8%A8%8Elists/</link><pubDate>Sun, 07 Oct 2018 07:01:07 +0000</pubDate><guid>/posts/Python%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%8E%A2%E8%A8%8Elists/</guid><description>前面談到資料結構numbers 數字。今天來講講在程式語言當中很重要的list（我發現之前用collection 形容有點不太恰當，我會修改之前寫的文章！事實上在Python中有一個collection的module 誒～我鐵人賽又可以多一天來寫啦XD）
關於collection 可以參考：https://docs.Python.org/2/library/collections.html我想以後再找一天為這個部分做個小專題好了！
另外本篇文章我也是參考：https://www.tutorialspoint.com/Python/Python_lists.htm
在現實中，我們也是有這種list的概念。像是班級的學生名冊、或者成績風雲榜、排名等等，就是那種以“串”為單位的資料型態。在php當中，就是array ,也是程式語言中常稱呼的「Array」(陣列)注意：Python 沒有 array
在Python中，list宣告很簡單
1&amp;gt;&amp;gt;&amp;gt; list = [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;] 2&amp;gt;&amp;gt;&amp;gt; print(list) 3[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] 用[]作為宣告的符號，包住你想要包的資料，資料與資料以,作為區隔 而list 可以變化他的值，其中有 insert 、append、或者index等等方法&amp;hellip;.你可以任意運用以下我謹以程式碼帶過操作：
1&amp;gt;&amp;gt;&amp;gt; list= [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;] 2&amp;gt;&amp;gt;&amp;gt; list 3[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;] 4&amp;gt;&amp;gt;&amp;gt; type(list) 5&amp;lt;class &amp;#39;list&amp;#39;&amp;gt; 6&amp;gt;&amp;gt;&amp;gt; list.append(&amp;#39;e&amp;#39;) #將元素放到list的最後 7&amp;gt;&amp;gt;&amp;gt; list 8[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;] 9&amp;gt;&amp;gt;&amp;gt; list.count(&amp;#39;a&amp;#39;) #這個元素在list有幾個 101 11##值得一提的是如果要知道list裡面有幾個元素不可以用count(),count裡面一定要有參數，你可以使用len(list) 12&amp;gt;&amp;gt;&amp;gt; len(list) 135 14&amp;gt;&amp;gt;&amp;gt; list.insert(0,&amp;#39;a&amp;#39;) #你也可以宣告index(list index以0為開頭)，然後插入元素，不過在那個index之後的元素將會都往後移。 15&amp;gt;&amp;gt;&amp;gt; list 16[&amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;] 17&amp;gt;&amp;gt;&amp;gt; list.</description></item><item><title>Python 起手式：淺談 numbers</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87-numbers/</link><pubDate>Sat, 06 Oct 2018 00:42:04 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87-numbers/</guid><description>原本想說變數與型態得部分一天寫完就好，但昨天整理了一下發現原來Python 的型態博大精深，有發現到另外自己以前在玩轉Python沒有注意的細節。（說真的有時候寫Python也很少會注意到這些細節，反正就是要寫什麼查什麼，出了錯自己debug&amp;hellip;）
鐵人賽的好處就是為了要給別人看，所以你必須要好好整理、你寫的文章說的話都要是True，不可以隨便唬弄人，也藉著這個機會也是好好為自己學習的Python做出整理。
放心，Python的變數不會拖太久，我預計就特別在拉出來講numbers以及collections 就好，文字與boolean因為是蠻簡單的型態，上網查的時候也沒有發現什麼特別的點，所以就不繼續著墨這裏。(20181007更：我發現用collections 稱呼非常不恰當，所以我決定直接以list、tuple和dictionary 稱呼並逐天深入了解介紹)
Numbers 有三種 numbers就是我們現實生活中常用到的數字，舉凡整數、正整數、負數以及小數等等&amp;hellip; 為了確保自己在numbers的理解沒有問題，我特別參考了官網對於numbers的教學：https://docs.Python.org/3/tutorial/introduction.html#numbers
numbers 有三種
int float complex 簡單來說，Python的numbers 就是可以加減乘除的，同時也支援我們現實的四則運算。
1&amp;gt;&amp;gt;&amp;gt; 1+1 22 3&amp;gt;&amp;gt;&amp;gt; 1+5*6 431 5&amp;gt;&amp;gt;&amp;gt; (1+5)*6 636 7&amp;gt;&amp;gt;&amp;gt; type(1+1) 8&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 9&amp;gt;&amp;gt;&amp;gt; type(1+5*6) 10&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 11&amp;gt;&amp;gt;&amp;gt; type((1+5)*6) 12&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 整數 int 這個型態最簡單了，就是1到9和0，現實世界中的正整數、負整數和0要宣告負整數很簡單，像現實世界當中加個-就好
1&amp;gt;&amp;gt;&amp;gt; -1 2-1 3&amp;gt;&amp;gt;&amp;gt; type(-1) 4&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 5&amp;gt;&amp;gt;&amp;gt; type(0) 6&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 7&amp;gt;&amp;gt;&amp;gt; type(15) 8&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 小數/浮點數 float float就是現實遇到的小數，只要你用.符號就可以囉
1&amp;gt;&amp;gt;&amp;gt; 1.5 21.5 3&amp;gt;&amp;gt;&amp;gt; type(1.5) 4&amp;lt;class &amp;#39;float&amp;#39;&amp;gt; complex 這東西有點複雜，我自己也不是很能理解，由於工作的關係也鮮少使用到這個型態。意思是除了純數字及符號以外你還可以加入一些虛數，參考網址：http://www.</description></item><item><title>Python 起手式：來談談變數與型態</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E4%BE%86%E8%AB%87%E8%AB%87%E8%AE%8A%E6%95%B8%E8%88%87%E5%9E%8B%E6%85%8B/</link><pubDate>Fri, 05 Oct 2018 15:14:27 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E4%BE%86%E8%AB%87%E8%AB%87%E8%AE%8A%E6%95%B8%E8%88%87%E5%9E%8B%E6%85%8B/</guid><description>有許多人說，程式＝資料結構＋演算法，這句話確實沒有錯，前面我們說到演算法的部分、現在來談談“資料結構”的部分
一般來說我也不會特別去整理他，是因為今天要寫鐵人賽所以特別花時間整理一下。以免自己有漏掉或寫錯的部分（其實前面幾天也是邊查邊寫啦！不知道有沒有人也是這樣子？會不會很不專業哈哈，每支程式片段還是會花一段時間確認執行過程與執行結果。以免自己有說錯的地方）我參考自：https://www.w3schools.com/Python/Python_variables.asp
前面談到程式語言的控制流程，也就是control flow，以及如果再control flow中出錯需要做的Error Handling. 我想我應該是少數幾位把control flow和exception 放在前面寫的作者吧ＸＤ 其實正常來說，綜觀程式教學書都先是變數與型態先教再說&amp;hellip;
變數 變數其實就放放置的名稱&amp;hellip; 恩&amp;hellip;用一行程式說明比較快
1a=6 說明：這裏的‘a’ 就是我說的變數啦！Python的變數宣告很簡單，只要是文字就好（然後意外試過中文也可以喔&amp;hellip;但非常不建議這樣做）
1變數=5 2print(變數) #Output 是5 然後根據上面我提供的參考網址Ｗ3C 有提供很清楚明確的命名變數規則：
變數必須以字母或者文字或者_作為開頭及組成變數名稱的元素而已，不可以用其他的例如數字為開頭(ex. 1a, 2b 這種都是不會通過的變數名稱) 不可以使用Python原本有的保留字或關鍵字 (ex. class之類) 變數的名稱大小寫敏感(ex.CLASS雖然是保留字卻可以當變數、a 和Ａ是不一樣的啊) 關於Python保留字的部分不想上網查的話就直接用程式查一下吧(我也是剛剛才知道的呢ＸＤ)
1import keyword 2print(keyword.kwlist) 3&amp;#39;&amp;#39;&amp;#39; 4[&amp;#39;False&amp;#39;, &amp;#39;None&amp;#39;, &amp;#39;True&amp;#39;, &amp;#39;and&amp;#39;, &amp;#39;as&amp;#39;, &amp;#39;assert&amp;#39;, &amp;#39;break&amp;#39;, &amp;#39;class&amp;#39;, &amp;#39;continue&amp;#39;, &amp;#39;def&amp;#39;, &amp;#39;del&amp;#39;, &amp;#39;elif&amp;#39;, &amp;#39;else&amp;#39;, &amp;#39;except&amp;#39;, &amp;#39;finally&amp;#39;, &amp;#39;for&amp;#39;, &amp;#39;from&amp;#39;, &amp;#39;global&amp;#39;, &amp;#39;if&amp;#39;, &amp;#39;import&amp;#39;, &amp;#39;in&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;lambda&amp;#39;, &amp;#39;nonlocal&amp;#39;, &amp;#39;not&amp;#39;, &amp;#39;or&amp;#39;, &amp;#39;pass&amp;#39;, &amp;#39;raise&amp;#39;, &amp;#39;return&amp;#39;, &amp;#39;try&amp;#39;, &amp;#39;while&amp;#39;, &amp;#39;with&amp;#39;, &amp;#39;yield&amp;#39;] 5&amp;#39;&amp;#39;&amp;#39; 相較於php變數宣告要用'$&amp;lsquo;字開頭（自然就沒有保留字和大小寫敏感問題啦ＸＤ），這點應該php就勝過了吧?</description></item><item><title>Python 起手式：Error Handling-以猜數字遊戲為例</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Aerror-handling-%E4%BB%A5%E7%8C%9C%E6%95%B8%E5%AD%97%E9%81%8A%E6%88%B2%E7%82%BA%E4%BE%8B/</link><pubDate>Thu, 04 Oct 2018 12:52:05 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Aerror-handling-%E4%BB%A5%E7%8C%9C%E6%95%B8%E5%AD%97%E9%81%8A%E6%88%B2%E7%82%BA%E4%BE%8B/</guid><description>Python同樣與其他語言一樣，也有他的Error Handling, 什麼是Error Handling呢？程式有輸入也有輸出，還有控制的過程，但萬一在過程當中出錯了怎麼辦？就像郵局從寄信方收到信件、最後要經過處理、透過郵差送信給收信方，在這樣繁複的過程中，有可能會出現一些問題而導致收信方收不到信件。
對於程式本身，有哪些地方會出錯呢？這裡我以短短幾年工程師生涯所遇到的雷來談談～ 程式本身沒有錯，錯的是撰寫程式的人XD（好悲催～） 好啦！這也就是我們工程師存在的價值啦！沒有人能夠一定保證程式永遠都不會出錯～ Garbage in Garbage out，使用者習慣與環境千千百百種，都會有可能有當初撰寫程式者沒有預期到的輸入，況且，在軟體工程界當中：「沒有不變的需求」，可能這一段時間他可以完全無誤地跑，但有可能以後時間長了或者增加了新需求後，就不能跑了&amp;hellip;
還有啊，有時候也不見得是程式撰寫者及程式本身的錯誤，在寫程式的過程當中，有時會呼叫外部的函式庫或外部的API，這有時也不是你的錯，但就這麼剛好他回傳或者你送出的就不是你所期待的，那麼就會噴錯了。
為了解決當程式面對這些error可以仍持續地執行下去。你就一定要有error handling，以確保使用者不會“驚嚇”到
關於Python的error handling 敘述如下
1try: 2 {statement area} 3catch (error type),(value): 4 {error handing} 5else: 6 { statement area continue...} 7finally: 8 {finally area} 說明：
在Python界當中，縮排和:很重要！請務必注意！ 而catch後面的 error type和value 不一定要加，你也可以單純的’catch:‘這樣一行帶過
至於error type你可以參考這個網址 else 則是當try所包的statement無誤的時候會執行的。
最後finally子句就是無論try或有沒有取得exception,都會執行的區域，php同樣也有類似finally的敘述。
以昨天寫的猜數字小遊戲為例子，可能出錯的就是input那一塊，因為input是由使用者輸入的，萬一使用者輸入的不是數字怎麼辦呢？同時，我們也加入可以計算你猜數字的次數需求。
所以會改成底下這個樣子：
1import random 2ans = random.randint(0,10) #取從1到10的亂數 3times = 0 4print(&amp;#39;請猜一個0~10的數字&amp;#39;) 5play = True 6 7while(play): 8 try: 9 guess = int(input(&amp;#39;來隨便猜一個數字吧: &amp;#39;)) #input出來預設為str，轉型為int 10 except: 11 print(&amp;#39;程式出現非預期的錯誤，遊戲結束，答案是&amp;#39;+str(ans)) 12 #str()是將數字轉文字，&amp;#39;+&amp;#39;串接的必須是同樣的型態。 13 play = False 14 else: 15 times = times+1 #每猜一次就要+1 16 if (guess &amp;gt; ans): 17 print(&amp;#39;喔你猜得太大囉&amp;#39;) 18 elif (guess &amp;lt; ans): 19 print(&amp;#39;喔你猜得太小囉&amp;#39;) 20 else: 21 print(&amp;#39;恭喜你猜對了！&amp;#39;) 22 play = False 23 finally: 24 print(&amp;#39;你猜了&amp;#39;+str(times)+&amp;#39;次&amp;#39;) 說真的，我寫程式也很少寫error handling，我也是邊查資料邊寫邊做的。如果有錯誤或者要補充的歡迎來指教及提醒。 參考網址</description></item><item><title>Python 起手式：總是要有control flow！</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B8%BD%E6%98%AF%E8%A6%81%E6%9C%89control-flow%EF%BC%81/</link><pubDate>Wed, 03 Oct 2018 14:09:29 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B8%BD%E6%98%AF%E8%A6%81%E6%9C%89control-flow%EF%BC%81/</guid><description>前言 昨天展示了超簡單input和output的小程式，如果程式只是in and out ,那麼有什麼好繼續學的呢？當然啦，garbage in ,garbage out，如果丟程式非預期的輸入，當然程式輸出就是各種error或垃圾啦！程式的厲害之處及關鍵就是在於他的演算法，演算法你可以理解為“做事情的方法”，做事情、總是會有一套流程與一連串的動作，而在這樣的流程與動作中，我們可以分類一些路徑，在這裡我們稱之為「control flow」(控制流)
control flow 分為兩個：條件和迴圈
Python的註解方法 ㄧ開始，我應該要先介紹註解，哈 昨天就應該先寫的～
註解是一個程式撰寫上的說明，你可以使用它向下次要看你程式的人（或者也可能也是你自己）說明你這段要寫的內容、可能怎麼運用、或者提醒什麼注意事項。
1//這是單行註解用法 2&amp;#39;&amp;#39;&amp;#39; 3這是多行註解用法 4&amp;#39;&amp;#39;&amp;#39; Python的條件敘述 Python的條件敘述表示如下（此為虛擬碼-一個不是正式程式碼的表示法）
1if (boolean exp1): 2 #statementsA... 3elif (boolean exp2): 4 #statementsB... 5else: 6 #statementsC... 說明：
在Python 中，縮排是一件非常重要的事情，有點像是php的{} ，所以Python就是一種強迫你排版的程式語言（誤！
exp 是運算式，在if 和elif 用括弧把它包起來，而exp將會輸出true 或false ,就是現實中的對還是錯，如上面虛擬碼所示，如果exp1 是對的就會走statementsA;exp2是對的就會走statementsB;兩個都錯的話就走statementsC，對了 如果只有一個條件的話只要寫if&amp;hellip;else 就好，elif的區塊可以省略。還有，else 是代表前面的敘述式都沒有對的話，最後才走的流程。
關於條件敘述你可以參考這個維基資料 注意if、elif、else 後面要加上： Python 沒有switch&amp;hellip;case的敘述喔，相關資料以及要實現的可以參考此網址 Python的迴圈敘述 1# 1) 2for i in range(start,stop,step): 3 #statements 4# 2) 5while (exp): 6 #statements 說明:</description></item><item><title>Python 起手式：寫個Hello World吧！</title><link>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E5%AF%AB%E5%80%8Bhello-world%E5%90%A7%EF%BC%81/</link><pubDate>Tue, 02 Oct 2018 13:45:22 +0000</pubDate><guid>/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E5%AF%AB%E5%80%8Bhello-world%E5%90%A7%EF%BC%81/</guid><description>安裝Python 工欲善其事，必先利其器！ 要學習寫Python，當然就是要先安裝Python啦！
首先，你要先安裝Python，這裡我就不贅述了，你首先要去[https://www.Python.org/] 找到可以downloads 這裏找到你目前用的作業系統適合的安裝檔，下載後執行它，按照畫面的提示一一去安裝～ 這樣就可以囉！
然後請打開你任何一種的command line，無論是windows 的命令提示字元還是mac os 的terminal 或者zsh (我個人是使用zsh 啦)，key 上
1python3 --version 接下來如果你看到有個Python 的字樣後面接版本號，那就表示：我們可以開始寫Python囉！
使用文字編輯器和Python的IDLE 你可以選擇vs-code、或是subl 甚至是記事本也可以，來撰寫你的Python程式。
我這裏通常用的都是vs-code, 而這裡，你也可以在command line 裡打上Python3，進入Python的Shell，有點像是下圖：
有點像是laravel 的artisan tinker 或者 php -a 或者ruby 的irb呢！Tips:如何離開這個IDLE呢？ 打上exit()就可以!
HelloWorld 程式 好了，我們可以開始寫Python程式了，請再任意一個目錄之下，創造一個名為helloworld.py的檔案（Python的執行副檔名基本上都是以py為結尾），然後放入
1print(&amp;#39;hello world&amp;#39;) 然後，回到你放helloworld.py的目錄之下，使用
1python3 helloworld.py 一下子，你就會看到這個hello world這個字樣了
當然爾，你也可以使用Python的Shell，那更為簡單，就是直接打下print(&amp;quot;helloworld&amp;quot;)就可以直接看到hello world啦！
寫個問答小遊戲 如果只是一個hello world 真的還不是很夠味，所以就來寫個簡單的小問答，程式之所以叫做程式就是有input，也有output，所以，我們來寫個可以輸入些東西，然後也會輸出點東西的小程式
1ans = input(&amp;#39;what is your favorite programming language? &amp;#39;) 2print(&amp;#39;your favorite programming language is &amp;#39;+ ans) 說明：
Input 是一個小函數，他可以接受從command line輸入的任何文字，ans 這個變數接下input所收到的輸入，最後用print 把它印出來，在Python中，文字串接就只要用'+&amp;lsquo;就可以了！ 執行結果如下圖</description></item><item><title>Python 第一天：廢話的前言</title><link>/posts/Python-%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%9A%E5%BB%A2%E8%A9%B1%E7%9A%84%E5%89%8D%E8%A8%80/</link><pubDate>Mon, 01 Oct 2018 12:59:36 +0000</pubDate><guid>/posts/Python-%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%9A%E5%BB%A2%E8%A9%B1%E7%9A%84%E5%89%8D%E8%A8%80/</guid><description>人生總會有第一次，人生第一次參加鐵人賽！不知道最後是否可以完賽哈哈
我是一個php方面的偏後端工程師，資歷大概也才短短的兩三年，在工作時偶爾也會碰到javascript、HTML和小小討厭的css，所以能夠和Python有個連結，真的是純屬意外！ 而目前很可惜在工作中也鮮少使用Python，關於Python的更深學習與體會都是日後自己在以前學生＆下班業餘時間自學以及拿來玩樂的語言。
雖然現在有這麼多對手出來，尤其是“Go”，但不知道為什麼我還是對Python情有獨鍾，甚至有時會想，到底可以將Python練到怎麼樣的程度可以去應徵Python相關職業呢？Python 可以涵括網頁、爬蟲、機器學習與大數據，幾乎能包的都可以包，或許是這樣，我選擇Python作為主題，當作一個正式學習的起點
當初遇到這個語言是因為，我那時候打了一個關鍵字「如何當駭客」，後來有文章指出當駭客有個前提就是要學會Python!於是就邊玩邊做、邊學邊玩的馬馬虎虎學習這份程式語言。結果駭客沒當成，倒作了一位網頁工程師？！就是主要寫php，但“偶爾”也會被要求要看一下mysql、弄弄html\css\js的“假全端”工程師
工作後，在空閒之餘，發現有些工作的需求實在沒有必要常常重複在做，於是將有些簡單的小動作程式化，自行開始一個小小side project：office ，這專案全部都適用Python撰寫，可能有些在現在還可以用、有些可能工作沒用到也隨之廢棄了，但這確實帶給我對於Python有著更深的認識與操作，也驚訝於它的強大
我是超新手，如果你是高高手的話而且也看到我文章的錯誤，請不用客氣，盡情地指出我的錯誤吧！ 希望未來在Python工作界，我們可以有機會相互切磋！</description></item></channel></rss>