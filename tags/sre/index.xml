<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SRE on Jimmy 's Code</title><link>https://jimmycode.tw/tags/sre/</link><description>Recent content in SRE on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022 Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sat, 20 Mar 2021 04:29:00 +0000</lastBuildDate><atom:link href="https://jimmycode.tw/tags/sre/index.xml" rel="self" type="application/rss+xml"/><item><title>原來可以這麼寫(11): 每個人的心中都要有DevOps</title><link>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB11-%E6%AF%8F%E5%80%8B%E4%BA%BA%E7%9A%84%E5%BF%83%E4%B8%AD%E9%83%BD%E8%A6%81%E6%9C%89devops/</link><pubDate>Sat, 20 Mar 2021 04:29:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB11-%E6%AF%8F%E5%80%8B%E4%BA%BA%E7%9A%84%E5%BF%83%E4%B8%AD%E9%83%BD%E8%A6%81%E6%9C%89devops/</guid><description>最近工作比較沒有什麼新鮮事，所以開始在將手上專案有比較完整的文件化之後，開始逐步導入TDD ,寫一些Unit Test 以確保程式碼的品質。
但老實說：我還是不是太懂Laravel Feature 和 Unit 這兩個資料夾的區別？我知道Unit 是要做單元測試，是測試那個類別的行為，但我目前大多都在寫Feature Test&amp;hellip; 如果有大大知道Unit 該在何時寫、什麼情境下要寫，歡迎不吝賜教！
研究Socket/API Gateway 因為要導入官網購物車購買，討論一連串的流程與討論，最後希望我Laravel 要開一個socket server，但研究的結果其實發現 因為我們專案的版本比較低，所以沒辦法使用Laravel-Websocket 套件，也就是在Laravel 裡面自己開socket server 那種，變成我們要另外用Node 的套件去建立&amp;hellip; 然後&amp;hellip; 又衍伸第二種方案，在AWS Api-gateway 架起websocket api ，然後他可以指定動作去call API&amp;hellip;
這個方案很好玩&amp;hellip; 不過在研究初期卡關在怎麼用Laravel 取出 connectid , 因為AWS example 是用Node 的Lambda 去串的，很簡單就取出connectid&amp;hellip; 。我Laravel 怎麼print request 的body 還是 header ，顯然就是找不太到那個connectid &amp;hellip;
後來實在有點卡太久了(大概一天)，被同事叫我去寫AWS Support XD
人生第一次寫AWS Support 耶，然後AWS 團隊真的很用心很貼心，告訴我很詳細的步驟及方法、解決方案，原來，如果要讓Laravel 的 後端讀得到 connectid ，是要透過CLI 去設定啊&amp;hellip; (目前API gateway 控制台還沒有支援這個)，不然就是需要把integration type 改成 HTTP ，去寫 request template 這樣。</description></item><item><title>網站可靠性工程工作手冊導讀會一遊</title><link>https://jimmycode.tw/posts/%E7%B6%B2%E7%AB%99%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8A%E5%B0%8E%E8%AE%80%E6%9C%83%E4%B8%80%E9%81%8A/</link><pubDate>Sat, 12 Dec 2020 13:35:43 +0000</pubDate><guid>https://jimmycode.tw/posts/%E7%B6%B2%E7%AB%99%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8A%E5%B0%8E%E8%AE%80%E6%9C%83%E4%B8%80%E9%81%8A/</guid><description>最近工作上沒什麼事，可能是快要尾牙了吧？雖然一樣很多新需求、新功能追著我跑，不過每天都還算充實快樂，只是要努力的試著學習怎麼克服溝通這門學問
於是乎，最近就常常十二月排了一些活動，像是這次天瓏書局協辦由江少傑（之前Yahoo 的工程師）帶了一場「網站可靠性工程工作手冊 」的導讀會兼簽書會(笑，技術書籍也搞這個簽名會啊&amp;gt;&amp;lt;)
基礎、基礎、還是基礎 原本從我們公司到天瓏書局很遠，光是六點準時下班都還是預計會遲到。中間我稍微跑了一下，發現還真的遲到了幾分鐘&amp;hellip;不過還好，工程師們也都是忙碌的，因此活動還沒開始！
作者前面一直講很多翻譯的甘苦談、出版社的困境、現在技術學習的方式與以前不太一樣甚至談到教育與人生&amp;hellip;哈哈，阿還有在Yahoo的工作等等，但我心裡想：我來不是想聽這些的啊&amp;gt;&amp;lt;
不過講者也在過程中其實也算導讀一些東西啦，有點發散，大概我比較有印象的關鍵如下：
Agile , CI/CD , Scrum , Test 其實這幾個都互相關聯與奠基著，穩定與速度也互相關聯著。為什麼我們的軟體專案會失敗，其實就是不知道這中間許多的細節與關聯、盲目的導入只是帶來更多的坑 一次只上一點點的改變，而不是一大包放上去，這才是CICD的做法、也是為什麼要自動上版的原因（想到我們公司CICD顯然就與這樣的想法背道而馳，而且還沒有測試，希望在我任內能將其補齊！） 團隊之間必須要有「信任」，「信任」很重要，然後也讓我想到我在看這本書剛開頭也講到所謂的「不究責」的文化，這帶給我蠻大的提醒，我們不是要來抓戰犯、而是要共同一起解決問題、處理問題啊！ 這本書是一種案例研究，如果你企圖將書上講的方法都硬套在你的公司上，那只會帶來失敗，你應該要認真好好的認識與理解你們公司的domain , 學習到本書各案例背後的精神與概念，帶去case by case 解決你們公司的問題 我問的問題 在會後，我問了幾個很笨的問題
如果沒有讀過第一本書（網站可靠性工程：Google的系統管理之道 ），在看這本書會有點看不懂嗎？ 譯者回答，基本上應該是不會的，甚至可以直接看這一本也無所謂，就當成是案例研究，他也建議可以看第一本的內容互相對照，網路上也有免費的英文版可以看呢！
做Developer不是SRE的角色，能看懂這本書嗎？ 譯者說，不會，而且開發者也應該也要試著看看這本書，學習與他人「溝通」&amp;hellip;是蠻重要的等等，旁邊也有一個工程師也說到看得懂（看起來也是他的好朋友或社群夥伴吧？！）
剛開始讀這本書 我目前才剛看一點點而已，不過就有幾個概念對我蠻有所突破的。例如我們不該追求什麼「百分百可靠度」、也了解DevOps ＆ SRE的不同、上面說到不究責的文化等等&amp;hellip;
如果對這本書有更進一步的資訊可以參加FB的社團，在FB搜尋書名就可以看得到～
小君曰：DevOps也是一門學問呢但也是一種文化！！我也正在努力的學習中</description></item></channel></rss>