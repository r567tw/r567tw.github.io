[{"categories":["larvel"],"content":"前言 好的工程師通常對於自己的 code 會有所在意，並思考著如何能讓程式碼更讓人好懂,好閱讀。 以及通常團隊裡也會有統一的coding-style。\n在 Laravel 9 之後有個套件我覺得很有趣，它就在某個程度上就解決了這個情境 個人認為蠻值得簡介一下，叫做 Laravel Pint。\n安裝 首先, 我們先安裝這個套件。\ncomposer require laravel/pint \u0026ndash;dev\n安裝完之後，你就可以使用./vendor/bin/pint這個指令了。\n取得版本 1vendor/bin/pint --version 客製化 在文件裡指出，coding-style 可以被客製設定。在root 目錄建立一個叫做pint.json的檔案即可。 裡面的內容則是\n1{ 2 \u0026#34;preset\u0026#34;: \u0026#34;laravel\u0026#34; 3} 這樣它就會設定 laravel 為這個專案的固定 coding-style。 如文件說明，你也可以客製底下的rule 來處理。\n如果想要看的更多可以參考這裡：https://laravel.com/docs/9.x/pint\n小君曰：如何成為一個好的工程師永遠是我人生上的一大哉問。\n","date":"Aug 2, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-pint/","series":null,"smallImg":"","tags":["laravel package"],"title":"Laravel Pint 簡易教學"},{"categories":["Side Projects"],"content":"前言 我其實是一個不太喜歡苦工的工程師，我很喜歡用程式解決我個人的生活問題。自動化最棒了！\n之前有個想法希望可以買黃金，剛好看到github action 有所謂的schedule 的選項，於是我就有個大膽的想法：不如就讓line 來通知到要準備買黃金拉\n專案開發 原本他只是個簡單的黃金買賣通知，結果到最後我把他寫成通知天氣預報、股票等買賣的決策系統通知了XD\n或許之後還可以有更多細緻化的設定，反正他就是個超簡單的side project, 技術基於 line notify, github action 及 python。黃金、天氣與股票各由負責的python script 處理，算是有點為服務的feel 吧？\n如果以後line notify 壞掉了怎麼辦？ 其實就把helpers/notify.py裡面的程式調整修改就好了，這個side project 最最最核心的程式應該就是他了，其他服務都是有各自的實作之後呼叫這裡的function 去 line notify 通知我。\n1import os 2import requests 3 4def send(message): 5 token = os.getenv(\u0026#34;TOKEN\u0026#34;) 6 notify_url = \u0026#34;https://notify-api.line.me/api/notify\u0026#34; 7 8 requests.post( 9 notify_url, 10 headers={\u0026#39;Authorization\u0026#39;: \u0026#34;Bearer {}\u0026#34;.format(token)}, 11 data={\u0026#34;message\u0026#34;: message} 12 ) line notify 這個服務有夠簡單，其實就是簡單發出個POST request 就好，然後你可以去 line notify 的頁面 申請token就好。\ngithub action 就是簡單寫一下 yaml ，我以我最自豪的黃金為例\n1name: gold-notify 2on: 3 schedule: 4 - cron: \u0026#39;30 3 * * 0-4\u0026#39; 5jobs: 6 build: 7 runs-on: ubuntu-latest 8 steps: 9 - name: checkout repo content 10 uses: actions/checkout@v2 # checkout the repository content to github runner. 11 - name: setup python 12 uses: actions/setup-python@v2 13 with: 14 python-version: 3.8 #install the python needed 15 - name: install py package 16 run: pip install -r requirements.txt 17 - name: execute py script # run the run.py to get the latest data 18 run: python gold.py 19 env: 20 TOKEN: ${{ secrets.TOKEN }} 21 GOLD_BUY: ${{ secrets.GOLD_BUY }} 22 GOLD_SELL: ${{ secrets.GOLD_SELL }} 其實上網查就有發現到有人寫好執行python的github action, 你只要照抄其實就可以給他執行起來。而在on 裡面規劃一下schedule，其實就有點像是個人助理的感覺，line notify 在一定的時間可以通知訊息給你。\n結果與影響 我順利在低點購買到黃金，然後最近俄烏戰爭開打黃金上漲。我賺到一波真棒\nPS. 原本這個專案只是叫什麼gold-notify 之類的，但為了中二，我把他取名成jarvis 哈哈哈\n小君曰：來喔，歡迎大家拿這個idea \u0026amp; project 去做成你們自己的 jarvis 吧\n","date":"Jul 2, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/jarvis/","series":null,"smallImg":"","tags":["line notify","github action"],"title":"開發個人助理Jarvis"},{"categories":["工作筆記"],"content":"每一週我們公司都會有固定的技術分享會，其實我很喜歡這樣的分享。 然而可能是自覺在公司發展空間有所被受限之下、我好像有點失去分享的熱情與積極\u0026hellip;。\n最後是主管有點對我生氣之下，我才有點擠出一個主題，剛好我們部門最近在推行一個「快速架站」服務，使用到wordpress (天那，我怎麼到哪裡都可以遇到你ＸＤ)。事後想想，我是真的應該要在積極認真一下啊！\n於是想到這個可以分享過去在我經營wordpress網站時期，曾經學習到的小東西：wordpress REST API。\n簡單他就是一個Wordpress推出的api框架，甚至在簡報內也分享怎麼使用plugin 去擴充它。\nhttps://docs.google.com/presentation/d/1MIyX72XxbYfEI2ZDpuL8pe9VUhsC-AFRco7PEdtnipY/edit?usp=sharing 不過在這個專案開始以前，我發現到一個很不錯的部落格：https://oberonlai.blog/\n因為他，讓我覺得wordpress 開發其實也是可以很專業的！ 當作分享一下資源讓更多人看到囉～\n小君曰：到哪裡都遇到 wordpress\u0026hellip;\n","date":"Jun 19, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB18-Wordpress%20API/","series":["原來可以這麼寫"],"smallImg":"","tags":["wordpress"],"title":"原來可以這麼寫(18): Wordpress API"},{"categories":["工作筆記"],"content":"本篇有點類似一些心情的抒發與隨想， 年初其實曾經提過離職，可能剛好那時候專案正值升級的工作，將Laravel從5.5升到9，然後加上自己有時候個性還蠻「優柔寡斷的」，於是那時候答應留任。(由此看來一旦我決定了其實就是對專案會是負責到底 呵呵)\n但現在回來看看自己這個決定，是覺得有點小後悔的\u0026hellip;目前我剛好處於感受不到專案目標、對專案失去耐心與熱情的一種狀態，老實講也不確定之後換工作是否還有可能遇到這種感覺，說實在是蠻迷茫的\u0026hellip;由此，我衷心佩服那種做10~20年的大齡工程師，我這短短幾年的經驗、在他們面前簡直小巫見大巫哈哈哈。\n不過，如果我願意的話，我應該還是能從我目前的專案找到熱情、找到很多可以發揮的空間吧\u0026hellip;只是，喪失熱情的理由不會只有在專案的程式碼之下的層級，可能會是專案程式碼上更多的方面。\nLaravel 5.5 升級到 Laravel 9 老實說在這升級過程中我是沒有遇到什麼太大狀況，有一個是登入的問題，我後來發現是調用的某個套件新版本還沒有支援，於是就在composer.json 對該套件先進行一個版本的鎖定，除此以外我是都按照文件的指引去操作、有些已經有的套件或沒有在支援的套件就趁這個機會給他換掉了，像是原本我們有用一個cors套件、但 laravel 8 之後其實已經有自己的cors了，所以就換成laravel 原生的這樣。以下算是我升級的小筆記，有點亂、反正是給自己看的 哈哈XD\nhttps://hackmd.io/@r567tw/Bk_Mo_0aY 然後感謝自己任內試著導入單元測試，所以可以很輕鬆且感覺被保護的執行 phpunit去一定程度上保障我的api沒有問題。 然後也在此次升級利用lighthoust套件把graphql放上去～不過我是覺得我們之前雖然技術會以及私下和主管討論都認同可以導入graphql，但我大概也知道，如果前端團隊沒有相對應或有意識得想導入想改，似乎這就是我個人的一廂情願。在這段時間，我思考了蠻多的，總覺得我這樣是不是做錯了?!\n從今以後，我要好好確定團隊的共識或確認有團隊的支持才真的下去做才對\u0026hellip; 我想我這個算是留給後人一個可以發展的機會吧?!\n1000元的職涯諮商 我覺得104真的事業越做越大了，我在104發現他們有個服務：104高年級 。然後在裡面找到一位Joan老師 ，和他預約了一場職涯諮詢，和他請教一下所謂的「人生四階段職涯規劃指南：給20/30/40/50的你」。實不相瞞，不愧是只有一千元的諮商，我覺得有些其實我自己都知道XD個人感覺助益感覺沒有很大。\n算了，一千元我又不是花不起，就當做捐給104當業績拉。\n也或許我提的題目不太好、可能我自己也沒有整理好吧？我也知道30歲前其實都可以跳來跳去、但總覺得應該要找到個穩定的地方？試想如果我是老師，我也不可能直接告訴你你該不該繼續穩定在你現在這個公司。\n不過在諮商的過程Joan老師也是認同我可以出去面試看看、出去外面看看衡量一下自己的身價。。。。。。\n面試總是讓人感覺有點累，究竟一個人應該要換幾次工作才夠呢？為什麼我快到30歲還這樣迷迷惘惘呀？\n希望自己40歲回來看看現在的自己，會連續數聲笑笑自己、笑自己怎麼那時那麼好笑、然後坦然處之。\n「Don\u0026rsquo;t prove yourself, improve yourself.」\n分享一首歌吧 以前我寫文章的風格通常都會後面分享一首歌的說，但現在建立這種技術部落格之後都是一堆理科專有名詞與筆記，實在不太適合我之前寫文章分享音樂的tone調。但這篇可以破例一下吧。讓我點一首「天淵之別」給今晚的自己吧！\nhttps://www.youtube.com/watch?v=47Nq2lIqW_I 「走每一步 我也不服輸」\n小君曰：Change Company Again, or change company again\n","date":"Jun 10, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB17-%E5%85%B6%E5%AF%A6%E6%88%91%E5%8F%88%E6%83%B3%E9%9B%A2%E8%81%B7/","series":["原來可以這麼寫"],"smallImg":"","tags":["心情"],"title":"原來可以這麼寫(17): 其實我又想離職"},{"categories":["筆記"],"content":"Pragmatic Programmer 他談很多題目，裏面也談到很多如何寫程式的廣泛技巧，例如第一篇我們談到的正交性, 以及知識資產的部分。未來可能我也會陸陸續續分享他各種不同的篇幅與個人領悟。\n這次我想要分享他其中一個篇章：需求坑。\n做軟體工程師越久，就越覺得這個小篇章所講的有感。我們常常把客戶的“第一次需求”當真，並且就一頭埋入實作它的解決方案。\n這種最初的需求並不是真正的需求。客戶可能本身沒有意識到這一點，但其實這種需求是一種邀我們去進一步探索的邀請 如同這本書定義需求是一種過程，是藉由一次又一次的回饋當中循環暸解的。\n另外有感而發的是：之前網路上看到某粉專寫道的一句話\n有時候我們在實作處理需求時，或許不要總是陷入一定要寫很多程式碼。有的時候不用寫程式的解決方案可能比寫一堆程式碼會是更佳優秀、適合的解喔\n小君曰：less code, more better\n","date":"Apr 30, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note2/","series":["Pragmatic Programmer"],"smallImg":"","tags":["閱讀","Pragmatic Programmer"],"title":"Pragmatic Programmer：需求坑"},{"categories":["筆記"],"content":" Pragmatic Programmer 有談工程師的學習(知識資產)，我覺得蠻有趣的，可以記錄看看 在這個小篇章，我最有印象的是這句話： 管理知識資產與管理金融資產非常相似 像是你管理金融資產會注意以下幾點：\n定期投資(固定時間有週期的學習、調整) 多元化(不要把雞蛋放在同一個籃子裡) 管理風險 低買高賣 審查與調整 相對的，你如何管理知識資產，如何進化你自己的程式功力就也是這樣！於是Pragmatic Programmer 這本書就提出幾個務實的建議，我整理如下：\n每年至少學一門新語言 每個閱讀一本技術書 也要閱讀非技術的書 上課 參與本地使用者群組或會議 批判性思考：「為什麼」、「這對誰有好處」、「時空背景是什麼」、「何時何地用」、「為什麼會有這個問題」 小君曰：我覺得每一年排一次出去外面面試其實也是個不錯的idea.\n","date":"Apr 16, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note1/","series":["Pragmatic Programmer"],"smallImg":"","tags":["閱讀","Pragmatic Programmer"],"title":"Pragmatic Programmer：知識資產"},{"categories":["讀書心得"],"content":"最近有點水貨，都在讀一些書，不過最近在看得這本書個人私底下認為應該作為工程師必看的一本書之一。原因是你可以從這本書或多或少得到一些啟示、有用的技巧可以帶回到你個人的專案當中，而且他應該算是可以每一年都拿出來複習一遍的好書之一。\n這本書如同標題所示：The Pragmatic Programmer。天瓏書局也有在賣，歡迎去購買～(連結 )，\n這本書談了很多東西、像是重構、測試、需求與開發等，與之前我看的軟實力不同，前者偏向做人與軟體工程師的人生，但後者更比較偏向軟體工程師的實際操作、練習等等，相比之下，我比較喜歡後者，也就是Pragmatic Programmer\n他有點將內容分成很多一小段一小段的，我覺得非常適用於我們目前這種速食閱讀的時代，偶爾就能翻一翻幾個小篇章提醒自己一下，而且它也不一定適用要從頭讀到尾的那種閱讀方式。\n像最近他就講到需求是一種過程就很有感覺，他說到菜鳥開發人員最常犯的一種錯誤就是聽到客戶的需求就馬上做，但根據經驗來看，很多時候客戶的初次需求往往不一定就真的是需求，是需要一步一步藉由回饋加以確認的！\n另外原本我有點不喜歡我家老闆一直care 我API的規格，甚至有時候明明就這幾個欄位前端不會用到，卻硬是被要求去傳\u0026hellip;，但讀到這裡有個篇章：正交性，主張一個好的系統可以讓其中一個的變化不會影響其他任何一個，舉個例子來說，就像資料庫程式碼與使用者介面應該要是正交的\n這不免就讓我發現原來我老闆的顧慮或許是正確的\n但是正交性真的也能應用於我與前端溝通用的API嗎？這裡我給個問號\n最後，我覺得這本書帶給我新的立志：成為Pragmatic Programmer（務實的工程師） 比起之前我想的，成為專家？成為厲害的工程師？我倒覺得這個flag務實多了\n那麼什麼是務實的工程師呢？\n重視你手中的工作與手藝(程式碼) 找出合適的解決方案 虛懷若谷、持續學習 小君曰：我是一位務實的Programmer\u0026hellip;\u0026hellip;\n","date":"Apr 9, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/2022/04/pragmatic_programmer/","series":["Pragmatic Programmer"],"smallImg":"","tags":["閱讀","Pragmatic Programmer"],"title":"工程師必讀的書之一：Pragmatic Programmer"},{"categories":["讀書心得"],"content":"簡單分享一下最近看的一本書：改變世界的九大演算法 。\n我覺得他算是被歸類在科普書，只是它是一種電腦科學的「科」。在這本書開宗明義也寫道他不是寫給我們這種電腦科學工作者看的，所以也不會分享那種排序啊、圖論等等在我大學必修的那些演算法這樣拉XD\n而作者也很厲害，用各種生活例子與比較平易近人的語法講解搜尋引擎、加密、神經網路、資料庫、數位簽章等等在我們生活中常常使用到的演算法，著實令人感到佩服。\n我最喜歡他第十章的內容，標題是 「什麼是可計算的」，像他就講到是否有可能製作出尋找當機的程式、能不能找出幫我們自動找出錯誤、毀壞的程式\u0026hellip;並且在小節裡面壓根就寫明「有些程式根本不可能存在」。這或多或少帶給我一些啟示與想法，原來電腦不是沒有弱點、他也是有它所做不到的極限與困難，這使我不禁想起之前在學習DevOps的第一句就是：「追求所謂百分百可靠度是錯誤的目標」\n或多或少緩解我寫出bug的罪惡感與自責（大誤～\n小君曰：其實資料結構對了，比較差的演算法也可以出頭天\u0026hellip;\n","date":"Apr 2, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/2022/04/%E6%94%B9%E8%AE%8A%E4%B8%96%E7%95%8C%E7%9A%84%E4%B9%9D%E5%A4%A7%E6%BC%94%E7%AE%97%E6%B3%95/","series":null,"smallImg":"","tags":["閱讀"],"title":"讀改變世界的九大演算法"},{"categories":["工作筆記"],"content":"最近在職涯上發生了一些事情，總覺得不太適合在這裡公開分享\u0026hellip; 就算了吧\u0026hellip;還是專注於現在的工作、找出自己持續成長的路線這樣\n最近來玩一個名為SonarQube的東西 最近工作期間發現一個名為SonarQube的東西, 發現還蠻好玩的 想說可以放在工作中分享一下，投影片做得很簡單，意思意思就好\n投影片 然後也快速用docker-compose快速架了起來\n1#### sonarqube container ######### 2 sonarqube: 3 image: sonarqube 4 ports: 5 - 9000:9000 有夠給他簡單的拉, 不過我想後續的維運及導入日常才是關鍵吧！\nGraphQL or 403 覺得經手專案兩年多\u0026hellip;不得不說自己最近感受到成長小小停滯，當然自己還是對專案有熱情、熱愛各種技術解決方案、最近學習WebSocket\u0026amp;GraphQL都頗有心得。for example, 想我最近就在社群上問了一個題目：``\n然後有個神人大大回覆如以下：\n於是就對GraphQL更深的認識拉，開心撒花～\n從SonarQube上學到的東西 上面有點岔題討論關於Graphql的事情，現在把他拉回來。 我覺得Sonarqube真的對我很有幫助。當我最近把我手上的專案丟到Sonarqube分析，我以為會爆多技術債，但好像也才2x-3x天而已\u0026hellip;，而且他有code smell的部分，都讓我學習到不少東西，甚至是常常我會拿這些東西與我身旁同事分享討論的那種\u0026hellip;\n同時更提醒自己如何加強自己寫code的習慣、知道如何寫出更好、更易讀的code\n小君曰：最近覺得軟體開發應該要是一種「團隊合作」\u0026hellip;\n","date":"Mar 27, 2022","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB16-sonarqube%E5%A5%BD%E5%A5%BD%E7%8E%A9/","series":["原來可以這麼寫"],"smallImg":"","tags":["sonarqube"],"title":"原來可以這麼寫(16): sonarqube好好玩"},{"categories":["讀書心得"],"content":"最近讀了一本書叫做「原子習慣」，是一本很常在暢銷榜上的一本書\u0026hellip;作為工程師，非技術相關的書還是要有些涉獵啊～\n之前買過這本書，後來賣掉。但後來又覺得想把它買回來，於是在五倍券發放的時候又把他買下來了XD\n現在想來真的覺得自己蠻蠢的呵呵，有興趣的可以自行去買書，我這裡就記錄一下我從這本書獲得的心得。對了！ 我覺得這本書很棒的一點是他每一章後面都有重點整理、然後重點的句子都會做粗體標示，這帶給我很不錯的閱讀體驗，但相對也讓我有點難想一個字一個字讀下去\u0026hellip;\n寫在法則之前 如果你覺得改變習觀很難，問題不在於你，而在你的系統 改變有三種層次：結果、過程與身份認同 習慣就是重複次數多到足以自動化的行為 習慣形成的四個步驟：提示、渴望、回應(我這裡比較想翻譯成執行\u0026hellip;)、獎賞 法則一：提示 讓提示顯而易見 對自己實際的作為保持意識、保持覺察，是改變習慣最大的挑戰之一(講到日本列車員指差確認部分\u0026hellip;) 當X情境時發生時，我就會執行Y反應 盡量避免把一個習慣的情境跟另一個習慣的情境混在一起 例如：手機 法則二：渴望 讓習慣有吸引力 所處文化決定了哪些行為對我們有吸引力 我們最早的習慣並非來自選擇，而是模仿 這部分在談談夥伴與社群的部分\u0026hellip; 創造一個動機儀式：在執行困難的習慣之前，做一件你很享受的事 重新思考你的習慣，把重點放在益處而非壞處(要懂得轉換思考模式好讓自己維持習慣) 法則三：回應 謎之音：這裡有DevOps的味道\u0026hellip;\n讓行動輕而易舉 關鍵是由重複開始，而非完美\u0026hellip;開始重複實行就對了 最小努力原則：讓習慣簡單到就算沒有意願也會執行 兩分鐘法則：新習慣的開始應該要花不到兩分鐘 法則四：獎賞 讓獎賞令人滿足 前三個法則是增加我們執行某個行為的機率，但獎賞法則是增加我們下一次重複該行為的可能性 習慣追蹤 「當測量成了目標，就不在是個好的測量方式」測量只有在引導你、幫助你看清全局、而不是消耗你心神的時候，才對你有用(古德哈特定律 ) 習慣中斷：基本上不要錯過兩次，盡快恢復正軌 寫在法則之後 當習慣符合你天生的傾向與能力，執行起來就比較容易，堅持下去也比較令人滿足 基因決定的不是你的命運，而是你在哪個領域會有機會(性格如何影響習慣) 反省與複查是一個讓你對自身表現長久保持覺察的過程 個人回應與結論 其實對我來說重點與癥結點在於「回應」，也就是執行。還有如何創造一個系統，讓自己維持習慣的執行與養成。\n例如每天早上就是讀聖經、背英文單字和學習程式這樣，有一個早晨的「習慣set」，或者下班就是去運動、睡前小閱讀幾頁的書\u0026hellip;這樣的一個晚上「習慣set」\u0026hellip;總之，我們都希望自己成為更好的人吧?!\n小君曰：不想要成為一直耍廢、退步的人\u0026hellip;\n","date":"Dec 4, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/2021/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%BE%86%E8%AE%80%E6%9B%B8-%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3/","series":null,"smallImg":"","tags":["閱讀"],"title":"讀原子習慣"},{"categories":["工作筆記"],"content":"新增一個名為r567tw的repo 最近發現github 上面有個新玩法，可以在自己的github做出一個自己的介紹頁面，於是我便下去玩了一下。\n原來只要建立一個和自己帳號名稱一樣的github repo就可以做到了，像我的就是這個樣子: 連結 另外也可以看一下別人的github profile 怎麼寫：awesome-github-profile-readme 年底了，覺得自己一事無成 好拉，這句話其實有點自損自己，或許是因為時間的關係，總覺得前陣子想要離職的情緒有點過去了。只是最近突然事情有點多、要溝通的事兒也很多，我想要告訴自己：專心寫code\n其他的就什麼都不要想，專心工作吧！同時也因為是年底，也在盤整自己最近的學習路徑與狀況，趁著黑色星期五敗了LaraCast 終身方案 藉著這個機會，希望來好好繼續提升Laravel能力囉\nDevOps Day Taipei 2021 一日遊 終於在疫情緩和的時候，11/24在台北文創參加DevOps Day Taipei 2021 謝謝公司的幫忙，讓我可以和另外一個同事一起參加。至於相關的筆記我目前記錄在這裡 我的心得其實蠻簡單的：DevOps的世界真的好大 以及對Dx的更深一層認識，其實這可以更擴大成開發者在開發過程的體驗。\n我還蠻喜歡這篇文章：開發者體驗 DX,Developer eXperience 推薦給大家讀一讀。 然後當晚也敗了一下Hackmd的Prime方案 (因為Hackmd真的還蠻好用的,我決定之後拿來做一下筆記的資料庫)\n參加 Kotlin 讀書會 因為我們Laravel的傳教士去JetBrain公司工作去推廣Kotlin 於是我決定來學習一下Kotlin，最近剛好舉辦第四梯次的新手讀書會，目前感覺還蠻好玩的，希望可以陸續參加到最後 💪，希望可以來學好Kotlin這門語言囉，來去當Android工程師\n1fun main(){ 2 println(\u0026#34;Learning Kotlin!\u0026#34;) 3} 小君曰：出來混總是要學幾個新語言混混\n","date":"Nov 29, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB15-%E6%96%B0%E5%A2%9E%E4%B8%80%E5%80%8Br567tw%E7%9A%84repo/","series":["原來可以這麼寫"],"smallImg":"","tags":["github","laracast","kotlin","devopsDay"],"title":"原來可以這麼寫(15): 新增一個r567tw的repo"},{"categories":["工作筆記"],"content":"心路歷程 好久沒有繼續這個「原來可以這麼寫」的系列了，這一系列的文章都將記錄著我一路以來在IT工作的心得和感受，這篇文章有點沒有那麼技術、偏心路歷程，也算是我送給自己從事工程師五年多以來的小禮物吧！\n我大學一畢業就開始工作，沒有服兵役的問題，在2016/07開始寫PHP直到現在，嚴格來說\u0026hellip;也大概快要六年了吧哈哈！這五年多其實技術能力進步不少，也蠻確立自己想要往後端的道路前進。我熱愛與資料庫共舞、享受著與CLI生活的感覺，能夠用自己所會的程式解決他人的問題其實也蠻有成就感der ~~~\n我也不是那麼討厭前端\u0026hellip;但老實說我不太想寫Angular,ionic\u0026hellip;也不想繼續搞Magento的說\u0026hellip;至於WordPress\u0026hellip;以前是有客製它的theme和css，但老實說我現在覺得弄WordPress真的不太像工程師XD\n最近在學Golang,也略懂一些JS/NodeJS\u0026hellip;應該算是有成長了吧?!\n老實說，我真的還不知道、也仍在摸索：怎麼樣的特質與能力，是一名優秀的工程師?，這堂課程在大學沒有開、似乎職場當中也好像沒有什麼人會教？\n又應該這麼問：「我是一名優秀的工程師嗎？」\nmaybe,這是一個沒有答案的自問自答吧！\n部門大會，我感覺很不好 寫這篇文章，也算是一種心情上的抒發吧！今天我們部門開了一場「部門大會」，不知道到底是哪個長官的餿主意，要一些IT/PM分享某些專案的甘苦談\u0026hellip;(但不是我要分享) 🙄\n然後甘苦談沒有「甘」，只有「苦」。讓我感覺會議滿滿的負能量，而且就我以對DevOps認識與理解的角度來看，當中只有一位比較反應出到底發生了什麼問題\u0026hellip;其他人都馬講自己加班到多晚、有多辛苦、有多趕\u0026hellip;不太客氣的說，整場大會有點淪為「抱怨大會」，沒有提出改進的方案與具體行動\u0026hellip;這怎麼能讓我們部門持續前進😡 但我是針對這個事情的發生，也不是針對什麼人。真心希望如果有下次是可以提出具體狀況與具題行動的說\u0026hellip;但我也知道，有些事情好像我們不能改變！\n更讓人討厭的是後面我接手專案主要的營運單位也在分享自己「苦」的地方\u0026hellip;真讓我感覺到有點不太開心\u0026hellip;早知道如果是這種大會,我應該要學某人一樣，選擇請假！\n離職是種病毒，一旦蔓延就難以收拾 我不知道，老闆對我們這些螺絲釘型的員工是怎麼看的？是真的像螺絲釘一樣可以隨意替換嗎？好吧！或許我真的最近情緒與狀況不太好，團隊中少數人離職確實讓我有時重新思考人生和工作的意義\u0026hellip;也常常數度懷疑，自己是不是不夠優秀、不夠格成為一個優秀的工程師？\n有些能改變的、希望能改變的，好像都難以改變\u0026hellip;\u0026hellip;\n我想離職的原因 覺得有些地方難以改變,而這正好是我想要看到的改變跟修正 專案上感覺有兩個不同的聲音，看不到方向也不知道該往哪裡去？另外某部門好像大大的穀倉一樣，沒辦法互相理解。 感覺我在某專案好久好久其實也蠻熟悉的\u0026hellip;想要有新專案卻一直都沒有\u0026hellip;沒有給我新的專案刺激、有時甚至感覺自己是否被冷凍？是不是自己能力不夠好？ 與同事關係不睦：不知道耶，到底和同事之間要保持距離還是可以當朋友？ 我不想離職的原因 剛好有一個階段的功能正在實作中，我不想不負責任的就離開 最近剛好同事在講到GraphQL,蠻想要試試看在自己任內導入GraphQL API 其實在這任內期間，我幾乎完成很多單元測試的部分。我們目前的codepipeline只有CD沒有CI, 真希望我可以把這CI放進去\u0026hellip;完成這最後一塊拼圖\u0026hellip; 近況與挑戰 其實，這段時間我覺得自己也做了不少東西，至少我覺得我還蠻開心可以完成Excel匯入的批量上稿(使用AWS step function \u0026amp; Python,Pandas)，讓營運單位可以比較輕鬆寫意的建立內容\u0026hellip;\n最近在看公司買的一本「Effective SQL」, 感覺收穫頗多\u0026hellip;或許可以改天分享。\n下禮拜又一個大會，不過好像是比較偏重技術的\u0026hellip;我居然被我們組內推出去講之前我讀過的「網站可靠性手冊」XD\u0026hellip;於是這陣子也在整理順便加入這段時間我對於DevOps新的理解與認識\u0026hellip;\n有興趣可以看之前的心得 結論 哈，感覺我寫這些有的沒的，應該以後沒有公司敢錄取我了吧！是說如果真的會離職的就會真的默默給他離職\u0026hellip;沒有的話應該也是因為想要改變吧\u0026hellip;(或者是想等領完年終再走?!)\n覺得人生蠻難的、也很迷惘\u0026hellip;難道五年還真的不夠思考嗎？ 或者，只是因為自己沒其他興趣？！🥲\n哈，算了，人生其實有時候也蠻適合做DevOps的，不畏懼失敗，滾動修正、避免自己犯第二次的錯誤。\n小君曰：Change Company, or Change Company\n","date":"Nov 12, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB14-%E5%85%B6%E5%AF%A6%E6%88%91%E6%9C%89%E9%BB%9E%E6%83%B3%E9%9B%A2%E8%81%B7/","series":["原來可以這麼寫"],"smallImg":"","tags":["mysql","devOps","職涯"],"title":"原來可以這麼寫(14): 其實我有點想離職"},{"categories":["程式"],"content":"前言 最近終於把自己的部落格整理好了，正式從wordpress換到hugo。 為什麼想要搬家呢？因為我覺得\n原本wordpress很慢\u0026hellip; wordpress 對 markdown沒有到很友善 看到appleboy大大也搬了 評估一下blog 其實用 static site generator 就好 在網路上輾轉得知(也是剛好最近在學golang), 知道有這樣名為hugo的玩具， 在它的介紹網頁 就大大的介紹自己是The world’s fastest framework for building websites。剛好也想趁這個機會更加學習golang(但其實都是在學Hugo XD)\n於是，便開始展開了這場旅行囉～\n不過原本的網站還會繼續存在，就等我和主機商的約走完就會結束,所以底下結果比較`https://tech.r567tw.tw`其實就代表原本用wordpress架的舊站 簡單教學 安裝hugo 以Mac為例 1brew install hugo 如果你還想知道其他os怎麼安裝，請參考此 new site 1hugo new site {demo} 這裡的demo你可以替換成任何你想要的名稱\ninstall theme 其實theme資料夾就是要裝你想要在hugo放的畫面\u0026hellip;所以說我感覺hugo非常客製化\u0026hellip; 然後接下來我很懶,就用官網的教學 帶過\u0026hellip;\n1cd demo 2git init 3git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 在設定裡說明你裝的主題 在demo資料夾你可以看到config.toml, 沒錯！那就是hugo的設定檔,其實hugo有約定好的列表,好像是從config.toml開始之類的\u0026hellip;詳情可以看看這裡 1baseURL = \u0026#34;http://example.org/\u0026#34; 2languageCode = \u0026#34;en-us\u0026#34; 3title = \u0026#34;My New Hugo Site\u0026#34; 4theme = \u0026#34;ananke\u0026#34; 預覽 1hugo server -D 蹦！ 你的hugo網站架好了\n增加內容 好拉，我知道還是要有些內容才叫做網站麻！所以你可以用以下這個\n1hugo new posts/helloworld.md 恩, content/posts增加了新檔案囉，你可以開始用markdown開始寫東西囉\n遇到的坑 修改舊文章 Hugo 網站隨然有提供從 wordpress 搬家的工具, 但匯出之後發現其實要調文章調很多\u0026hellip; 因為裡面很多奇怪的 html 標籤, 如果要用可能要把 hugo 的 html 安全設定拔掉 (但我不想要這樣\u0026hellip;所以就一個一個調整改一改囉)\n搜尋 這個我也是疑惑蠻久，甚至有在網路上問問題 以及不斷google中尋找解法\u0026hellip;後來才發現我選擇的theme本身自帶 fuse.js , 所以我只要在設定檔設定輸出json 他就會幫我實作出這個功能\n類似在config裡面寫道\n1[outputs] 2 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] 後來查了一下fuse.js 就是那種只要給他json他就會幫你實作搜尋的library, 讓我或多或少對搜尋的技術有一些更多的認識理解。\nComments system 這一題我覺得蠻簡單的，坊間就有Disqus,Facebook comments這種第三方留言套件 而且很成熟，我一開始wordpress也有一陣子使用它們。\n不過我看到這個theme的demo 是用github issue, 仔細研究後發現他是用到第三方app: utterances\n於是乎我也就決定這個當作我的Comments system 囉\nSEO 其實網站架起來最希望的是有人逛，我自己也是自己去Godaddy特別買網域架設之類的，當然希望可以做好這個SEO讓google可以趕快認識我。\n不過後來想想反正我也不是想變有名\u0026hellip;就佛系讓 Google 爬(誤～\n好拉，還是講一下我目前用到的手段：\n上傳檔案給Google sitemap tool 用GA追蹤一下網頁流量與分析 用github action自動部屬我的文章 最後，我在用github action 結束這一回合，因為我文章放的repo是一個repo\u0026hellip;啊就是我不想我的網域是r567tw.github.io/blog之類的, 我比較想要是r567tw.github.io這樣。最近剛好也在學github action, 上面有很多大神寫了很多可以使用的第三方script,像我就用到了cpina/github-action-push-to-another-repository,再配合 hugo 有開箱即用的yaml檔 \u0026hellip;\n用這個改一下下就ok囉！\n遺珠之憾 我覺得r567tw.github.io整個被jimmycode.tw有點阿雜\u0026hellip; 像我有一個履歷專案是r567tw/resume ,是使用github page部署，所以網址應為r567tw.github.io/resume,但殊不知這個jimmycode.tw一上去，我的整個r567tw.github.io被取代掉,不過是還好拉，還能接受XD\n結果 舊網站wordpress手機版分數 新網站hugo手機版分數 舊網站wordpress桌面版分數 新網站hugo桌面版分數 Gtmetrix比較: 上面的是舊站wordpress;下面則是新站hugo 小君曰：搬家萬歲！\n","date":"Nov 8, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/2021/%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%90%AC%E5%AE%B6/","series":[],"smallImg":"","tags":["hugo101"],"title":"為什麼我要搬家"},{"categories":["程式"],"content":"我自己是PHP 後端工程師，常常在寫網頁、常碰Javascript , html , css 等等，所以，在學這個Go的過程當中，也來學習用go寫一個網頁吧！\nGo 與網頁常常有用到的一個套件就叫做 net/http , 他同時也可以做網頁的爬蟲，等等讓我娓娓道來～\n網頁版HelloWorld ! 1package main 2import ( 3 \u0026#34;log\u0026#34; 4 \u0026#34;net/http\u0026#34; 5) 6 7func viewHandler(writer http.ResponseWriter, request *http.Request){ 8 message := []byte(\u0026#34;Hello World\u0026#34;) 9 _,err := writer.Write(message) 10 if err != nil { 11 log.Fatal(err) 12 } 13} 14 15func main(){ 16 http.HandleFunc(\u0026#34;/hello\u0026#34;,viewHandler) 17 err := http.ListenAndServe(\u0026#34;localhost:8080\u0026#34;,nil) 18 log.Fatal(err) 19} Template 如果網頁只是簡單的HelloWorld 怎麼行？在Go 裡面還有另外一個套件：html/template , 而使用Execute 的第二個參數可以將資料塞入樣板中。而樣板中很重要的是可以使用{{.}} 等符號\n1package main 2import ( 3 \u0026#34;log\u0026#34; 4 \u0026#34;net/http\u0026#34; 5 \u0026#34;html/template\u0026#34; 6) 7 8type TemplateData struct { 9\tName string 10} 11 12func viewHandler(writer http.ResponseWriter, request *http.Request){ 13 html, err := template.ParseFiles(\u0026#34;view.html\u0026#34;) 14 15 if err != nil { 16 log.Fatal(err) 17 } 18 data := TemplateData{Name:\u0026#34;Jimmy\u0026#34;} 19 err = html.Execute(writer,data) 20 21 if err != nil { 22 log.Fatal(err) 23 } 24} 25 26func main(){ 27 http.HandleFunc(\u0026#34;/\u0026#34;,viewHandler) 28 err := http.ListenAndServe(\u0026#34;localhost:8080\u0026#34;,nil) 29 log.Fatal(err) 30} 上面我們有一段template.ParseFiles(\u0026quot;view.html\u0026quot;) ，而view.html 就像以下這樣寫\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; 6 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; 7 \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; 8\u0026lt;/head\u0026gt; 9\u0026lt;body\u0026gt; 10 \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; 11 ##Name: {{.Name}} 12\u0026lt;/body\u0026gt; 13\u0026lt;/html\u0026gt; 接下來，讓這裡筆記一下樣板中常見的樣式\n{{.Name}} : 塞入名稱為Name {{ if .Paid }} \u0026hellip; {{ end }}: if paid 為 true , 才能執行if 的區塊 {{ range .Charges }} \u0026hellip; {{ . }}\u0026hellip; {{ end}}: for 迴圈的區塊，根據Charges 裡面的項目依序列出資料 最後，寫個Todolist 吧！ 完整程式碼請參考我的github : https://github.com/r567tw/golang-simple-todolist 首先是主程式：\n1package main 2 3import ( 4\t\u0026#34;bufio\u0026#34; 5\t\u0026#34;html/template\u0026#34; 6\t\u0026#34;log\u0026#34; 7\t\u0026#34;net/http\u0026#34; 8\t\u0026#34;os\u0026#34; 9\t\u0026#34;fmt\u0026#34; 10) 11 12type TodoList struct { 13\tTodos []string 14} 15 16func getTodos(fileName string) []string { 17\tvar todos []string 18\tfile, err := os.Open(fileName) 19\tif os.IsNotExist(err) { 20\treturn nil 21\t} 22\tdefer file.Close() 23\tscanner := bufio.NewScanner(file) 24\tfor scanner.Scan() { 25\ttodos = append(todos, scanner.Text()) 26\t} 27\treturn todos 28} 29 30func viewHandler(writer http.ResponseWriter, request *http.Request) { 31\thtml, err := template.ParseFiles(\u0026#34;view.html\u0026#34;) 32\ttodos := getTodos(\u0026#34;todolist.txt\u0026#34;) 33\tif err != nil { 34\tlog.Fatal(err) 35\t} 36 37\ttodolist := TodoList{ 38\tTodos: todos, 39\t} 40 41\terr = html.Execute(writer, todolist) 42 43\tif err != nil { 44\tlog.Fatal(err) 45\t} 46} 47 48func todoCreateHandler(writer http.ResponseWriter, request *http.Request) { 49\ttask := request.FormValue(\u0026#34;task\u0026#34;) 50 51\tfile, _ := os.OpenFile(\u0026#34;todolist.txt\u0026#34;, os.O_WRONLY | os.O_APPEND | os.O_CREATE , os.FileMode(0600)) 52\tfmt.Fprintln(file, task) 53\tdefer file.Close() 54\thttp.Redirect(writer, request, \u0026#34;/\u0026#34;, http.StatusFound) 55} 56 57func main() { 58 59\thttp.HandleFunc(\u0026#34;/\u0026#34;, viewHandler) 60\thttp.HandleFunc(\u0026#34;/todo/create\u0026#34;, todoCreateHandler) 61 62\terr := http.ListenAndServe(\u0026#34;localhost:8080\u0026#34;, nil) 63\tlog.Fatal(err) 64} 我將Todo 存在檔案todolist.txt 當中\n之後就是簡單地建立一下我的呈現畫面，因為我將創建的表單也放進同一頁，所以我就只要單一個檔案：view.html\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; 6 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; 7 \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; 8\u0026lt;/head\u0026gt; 9\u0026lt;body\u0026gt; 10 \u0026lt;h1\u0026gt;Golang Simple Todo list\u0026lt;/h1\u0026gt; 11 12 \u0026lt;form action=\u0026#34;/todo/create\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; 13 \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;task\u0026#34;\u0026gt; 14 \u0026lt;button\u0026gt;Create Todo\u0026lt;/button\u0026gt; 15 \u0026lt;/form\u0026gt; 16 \u0026lt;ul\u0026gt; 17 {{range .Todos}} 18 \u0026lt;li\u0026gt;{{.}}\u0026lt;/li\u0026gt; 19 {{end}} 20 \u0026lt;/ul\u0026gt; 21\u0026lt;/body\u0026gt; 22\u0026lt;/html\u0026gt; 小君曰：我要學習的還很多咧\n","date":"Jun 5, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%986-%E5%AF%AB%E4%B8%80%E5%80%8B%E7%B6%B2%E9%A0%81%E5%90%A7%EF%BC%81/","series":["go 學習筆記"],"smallImg":"","tags":["golang","web"],"title":"Go 學習筆記(6): 寫一個網頁吧！"},{"categories":["工作筆記"],"content":"都在 SQL啦，哪次不SQL 最近工作主要的部分是幫忙營運單位做資料匯出相關需求，沒有同事在說我還以為去年我應徵的是「資料工程師」呢！\n不過說真的，其實我很喜歡「資料庫」，喜歡SQL語言，所以其實我覺得做這些東西是在挑戰自己、很好玩\u0026hellip;. 更期望之後可以碰碰其他的SQL 像是PostgreSQL 啊、Oracle 之類的。\n總之我覺得藉此經驗能挑戰自己寫SQL 也很不錯，雖然有夥伴說其實你就匯出Row data 給他們就好啊，叫他們自己拉Excel 做就好\u0026hellip;. 但我就是想要幫忙他們解決問題麻😅\n真不知道如果要應徵DBA ，我這種粗粗淺淺的菜鳥經驗能不能試試？\n沒梗了，來講Ruby 簡單交代一下最近工作狀況，也紀錄自己的歷程。本來這個系列就是要來記錄的啊～\n每個月我們都有小組例會，每個月大概一個人會有這麼一回吧\u0026hellip;. 總之，我發現我有點沒梗了，所以來分享一下自己以前自學的語言：Ruby\n然後沒有想到，AWS Lambda 竟然有支援Ruby , cool ! so fun !\n雖然我有在這裏寫一篇文章Ruby 筆記，不過那都沒什麼排版，我也懶得改ＸＤ\n以下就是我之後將在例會報告的ＰＰＴ啦\nhttps://www.slideshare.net/ssusereb2ee2/ruby-248463972 小君曰：其實我會一點點的Ruby啦，不知道這樣能不能應徵Ruby Engineer ? 哈\n","date":"May 29, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB13-%E5%85%B6%E5%AF%A6%E6%88%91%E6%9C%83%E4%B8%80%E9%BB%9E%E9%BB%9Eruby/","series":["原來可以這麼寫"],"smallImg":"","tags":["mysql","ruby"],"title":"原來可以這麼寫(13): 其實我會一點點Ruby"},{"categories":["程式"],"content":"學習Go 也到了一段時間了，來學習這個部分：多執行緒\n如同我之前寫道其實如果要做很大量的東西應該要用非同步的方式\u0026hellip; 在Go裡面，並發被叫做「Goroutine」，在深入淺出Go 這本書的定義：提供並發，暫停一個工作以啟動另一個工作。而且在有些情境下他們允許並行，同時執行不同的工作\n如果你想要用goroutine 其實就在function 前面加一個go 的關鍵字\n1func main(){ 2 go a() 3 go b() 4} 然而，由於我們使用到這個非同步的概念，所以我們無法期待method 可以馬上回傳結果，那是Go 去控制工作的進行與安排，所以Go裡面便多了一個概念：Channels，其實就加一個chan 這個詞就好\n1var myChannel chan float64 2myChannel = make(chan float64) 這時候我們上面得程式可以改寫成這樣\n1func a(myChannel chan string){ 2 myChannel \u0026lt;- \u0026#34;a\u0026#34; 3} 4 5func main(){ 6 myChannel := make(chan string) 7 go a(myChannel) 8 fmt.Println(\u0026lt;-myChannel) 9} 但要注意的是，如果我們make 沒有加第二個參數，那麼我們的Channel 就是個無緩衝的channel ，有就意味著我們必須要每次將資料塞進channel 的時候，每一次都要拉出來，否則會造成channel 被鎖定。\n那麼，就讓底下示範一下有緩衝的channel 吧\n1func a(myChannel chan string){ 2 myChannel \u0026lt;- \u0026#34;a\u0026#34; 3 myChannel \u0026lt;- \u0026#34;b\u0026#34; 4} 5 6func main(){ 7 myChannel := make(chan string,3) 8 go a(myChannel) 9 fmt.Println(\u0026lt;-myChannel) 10} 小君曰：對於非同步的這一塊，我需要學習的還很多\u0026hellip;..\n","date":"May 15, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%985-%E9%9D%9E%E5%90%8C%E6%AD%A5/","series":["go 學習筆記"],"smallImg":"","tags":["async","golang"],"title":"Go 學習筆記(5): 非同步"},{"categories":["程式"],"content":"寫程式難免都需要與檔案做互動, 甚者還需要與資料庫溝通。這篇文章將紀錄Go 怎麼與檔案互動的部分\u0026hellip;\u0026hellip;\n首先是讀取檔案！\n1package main 2 3import ( 4 \u0026#34;bufio\u0026#34; 5 \u0026#34;os\u0026#34; 6 \u0026#34;fmt\u0026#34; 7) 8 9func main(){ 10 var numbers []string 11 file ,_ := os.Open(\u0026#34;input.txt\u0026#34;) // 使用open 開啟檔案 12 scanner := bufio.NewScanner(file) // 必須建立Scanner 這裡讓我有點想起C 13 for scanner.Scan(){ // 這裡的意思是逐行讀取 14 content := scanner.Text() 15\tnumbers = append(numbers,content) 16\tif scanner.Err() != nil { 17\tfmt.Println(\u0026#34;scan error\u0026#34;) 18\t} 19 } 20\tdefer file.Close() //defer 會確保函式一定被調用,即便程式提早結束 21\tfmt.Println(numbers) 22} 之後，就來示範怎麼寫入檔案吧？\n1package main 2 3import ( 4\t\u0026#34;os\u0026#34; 5\t\u0026#34;fmt\u0026#34; 6) 7 8func main() { 9\tfile, _ := os.Create(\u0026#34;output.txt\u0026#34;) 10\t// file.WriteString(\u0026#34;Hello Write Content\u0026#34;) 11\t_, err := file.Write([]byte(\u0026#34;Here is a string....\u0026#34;)) 12\tif (err != nil){ 13\tfmt.Println(err) 14\tpanic(\u0026#34;error\u0026#34;) 15\t} 16\tdefer file.Close() 17} 然後附加檔案的話只要將上面建檔案的改一下即可\n1package main 2 3import ( 4\t\u0026#34;os\u0026#34; 5\t\u0026#34;fmt\u0026#34; 6) 7 8func main() { 9\t// 這裡改成openfile 而且要加後面的flag 和數字參數即可 10\tfile, _ := os.OpenFile(\u0026#34;output.txt\u0026#34;,os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644) 11\t// file.WriteString(\u0026#34;Hello Write Content\u0026#34;) 12\t_, err := file.Write([]byte(\u0026#34;Here is a string....\u0026#34;)) 13\tif (err != nil){ 14\tfmt.Println(err) 15\tpanic(\u0026#34;error\u0026#34;) 16\t} 17\tdefer file.Close() 18} 小君曰：這次耍廢點\u0026hellip;..\n","date":"May 8, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%984-%E6%AA%94%E6%A1%88/","series":["go 學習筆記"],"smallImg":"","tags":["golang"],"title":"Go 學習筆記(4) – 檔案"},{"categories":["程式"],"content":"來到學習Go 的第三篇文章，在深入淺出Go 裡面有介紹套件的開發方式，要把他放到GOPath 裡面\u0026hellip; 不過，那好像是很久以前Go的版本了\u0026hellip; 現在，出現了go.mod 和 go.sum , 似乎就沒有那麼麻煩\u0026hellip;\n這裡簡介簡單兩個指令：\ngo mod init {package name} 這個指令會建立go.mod 的檔案 go mod tidy 這個指令會去找你目前寫的go 檔案所引用的package, 去修改go.mod go.mod 有點像是composer.json 和 package.json 記錄著目前所引用的package\n而 go.sum 是個天書，像composer.lock 和 package.lock 去鎖住目前的版本\u0026hellip;\n然後開一個Go 的Package 有點簡單，但寫與維護應該很複雜，而且我也有點還是搞不太清楚還在學習中\u0026hellip;. 網路上和書中的資源實在有點讓我混亂\u0026hellip;\u0026hellip; 可能等我再稍微釐清一下我再回來更新這一篇文章\u0026hellip;. 請大家勿參考此文章，但如果有指教請大家多多教導我～\n總之，我就在github 上面開了一個簡易的greeting repo \u0026hellip;\n只要你記得，可以匯出的參數與方法是要大寫開頭，就可以輕輕鬆鬆自己寫一個package 啦\n然後在我go run/go install / go build 的時候就能跑了\u0026hellip; 真的好妙\u0026hellip;.\n另外啊，可以用註解當成文件，然後人家跑go doc {套件名} /go doc -all {套件名}就可以看到怎麼使用套件，真的蠻方便的，但有一些注意事項\npackage 的註解必須要在package這個關鍵字以後 function / 變數等等需要在註解前面增加與他同名的名稱 1// Package greeting echo Hello or echo Hi message. 2package greeting 3 4// Ha return \u0026#34;Ha\u0026#34; 5const Ha = \u0026#34;Ha\u0026#34; 6 7// Hello return Hello message. 8/* test */ 9func Hello() string { 10\treturn \u0026#34;Hello\u0026#34; 11} 12 13// Hi return Hi message. 14func Hi() string { 15\treturn \u0026#34;Hi\u0026#34; 16} 小君曰：天哪\u0026hellip; 這篇完全寫得好差\n","date":"May 1, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%983-%E5%81%9A%E5%A5%97%E4%BB%B6%E7%B5%A6%E5%88%A5%E4%BA%BA%E7%94%A8/","series":["go 學習筆記"],"smallImg":"","tags":["golang"],"title":"Go 學習筆記(3): 做套件給別人用"},{"categories":["工作筆記"],"content":"最近處理兩個大功能，一個是要建立websocket server 讓交易流程去串(開發官網購買)(但說真的交易流程用websocket 真的有點怪怪的？就我的認知 websocket 的部分應該是在一個很即時的情境，但用在這種只是為了獲得通知的目的確實有點怪怪的\u0026hellip; 但說真的我也沒有辦法提出更好更優的方案，作為一位只能聽命行事的超基層也只能照做QAQ)\n另外是要做有關於批次匯入的功能\u0026hellip;. 呵呵以前就有做過類似Excel 匯入的功能，我深知道那是一個巨大無比的坑，坑是在一開始的規劃，你既然開放前面使用者可以用Excel 檔匯入，那你就得面對使用者的Excel檔可能有千起百怪的樣式、無法驗證或無法預期的輸入\u0026hellip;套句我之前有位主管說的話：你要防使用者想防賊一樣啊！\n總之，這個功能其實去年有做一下下，但後來被靠北中止了\u0026hellip;.現在又復活，當然給他們凹一下，仔細把流程討論清楚先，然後再做\u0026hellip;. （其實正確的流程及我想表達的意思是：PM/SA 你們給我生出流程圖和規格書啊！）\n然而，在這兩大功能夾擊下，我算是很平安的度過及學習、開發，並沒有像之前趣聽小說匯入被搞得人仰馬翻、混亂不已\u0026hellip;.在這個過程中，修修幾個bug、調整幾段程式碼\u0026hellip;. 其中一項是調整拆帳報表的功能\n原本，我是用Laravel 匯出拆帳報表，並用上 Laravel-excel 這個套件，殊不知測試環境都弄好好的，但到了正式就完蛋（匯不出來）\n因此，我發現當前端送 request 直接製作檔案的這個版本實在有點\u0026hellip;.糟糕。\n後來規劃出了第二套版本：就是當前端送出request 後丟到queue後再慢慢做\u0026hellip; 也是一樣用到剛剛說的那個套件，那個套件可以很輕易的用queue的方式製作excel 檔。\n測試環境一樣好好的，但正式環境還是爆掉\u0026hellip;. 後來發現只要調大我們機器的CPU 就可以匯出了\u0026hellip;.，不然就是我真的功力不精無法好好使用這個套件囧！\n但是！每次調大機器CPU 實在不是什麼好方法\u0026hellip;. 而同事告訴我：不應該堅持用laravel/php處理這種CPU bound的事項\u0026hellip;. 於是\u0026hellip;.我採用的AWS Lambda 方案，而Lambda 用Go 開發\u0026hellip;.\n結果是：原本用Laravel Queue要跑兩三十分鐘的報表居然奇蹟的在5~15秒內搞定。\n然後再寫的過程當中也越來越喜歡Go這門語言。不過我知道我要學習的還太多，這在我使用Go上面只是剛開始而已。\n謝謝後端團隊的大家讓我可以任性的使用看看這門語言，並且在我有問題的時候願意幫助我＾＾\n於是乎，這個月的技術分享會就分享我使用Golang的心得了\u0026hellip;\u0026hellip;\nhttps://www.slideshare.net/ssusereb2ee2/golang-246642054 額外加碼： 最近docker 使用上常常有那個build 失敗的image 和container bla bla 的，最近看到一個很好用的清除指令紀錄一下：\n1docker system prune 小君曰：想要轉職成Golang 工程師。。。\n","date":"Apr 24, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB12-%E6%88%91%E2%9D%A4%EF%B8%8Fgolang/","series":["原來可以這麼寫"],"smallImg":"","tags":["go","websocket"],"title":"原來可以這麼寫(12): 我❤️Golang"},{"categories":["程式"],"content":"來到學習Go 的第二篇文章了，來學習一些控制流以及一些基礎東西吧！\n條件式 在 Golang 寫條件式很簡單，就是寫個if 加個大括號就好\n1// 這裡請記得 \u0026#34;{\u0026#34; 和 if 要同一行，之前自由慣了常常被這件事情雷到！ 2if true { 3 // ...... 4} else if false { 5 // ..... 6} 7 8// 或者你可以使用 if 更短的初始化陳述句 9if count := 5; count\u0026gt;4 { 10 fmt.Println(\u0026#34;count is \u0026#34;,count) 11} 另外有一個比較特別的是，if 區塊裡面的區域變數(使用到:=)是不能使用在if 外面的喔～\n請讓我用以下程式碼來做進一步陳述 詳細可以去看 這裏：https://github.com/r567tw/go-practice/blob/master/HelloWorld/if.go 1package main 2 3import ( 4 \u0026#34;fmt\u0026#34; 5) 6 7// var x = 999 // go 裡面也可以宣告一個超越main範圍以外的超全域變數, 但不建議這麼做 8 9func main() { 10\tfmt.Println(\u0026#34;Hello World\u0026#34;) 11\tx := 10 12 13\tif x \u0026gt; 0 { 14\ty := 10 15\t// x := 100 // 這個等同在裡面宣告新的位置x , 所以外面的x仍然是10 16\tx = 100 // 這個會污染外面宣告的x , 所以外面的x 會等於 100 17\tfmt.Printf(\u0026#34;x = %d\\n\u0026#34;, x) // x =100 18\tfmt.Printf(\u0026#34;%d in if statement\\n\u0026#34;, y) //10 in if statement 19\t} 20 21\t// fmt.Sprintf(\u0026#34;%d out of if statement\u0026#34;, y) // error 22\tfmt.Printf(\u0026#34;x = %d out of if statement\\n\u0026#34;, x) // x = 100 out of if statement 23} 值得再拿出來說嘴的是，x變數在外面的宣告，如果在if 陳述句範圍裡面使用單純的= ，在main 範圍內的x 是會被更動的，可是如果使用:= , main 裡面的x 不會被影響。\n1if number,err := strconv.ParseFloat(\u0026#34;3.14\u0026#34;,64); err != nil{ 2 log.Fatal(err) 3} 4 5fmt.Println(number) // \u0026lt;= 這裡會出現錯誤，因為number 屬於if 區塊裡面的範圍，go 語言的if 裡面變數不得共享 Switch 陳述句 1switch rand.Intn(3)+1 { 2 case 1 : ... 3 case 2 : ... 4 case 3 : ... 5 default : ... 6} 迴圈 話不多說, show you the code\n1for x:= 0; x\u0026lt;=6; x++ { 2 ...... 3} 4 5// 或者只是條件式得處理 6x:=0 7for x\u0026lt;=6 { 8 x++ 9} 10// 迴圈裡面也可以使用 continue 和 break ... 和 if 一樣，使用到:= 所宣告的變數是沒辦法使用在for 外面的。\nfunction 1package main 2 3import ( 4\t\u0026#34;fmt\u0026#34; 5) 6 7type bigger = func(int) bool // function 也可以作為型態的一種！ 8 9func main() { 10\thandleFn() 11 12\tanonymous := func() { 13\tfmt.Println(\u0026#34;anonymous function\u0026#34;) 14\t} // go 也支援匿名funciton 15\tanonymous() 16 17\torigin := []int{1, 2, 3, 4, 5} 18\tchange := filter(origin, func(el int) bool { 19\treturn el \u0026gt; 3 20\t}) 21\tfmt.Println(change) 22} 23 24func handleFn() { 25\tfmt.Println(\u0026#34;test function\u0026#34;) 26} 27 28func filter(data []int, big bigger) []int { 29\tfiltered := []int{} 30\tfor _, element := range data { 31\tif big(element) { 32\tfiltered = append(filtered, element) 33\t} 34\t} 35\treturn filtered 36} Make A Game ! 接下來，讓我們試著應用以上這些東西，來寫個簡單的猜數字遊戲吧！\n1package main 2 3import ( 4\t\u0026#34;bufio\u0026#34; 5\t\u0026#34;fmt\u0026#34; 6\t\u0026#34;os\u0026#34; 7\t\u0026#34;math/rand\u0026#34; 8\t\u0026#34;strconv\u0026#34; 9\t\u0026#34;strings\u0026#34; 10\t\u0026#34;time\u0026#34; 11) 12 13func main() { 14\tr := rand.New(rand.NewSource(time.Now().UnixNano())) // 這一行帶入現在的時間,好讓每一次遊戲隨機產生的數字都不一樣, 原來亂數的原理其實是有一個小技巧和規則的 15\tresult := r.Intn(100) // 其實這裡可以隨機產生數字 16\t17\tloop := true // 設定遊戲開始的條件 18\tfor (loop) { 19\tfmt.Printf(\u0026#34;Please Enter a number(1-100): \u0026#34;) 20\treader := bufio.NewReader(os.Stdin) // 其實這裏就是類似Python 的input 而已 21\tinput, _ := reader.ReadString(\u0026#39;\\n\u0026#39;) 22\tnumber,_ := strconv.Atoi(strings.TrimSpace(input)) // 一定要用trimspace, 否則 strconv轉出來的數字不一定取得出來 23\tswitch { 24\tcase (result \u0026lt; number): 25\tfmt.Printf(\u0026#34;smaller than %d\\n\u0026#34;,number) 26\tcase (result \u0026gt; number): 27\tfmt.Printf(\u0026#34;bigger than %d\\n\u0026#34;,number) 28\tcase (result == number): 29\tfmt.Println(\u0026#34;Bingo\u0026#34;) 30\tfmt.Printf(\u0026#34;result is %d\\n\u0026#34;,result) 31\tloop = false 32\tbreak 33\tdefault: 34\tloop = true 35\t} 36\t} 37 38\tfmt.Println(\u0026#34;Game is over!\u0026#34;) 39} 有興趣看程式碼的可以來這裡：https://github.com/r567tw/go-practice/blob/master/makeGame/main.go 小君曰：猜數字遊戲好像可以作為每個程式語言的入門磚，相對於前端的Todo list 呵呵\n","date":"Apr 17, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%982-make-a-game/","series":["go 學習筆記"],"smallImg":"","tags":["golang"],"title":"Go學習筆記(2): make a game"},{"categories":["程式"],"content":"在之前寫到今年的計劃 當中，我就說到我想要學Go 語言。同時我自己也買了一本有關於Go 的書：深入淺出Go , 希望藉此督促自己有個比較完整性的學習\u0026hellip;\u0026hellip;\n以下是我讀這本書以及學習的心得與筆記，可能有點無聊，高手請跳過、不過如果有看到錯的也請不吝指正！\n首先，你要先去安裝好Go\u0026hellip;\u0026hellip;.\n程式組成 Go 語言的組成通常有三個部分：\n套件子句(package main) import 相關陳述句 (import \u0026quot;fmt\u0026quot;) 主要的程式碼 (func main(){......}) Hello World 程式！ 讓我們先建立一個名為hello.go 的檔案\u0026hellip; 然後在裡面寫這些東西\u0026hellip;\n1package main 2import \u0026#34;fmt\u0026#34; 3 4func main(){ 5\tfmt.Println(\u0026#34;Hello World\u0026#34;) 6\t// 這裡請務必使用 \u0026#34; 否則很容易跳出 invalid character literal (more than one character) 的問題 7} 接下來讓我們對這個檔案做go run hello.go 就可以看到 Hello World 的字眼啦！\nGo 的資料型態類別 字串：用雙引號所框起來的任意數量字元 符文(runes) : 用單引號所匡著的單一字元, ex. \u0026lsquo;A\u0026rsquo; , \u0026lsquo;B\u0026rsquo; boolean (bool) numbers float32 , float64 int8 ,int16 ,int32 ,int64 uint uint8 , uint16 ,uint32 ,uint64 byte (檔案專用) tips: 可以透過 reflect 這個套件裡面的TypeOf 方法得知資料的型別\n1package main 2 3import ( 4 \u0026#34;fmt\u0026#34; 5 \u0026#34;reflect\u0026#34; 6) 7 8func main() { 9\tfmt.Println(reflect.TypeOf(\u0026#34;Hello World\u0026#34;)) //string 10\tfmt.Println(reflect.TypeOf(true)) // bool 11} 宣告變數 var q int var q int = 4 p,q = 4,5 (居然有像Python 一樣的多重賦值！) p :=4 (快速寫法, 連型別都不用！) 命名規則 開頭必須是字母 如果開頭字母是大寫，表示他是可以被匯出的 陣列 在Go 裡面要宣告陣列，請用以下的code 得形式\n1// 第一種 2var todos [2]string 3todos[0]= \u0026#34;learning go !\u0026#34; 4todos[1]= \u0026#34;use go to write an app\u0026#34; 5// 第二種 6var grades [3]int = [3]int{90,98,93} 7 8// 第三種 9heights := [3]int{90,98,93} 10 11// go 裡面的foreach , 陣列/map資料型態都適用！ 12for index,note := range notes{ 13 fmt.Println(index,note) 14} 切片 這是我在深入淺出Go 這本書裡面的某一個章節，他裡面寫道Go 宣告切片就像是宣告陣列變數, 只是不需要指定大小！for example:\n1var mySlice []int 2mySlice = make([]int,7) // 設定七個數字的切片 3fmt.Printf(\u0026#34;%v\u0026#34;,mySlice) //[0 0 0 0 0 0 0] 4// 增加 5newSlice := append(mySlice, 5,9) // 回傳新的, 增加完的切片 6fmt.Printf(\u0026#34;%v\u0026#34;,newSlice) //[0 0 0 0 0 0 0 5 9] 錯誤處理 說真的，最近在學著Go 都覺得他的語言調性和其他語言差很多，像是if/for 的區域範圍變數無法用在if/for 後面(但之前的宣告可以使用)、陣列的宣告是很獨樹一幟的，他也不像傳統程式語言那種try\u0026hellip;catch 的敘述，而是你要分成你自己去處理或者直接error 中斷給你看這樣！\n像是這樣, 你必須用參數去接下可能會error 的地方，然後用if 去判斷, 控制壞掉之後的流程這樣。詳細你可以參考此連結：\nhttps://michaelchen.tech/golang-programming/error-handling/ 或者你也可以使用 panic 這個關鍵字 或 用 recover 這個關鍵字讓他從panic 的狀態中恢復, 另外也筆記一下 defer 可以添加到任何地方，用來暫緩該調用直到目前程式結束\n詳細可以參考此網址：\nhttps://openhome.cc/Gossip/Go/DeferPanicRecover.html 1file, err := os.Open(\u0026#34;file.txt\u0026#34;) 2 if err != nil { 3 .... 4 } 5defer file.Close() Maps 有點像是Python 裡的 dictionary , 或者 php 的 association array\u0026hellip;\u0026hellip;\n1var myMap map[string]float64 // 宣告出以字串型態為index, float64型態的值 2myMap = make(map[string]float64) 3 4// 又或者可以做更簡單的宣告 5myMap := make(map[string]float64) 6 7 8// 如何把東西放進去... 9myMap[\u0026#34;Jimmy\u0026#34;] = 12.4 10myMap[\u0026#34;Bob\u0026#34;] = 15.3 11 12// 如果已經知道要建立怎麼樣的map 13myMap := map[string]float64{\u0026#34;Jimmy\u0026#34;:12.4 , \u0026#34;Bob\u0026#34;:15.3} 14 15// 另外如果取得一個沒有被指派的index 會根據型態而回傳不同的值 16// 數字：0 17// 字串：\u0026#34;\u0026#34; 18// * 如果沒有make 它則會是一個nil 的 map, 而nil 的 map 無法被指派值 19// 可以視情況給予第二個參數，好讓map 可以判斷是否有這個index 20var value string 21var exist bool 22value , exist = myMap[\u0026#34;Andy\u0026#34;] // return 0, false 23 24// 移除 25myMap[\u0026#34;Jim\u0026#34;] = 999 26delete(myMap,\u0026#34;Jim\u0026#34;) 結構 struct 1var myStruct struct { 2 name string 3 grade int 4} 5myStruct.name = \u0026#34;Jimmy\u0026#34; 6myStruct.grade = 10 7 8// 自訂型別, 前面使用type 這個關鍵字 9type myStruct struct { 10 name string 11 grade int 12} 13 14// 自訂型別也能加入method 15func (m myStruct) hello() string { 16 return \u0026#34;hello\u0026#34; 17} 18// 自訂型別也可以加入getter /setter 封裝裡面的資料結構 19func (m *myStruct) SetName(name string){ 20 m.name = name 21} 22 23func (m *myStruct) Name() string { 24 return m.name 25} 26 27 28// 透過指標存取結構 29func applyDiscount(s *subscriber){ 30 s.rate = 4.99 31} 32 33func main() { 34 var s subscriber 35 applyDiscount(\u0026amp;s) 36} 結構裡面可以有另外一個結構，而Go另外還支援了匿名結構欄位，不用特別設定名稱也可以直接帶進去結構裡\n1type Employee struct { 2 Name string 3 Salary float64 4 Address 5} 6 7type Address struct { 8 ...... 9} 介面 interface 在 Go 裡面也有介面的概念，定義某些特定得值與某些特定的行為。\n1type myInterface interface { 2 methodOne() 3 methodTwo(float64) 4 method() string 5} 測試 在Go 裡面，我們可以使用testing 這個套件，首先是要讓我們在同樣的套件底下建立一個_test 結尾的Go 檔案，話不多說，show you some code !\n1func TestFunction(t *testing.T){ 2 ......(略) 3 if ...(略) 4 t.Errorf(\u0026#34;......\u0026#34;) 5} function programming 在Go 裡面， function 本身也能夠被視為變數, 型別處理，像是\n1// 此範例來自深入淺出Go p.439 2func callFunction(passedFunction func()){ 3 passedFunction() 4} 5 6func callTwice(passedFunction func()){ 7 passedFunction() 8 passedFunction() 9} 10 11func callWithArguments(passedFunction func(string, bool)){ 12 passedFunction(\u0026#34;this sentence is\u0026#34;,false) 13} 14 15func printReturnValue(passedFunction func() string){ 16 fmt.Println(passedfunction()) 17} 18 19func functionA(){ 20 fmt.Println(\u0026#34;function called\u0026#34;) 21} 22 23func functionB() string{ 24 fmt.Println(\u0026#34;function called\u0026#34;) 25 return \u0026#34;Returning from function\u0026#34; 26} 27 28func functionC(a string , b bool){ 29 fmt.Println(\u0026#34;function called\u0026#34;) 30 fmt.Println(a,b) 31} 32 33func sayHi(){ 34 fmt.Println(\u0026#34;Hi\u0026#34;) 35} 36 37func main(){ 38 var myFunction = func() 39 myFunction = sayHi 40 myFunction() 41 42 callFunction(functionA) 43 callTwice(functionA) 44 callWithArguments(functionC) 45 printReturnValue(functionB) 46} 相關指令 go build ：編譯成二進位 go run ：編譯及執行 go fmt ：格式化原始碼 go version ：go 的版本 go test : 測試go go doc : 說明文件 小君曰：來學Go 啦， go !\n","date":"Apr 10, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%981-helloworld/","series":["go 學習筆記"],"smallImg":"","tags":["golang"],"title":"Go學習筆記(1): HelloWorld"},{"categories":["程式"],"content":"從大二開始研究怎麼當一名駭客之後，開始接觸Python, 出社會後也常常用Python 開發我個人的工具包，可說是這幾年來個人 Python 的功力大漲！\n最近在邊寫邊查資料的過程當中，認識到Python的 Lambda,Map和Reduce\n於是，就讓我寫一篇文章記錄這一切吧 ＾＾\nLambda 此 Lambda 不是 AWS的Lambda ,我也不知道為什麼這裡要取和AWS的Lambda一樣的名稱哈哈，總之他是一種Python裡面的表示式，可以更加簡便、更加Function programming 的呈現程式碼，不多贅述，我最喜歡 Show me the code了！\n1# 通常我們定義Function是長這個樣子（順便我也想練習強型別，Python也支援喔） 2def demoX(x:int) -\u0026gt; int: 3 return x + 10; 4 5print(demoX(20)) //output-\u0026gt; 30 其實蠻落落長的，所以Python說，要有Lambda , 就有Lambda\n1demoX = lambda x: x+10 2 3print(demoX(20)) 好了，我附上參考網址結束這一切：\nhttps://openhome.cc/Gossip/Python/LambdaExpression.html Map和Reduce Map , Filter和 Reduce 我想要放在一起說，如果常寫Function Programming的對這兩個單字一定不陌生，Laravel的Collection也有這些方法。沒錯，他們的用法其實和他們的單字意思很像呢！\n1# map(function_to_apply, list_of_inputs) 2a = list(map(lambda a: a+2,[1,2,3])) 3print(a) # [3,4,5] map 其實就會迭代列表中的每一個項目，最後回傳出來的是一個map的物件，記得之後要用list才能把它印出來喔\n1a = list(filter(lambda a: a\u0026gt;2,[1,2,3,4,5,6])) 2print(a) # [3, 4, 5, 6] filter 其實和map很像，只是它是過濾項目，一樣他是個filter的物件，一樣需要list，所以你的function裡面請回傳出boolean，這我就不多說明啦～\n1from functools import reduce 2 3a = reduce(lambda a,b: a+b,[1,2,3]) 4print(a) # 6 至於 reduce需要先 import 喔，只要有一個有兩個參數的function , 他就會迭代這清單的項目做出最後的結果\n參考網址:\nhttps://book.Pythontips.com/en/latest/map_filter.html 小君曰：Python也能Function Programming !\n","date":"Apr 3, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E8%AB%87Python-lambda-map-filter-%E5%8F%8A-reduce/","series":null,"smallImg":"","tags":["filter","map","python","reduce"],"title":"談Python: Lambda, Map , Filter 及 Reduce"},{"categories":["工作筆記"],"content":"最近工作比較沒有什麼新鮮事，所以開始在將手上專案有比較完整的文件化之後，開始逐步導入TDD ,寫一些Unit Test 以確保程式碼的品質。\n但老實說：我還是不是太懂Laravel Feature 和 Unit 這兩個資料夾的區別？我知道Unit 是要做單元測試，是測試那個類別的行為，但我目前大多都在寫Feature Test\u0026hellip; 如果有大大知道Unit 該在何時寫、什麼情境下要寫，歡迎不吝賜教！\n研究Socket/API Gateway 因為要導入官網購物車購買，討論一連串的流程與討論，最後希望我Laravel 要開一個socket server，但研究的結果其實發現 因為我們專案的版本比較低，所以沒辦法使用Laravel-Websocket 套件，也就是在Laravel 裡面自己開socket server 那種，變成我們要另外用Node 的套件去建立\u0026hellip; 然後\u0026hellip; 又衍伸第二種方案，在AWS Api-gateway 架起websocket api ，然後他可以指定動作去call API\u0026hellip;\n這個方案很好玩\u0026hellip; 不過在研究初期卡關在怎麼用Laravel 取出 connectid , 因為AWS example 是用Node 的Lambda 去串的，很簡單就取出connectid\u0026hellip; 。我Laravel 怎麼print request 的body 還是 header ，顯然就是找不太到那個connectid \u0026hellip;\n後來實在有點卡太久了(大概一天)，被同事叫我去寫AWS Support XD\n人生第一次寫AWS Support 耶，然後AWS 團隊真的很用心很貼心，告訴我很詳細的步驟及方法、解決方案，原來，如果要讓Laravel 的 後端讀得到 connectid ，是要透過CLI 去設定啊\u0026hellip; (目前API gateway 控制台還沒有支援這個)，不然就是需要把integration type 改成 HTTP ，去寫 request template 這樣。\n總之，這次經驗讓我更認識 API gateway 和 socket 啦！預計之後想要開一系列深入研究Laravel 的系列，想要寫broadcast 的部分，希望今年可以完成這個寫作計畫 ＾＾\n網站可靠性工程工作導讀 我們每個禮拜都會有小組的例會，小組的成員都需要報告一下我們各自的狀況與專案進度，然而在今年我們組長要求大家輪流每個禮拜都要分享一下技術議題，不管他是前端還是後端皆可。\n我個人覺得這是很好的一個文化，但最近也常常聽到同事在講對他們有一點小小的loading\u0026hellip;。有點不知道耶，明明是很棒的事情為什麼反而有點造成不太好的效果？我們的專案真的有點多而且每個人負責很多啊，不太平均\u0026hellip;\u0026hellip;\n話說回來，大概這樣輪流每個人平均一個月講一次，所以這個月就帶來我讀網站可靠性工作工程的心得與收穫～\n之前，也曾經參加這本書的導讀會，大家可以參考：網站可靠性工程工作手冊導讀會一遊 然後值得一講的是後面補充文章有一則：技術債觀念及實務 因為在查一些SRE 和 DevOps 相關文章時就不小心逛到，在這篇文章讀到：\n另一方面，著有《Domain-Driven Design》一書的 Eric Evans ，對於處理舊有程式碼（legacy code），也曾提出過一個叫做「戰略設計（Strategic Design）」的觀念。Eric Evans 認為，在一個系統中，根本不可能所有的程式碼都維持夠高的品質，而且，有些情況下，有些程式碼也沒有必要一定非得是高品質。這是個相當務實的觀念，如果我們很現實的來計較在開發過程中每一份生產力的 C/P 值，那麼，維持一些程式碼的完美，需要付出的代價太高，但這些程式碼即使完美對整個系統的效用卻不大時，是否應該讓它們也被一視同仁地被維持高品質？ \u0026mdash; By 技術債觀念及實務\n這帶給我寫程式上面莫大省思與體悟，原來，寫程式也像DevOps 一樣「不應該」去要求百分百可靠度(完美)\n以前我都覺得自己要每一行寫得很棒很好，這是一種工程師對自我的要求\u0026hellip; 反而導致每一次我寫功能之後就會每次檢討自己、總是花很多時間在想下一次怎麼可以寫更好，但有時候下一次也不一定像這一次可以要求寫得很好\u0026hellip;\n而DevOps 和剛剛讀到的技術債觀念及實務帶給我在寫程式上面的一個心態轉變，應該要對於不同的程式碼有不同的權重分配，有些可以選擇粗略地寫，只要功能有夠、排版讓人覺得算ok，這樣就好;而有些需要好好每次的重構每次的改善，讓程式碼可以越來越易讀！\n總之，這是我當天報告用的ppt ，希望能幫助到大家～\nhttps://www.slideshare.net/ssusereb2ee2/ss-243972736 小君曰：每個工程師的心中都應該要有DevOps !\n","date":"Mar 20, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB11-%E6%AF%8F%E5%80%8B%E4%BA%BA%E7%9A%84%E5%BF%83%E4%B8%AD%E9%83%BD%E8%A6%81%E6%9C%89devops/","series":["原來可以這麼寫"],"smallImg":"","tags":["DevOps","laravel","Socket","SRE"],"title":"原來可以這麼寫(11): 每個人的心中都要有DevOps"},{"categories":["程式"],"content":"最近在玩Redis, 記錄起來才不會忘！\n利用Docker 迅速起一個redis container 你可以去官網按照他的說明下載redis, 但我這裡選擇用docker 來起一個簡單的redis 服務首先我的dokcer-compose.yml 是這樣寫：\n1# ...(略) 2### Redis Container ####################################### 3 redis: 4 image: redis:alpine 5 ports: 6 - \u0026#34;6379:6379\u0026#34; 7# ...(略) 然後使用 docker-compose up -d 就可以起一個簡單的redis server, 你可以使用Another Redis Desktop Manager 去連線它看看狀況\n指令與相關說明 簡單來說，redis 就是一個key-value 的 in-memory 資料庫。\n首先，我們需要進去一下redis cli\u0026hellip;只要docker exec -it {你docker-composer.yml 所在的資料夾名稱}\\_redis\\_1 sh\\就可以進入redis container 裡面，之後在container 裡面執行`redis-cli`即可\nGET/SET 最簡單你一定要學到的redis 指令就是：SET和 GET!\n1127.0.0.1:6379\u0026gt; SET name Jimmy 2OK 3127.0.0.1:6379\u0026gt; GET name 4\u0026#34;Jimmy\u0026#34; MGET/MSET 每次只能設定一個那怎麼行？你可以一次設定多個\n1127.0.0.1:6379\u0026gt; MSET first \u0026#34;Hello\u0026#34; second \u0026#34;World\u0026#34; 2OK 3127.0.0.1:6379\u0026gt; MGET second first 41) \u0026#34;World\u0026#34; 52) \u0026#34;Hello\u0026#34; EXPIRE 既然是一個key-value 的 in-memory 資料庫，他就不像一般Relational database 一樣，只能永久保存資料，你可以設定這個key 的保留期間\n1127.0.0.1:6379\u0026gt; SET session \u0026#34;HelloWorld\u0026#34; 2OK 3127.0.0.1:6379\u0026gt; EXPIRE session 10 4(integer) 1 5127.0.0.1:6379\u0026gt; GET session 6\u0026#34;HelloWorld\u0026#34; 7127.0.0.1:6379\u0026gt; GET session 8(nil) EXIST / DEL 你也可以判斷這個key 存在不存在, 以及刪除那個key\n1127.0.0.1:6379\u0026gt; EXISTS name 2(integer) 1 3127.0.0.1:6379\u0026gt; DEL name 4(integer) 1 5127.0.0.1:6379\u0026gt; EXISTS name 6(integer) 0 INCR / DECR redis 還自帶遞增和遞減的指令。\n1127.0.0.1:6379\u0026gt; SET counter 100 2OK 3127.0.0.1:6379\u0026gt; INCR counter 4(integer) 101 5127.0.0.1:6379\u0026gt; GET counter 6\u0026#34;101\u0026#34; 7127.0.0.1:6379\u0026gt; DECR counter 8(integer) 100 9127.0.0.1:6379\u0026gt; GET counter 10\u0026#34;100\u0026#34; INCRBY / DECRBY 每次只能遞增和遞減一個那怎麼可行？\n1127.0.0.1:6379\u0026gt; SET counter 100 2OK 3127.0.0.1:6379\u0026gt; INCRBY counter 100 4(integer) 200 5127.0.0.1:6379\u0026gt; GET counter 6\u0026#34;200\u0026#34; 7127.0.0.1:6379\u0026gt; DECRBY counter 100 8(integer) 100 9127.0.0.1:6379\u0026gt; GET counter 10\u0026#34;100\u0026#34; keys * 這個指令可以讓你看到目前設定在redis 裡面所有的key\n1127.0.0.1:6379\u0026gt; keys * 21) \u0026#34;first\u0026#34; 32) \u0026#34;counter\u0026#34; 43) \u0026#34;second\u0026#34; Redis 的資料型態 redis 支援以下型態，上面已經充分示範出string 這個簡單的型態。接下來展示其他沒有在上面示範過的型態！\nstring(字串) hash(雜湊) list(串列) set(群集) sorted set(有序群集) Hash 就像HMSET 的說明一樣：HMSET key field value [field value ...]以底下的說明來說，就像產生了這樣的資料型態：{id: 45, name: Jimmy}\n1127.0.0.1:6379\u0026gt; HMSET user id 45 name \u0026#34;Jimmy\u0026#34; 2OK 3127.0.0.1:6379\u0026gt; HGET user id 4\u0026#34;45\u0026#34; 5127.0.0.1:6379\u0026gt; HGET user name 6\u0026#34;Jimmy\u0026#34; 7127.0.0.1:6379\u0026gt; HGETALL user 81) \u0026#34;id\u0026#34; 92) \u0026#34;45\u0026#34; 103) \u0026#34;name\u0026#34; 114) \u0026#34;Jimmy\u0026#34; List 和javascript 的想法很像，有push 和pop , L代表左邊, R代表右邊啊那個如果要列出清單可以用LRANGE指令\n1127.0.0.1:6379\u0026gt; LPUSH mylist 10 \u0026#34;Hello\u0026#34; 2(integer) 2 3127.0.0.1:6379\u0026gt; LRANGE mylist 0 1 41) \u0026#34;Hello\u0026#34; 52) \u0026#34;10\u0026#34; 6127.0.0.1:6379\u0026gt; RPUSH mylist \u0026#34;World\u0026#34; 20 7(integer) 4 8127.0.0.1:6379\u0026gt; LRANGE mylist 0 3 91) \u0026#34;Hello\u0026#34; 102) \u0026#34;10\u0026#34; 113) \u0026#34;World\u0026#34; 124) \u0026#34;20\u0026#34; 13127.0.0.1:6379\u0026gt; LPOP mylist 14\u0026#34;Hello\u0026#34; 15127.0.0.1:6379\u0026gt; LRANGE mylist 0 3 161) \u0026#34;10\u0026#34; 172) \u0026#34;World\u0026#34; 183) \u0026#34;20\u0026#34; 19127.0.0.1:6379\u0026gt; RPOP mylist 20\u0026#34;20\u0026#34; 21127.0.0.1:6379\u0026gt; LRANGE mylist 0 3 221) \u0026#34;10\u0026#34; 232) \u0026#34;World\u0026#34; Set \u0026 Sorted Set set 沒有排序得權重，而且不可以增加重複的值 1127.0.0.1:6379\u0026gt; SADD myset 1 2 3 4 5 2(integer) 5 3127.0.0.1:6379\u0026gt; SMEMBERS myset 41) \u0026#34;1\u0026#34; 52) \u0026#34;2\u0026#34; 63) \u0026#34;3\u0026#34; 74) \u0026#34;4\u0026#34; 85) \u0026#34;5\u0026#34; 9127.0.0.1:6379\u0026gt; SISMEMBER myset 5 10(integer) 1 11127.0.0.1:6379\u0026gt; SISMEMBER myset 50 12(integer) 0 13127.0.0.1:6379\u0026gt; SADD myset 1 14(integer) 0 15127.0.0.1:6379\u0026gt; SADD myset 10 16(integer) 1 17127.0.0.1:6379\u0026gt; SMEMBERS myset 181) \u0026#34;1\u0026#34; 192) \u0026#34;2\u0026#34; 203) \u0026#34;3\u0026#34; 214) \u0026#34;4\u0026#34; 225) \u0026#34;5\u0026#34; 236) \u0026#34;10\u0026#34; sorted set 有排序得權重 1127.0.0.1:6379\u0026gt; ZADD mysortedset 1 Jimmy 2(integer) 1 3127.0.0.1:6379\u0026gt; ZADD mysortedset 0 Jim 4(integer) 1 5127.0.0.1:6379\u0026gt; ZRANGE mysortedset 0 1 61) \u0026#34;Jim\u0026#34; 72) \u0026#34;Jimmy\u0026#34; 8127.0.0.1:6379\u0026gt; ZRANK mysortedset Jimmy 9(integer) 1 同場加映：pub/sub laravel broadcast 如果你的driver 設定的是 redis , 你會看到文件會寫道使用redis 的pub/sub 來實現，但這個其實很難透過GUT 去看，首先，你需要開兩個redis-cli\nA. Redis cli\n1127.0.0.1:6379\u0026gt; SUBSCRIBE mychannel 2Reading messages... (press Ctrl-C to quit) 31) \u0026#34;subscribe\u0026#34; 42) \u0026#34;mychannel\u0026#34; 53) (integer) 1 B. Redis Cli 在這裡你可以用PUBLISH 指令\n1127.0.0.1:6379\u0026gt; PUBLISH mychannel \u0026#34;HelloWorld\u0026#34; 2(integer) 1 這時你回到Ａ 來看，奇蹟發生了！底下多了message, mychannel, HelloWorld !\n1127.0.0.1:6379\u0026gt; SUBSCRIBE mychannel 2Reading messages... (press Ctrl-C to quit) 31) \u0026#34;subscribe\u0026#34; 42) \u0026#34;mychannel\u0026#34; 53) (integer) 1 61) \u0026#34;message\u0026#34; 72) \u0026#34;mychannel\u0026#34; 83) \u0026#34;HelloWorld\u0026#34; 有趣吧？\n小君曰：redis 一日遊\n","date":"Mar 13, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/redis%E7%AD%86%E8%A8%98/","series":null,"smallImg":"","tags":["redis"],"title":"Redis筆記"},{"categories":["程式"],"content":"在以前公司工作的時候，有點忘了是遇到什麼情境，總之我就看到Python 有這樣的一個套件庫：Paramiko\n話不多說，我們就給大家來看文件吧：http://www.paramiko.org/ 然後就結束這一回合（阿不是！\n他是一個和SSH 有關的套件庫，是可以使用Python 直接在遠端給他執行程式起來\u0026hellip; 啊寫文章的同時我就想到了！之前我們好像是要做那個資料庫備份什麼的, 然後有發現說有時server 會不夠空間backup , 所以後來我就用這個套件透過本機去連結遠端執行 df -h 的指令，以方便告訴我到底有沒有足夠的空間這樣\u0026hellip;. 不然每次連線打指令實在很麻煩\u0026hellip;\n然後 , 我最喜歡的是： show you the code !\n1import paramiko 2 3paramiko.util.log_to_file(\u0026#39;paramilo.log\u0026#39;) 4key = paramiko.RSAKey.from_private_key_file(\u0026#34;pem path...\u0026#34;) 5 6ssh = paramiko.SSHClient() 7ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) 8ssh.connect(hostname=\u0026#39;......\u0026#39;,username=\u0026#39;user\u0026#39;,pkey=key) 9 10stdin, stdout, stderr = ssh.exec_command(\u0026#39;df -h\u0026#39;) 11 12result = open(\u0026#39;log.txt\u0026#39;,\u0026#39;wb\u0026#39;) 13result.write(stdout.read()) 14result.close() 15 16ssh.close() 小君曰：我到底寫了什麼\u0026hellip;?\n","date":"Feb 6, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-paramiko-%E7%AD%86%E8%A8%98/","series":null,"smallImg":"","tags":["paramiko"],"title":"Python Paramiko 筆記"},{"categories":["工作筆記"],"content":"來到第十篇原來這麼寫啦，看來這個系列真的常駐我這個部落格真的很久呢！\n要冷靜啊！ 然後這次真的是史上我接過任務最難的一波，有一天還差點情緒崩潰在工作現場爆哭\u0026hellip; 真的覺得自己很丟臉很誇張\u0026hellip;\u0026hellip;\n不過事後想想，那是因為我自己對自己的要求也實在太高了，也一直過度自責、苛責自己的規劃上有很大的問題\u0026hellip;.. 真的很辛苦各位我的同事。總之，這次的經驗告訴我：要努力試著讓情緒歸情緒、工作歸工作。哭完，問題還是在那裡，我們一定要努力地解決問題。工程師的存在正是為此啊。 我自己最喜歡得形容詞就是忠心！忠心於工作、忠心於自己的技術能力、也忠心於自己的信仰。我想藉著上面的事件也再度應證與難怪自己為什麼會有那種過度反應了吧 結論是：calm down ! 挽起袖子來解決問題\n小說的匯入任務 這個任務為什麼對我來說蠻困難的，我覺得技術問題是一回事，其次我自己也檢討是不是太晚將問題丟出來了？我的個性常常是獨立做事，說真的還蠻就事論事得、原生工程師性格。而我通常認為我自己不是那個第一個遇到同樣問題的人，所以總是自己想辦法處理、想辦法解決\u0026hellip;. 像是Laravel 的開發與專案、API維護上，我其實就非常游刃有餘、自由自在。(當然溝通上面的gap 與問題是需要慢慢的與團隊磨合與自己努力調整的)，DevOps 的精神就是逐步改善麻！\n但我卻忽略有時候其實是有時間上的問題，在過年前要匯入這麼多的小說，一共12000多章節，剛好我台東人在過年期間卻要請長長的年假，我才驚訝發現：我hold 不住了。看來，下次也要注意時間，好讓PM與SA 能夠發覺與注意到我的狀況，能hold 住專案。\n自動匯入方案的產生 不過還好啦，謝謝同事、夥伴們的體諒與幫助。在禮拜五怒給他加班到十一點的時候把這個自動化方案寫出來(但當然啦，這個我覺得也需要事先給PM測試，所以同時我也預備自己的手動匯入程式方案\u0026hellip;但等等分享我遇到的問題與啟發)\n手動匯入的些許失敗經驗與啟發 但說真的，小說匯入其實這次第二波了。上一次真的我自己沒有準備好\u0026hellip; 可是這次我吸取第一次的失敗經驗，重新調整流程、設計。於是這次在匯入資料上面就非常的順利，還記得第一次營運單位有兩天的時間都無法到後台修改資料\u0026hellip;但這次一個下午就搞定了。\n事實上，我只是把匯入分成兩個階段進行，第一階段是把資料放進去資料庫(就是這個步驟才會不建議營運單位修改資料，以免我們的id 亂跳\u0026hellip;)，而第二階段是去別人小說的網站把音擋下載下來上傳到我們server上的指定位置，驅動我們同事寫好的自建音檔模組。於是完成了這整個匯入流程。\n而第二階段的處理原本我用Python 寫 request.get(url) 這樣去下載，寫檔案後上傳的“同步方案”，一支處理就要10秒多\u0026hellip;. 然後12000多就\u0026hellip; 超級慢的啦！\n中間還遇到工作電腦爆掉的問題\u0026hellip; 真的是很衰\u0026hellip; 第一次遇到\u0026hellip;. 但所幸謝謝我們家的MIS幫我工作電腦換好一個power 這樣，於是只有一點點時間是不知道怎麼辦而已。\n隔天早上，發現我那支居然跑到一半不跑了\u0026hellip; 還好我之前在設計上有納入可中斷性，就算中斷了重新執行也可以從還沒處理的部分繼續接著處理\u0026hellip; 但就像剛剛說的一個一個上傳真的很慢啊\u0026hellip;. 於是開始研究 Python 的 非同步方案版本\u0026hellip;\n1import aiohttp 2import aiofiles 3import asyncio 4import time 5import os 6 7 8#定義協程(coroutine) 9async def main(links): 10 11 async with aiohttp.ClientSession() as session: 12 tasks = [ 13 asyncio.create_task(fetch(data[\u0026#39;url\u0026#39;], data[\u0026#39;episodeId\u0026#39;], session)) for data in links 14 ] # 建立任務清單 15 await asyncio.gather(*tasks) # 打包任務清單及執行 16 17 18#定義協程(coroutine) 19async def fetch(link, id, session): 20 async with session.get(link) as response: #非同步發送請求 21 if response.status == 200: 22 f = await aiofiles.open(\u0026#39;/tmp/file.mp3\u0026#39;, mode=\u0026#39;wb\u0026#39;) 23 await f.write(await resp.read()) 24 await f.close() 25 try: 26 # s3 upload 27 print(\u0026#34;{} upload success\u0026#34;) 28 except Exception as e: 29 print(\u0026#34;{} upload error\u0026#34;) 30 31 os.remove(\u0026#39;tmp/file.mp3\u0026#39;) 32 33 34 35start_time = time.time() #開始執行時間 36loop = asyncio.get_event_loop() #建立事件迴圈(Event Loop) 37 38# episodes = ... 39 40loop.run_until_complete(main(episodes)) #執行協程(coroutine) 41print(\u0026#34;花費:\u0026#34; + str(time.time() - start_time) + \u0026#34;秒\u0026#34;) 於是，我在家中研究寫了這樣一個模擬出來的程式碼\u0026hellip; 然後執行下卻發現\u0026hellip; 靠 檔案因為非同步的關係所以就產生Permission error的錯誤，在修正後變成以下這個版本\u0026hellip;(但不是全部程式碼，僅是示意)\n1import aiohttp 2import aiofiles 3import asyncio 4import time 5import os 6 7 8#定義協程(coroutine) 9async def main(links): 10 11 async with aiohttp.ClientSession() as session: 12 tasks = [ 13 asyncio.create_task(fetch(data[\u0026#39;url\u0026#39;], data[\u0026#39;episodeId\u0026#39;], session)) for data in links 14 ] # 建立任務清單 15 await asyncio.gather(*tasks) # 打包任務清單及執行 16 17 18#定義協程(coroutine) 19async def fetch(link, id, session): 20 await asyncio.sleep(10+int(random.random()*10)) 21 try: 22 async with session.get(link) as response: 23 if response.status == 200: 24 FileHelper.upload_s3_audio_files(id, await response.read()) 25 print(\u0026#34;{} upload success\u0026#34;.format(id)) 26 else: 27 print(\u0026#39;status not 200\u0026#39;) 28 print(\u0026#34;{} upload error\u0026#34;.format(id)) 29 except Exception as e: 30 print(e) 31 print(\u0026#34;{} upload error\u0026#34;.format(id)) 32 33 34 35start_time = time.time() #開始執行時間 36loop = asyncio.get_event_loop() #建立事件迴圈(Event Loop) 37 38# episodes = ... 39loop.run_until_complete(main(episodes)) #執行協程(coroutine) 40 41print(\u0026#34;花費:\u0026#34; + str(time.time() - start_time) + \u0026#34;秒\u0026#34;) 但還是無法解決所有的問題，有時還是會噴一堆錯誤，或者是Response payload is not completed , 因此\u0026hellip; 還在想一想怎麼樣可以更好\u0026hellip;\n但比較好的是：因為這是第一次匯入，當然資料爆多。之後的更新就不會有那麼多了\u0026hellip; 而確實使用非同步的寫法與方案在第二階段處理上快了很多\u0026hellip;\n此事件帶來我的啟發是：這麼大量的上傳下載處理還是要搞非同步啊\n小君曰：看來，我需要好好理解非同步程式設計啊\u0026hellip;.\n","date":"Jan 30, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB10%EF%BC%9A%E5%90%8C%E6%AD%A5%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5/","series":["原來可以這麼寫"],"smallImg":"","tags":["data-import"],"title":"原來可以這麼寫(10)：同步與非同步"},{"categories":["工作筆記"],"content":"祝大家新年快樂。原來可以這麼寫這個系列終於來到第九篇！\n說聲好消息，最近工作獲得肯定(撒花～)。只是不知道年終到底有多少\u0026hellip;搞不好\u0026hellip;其實很少\u0026hellip;. 這個就題外話啦，在這個公開網路場合還是不宜多說XD\n從資料庫匯出資料 最近接到一個需求，是要從資料庫匯出資料。其實這個東西並不是很難，寫寫SQL 語法就能搞定\u0026hellip;但因為安全的因素我們的資料庫通常要透過SSH 跳板才能進去。可是他們匯出資料的需求是要by 一個顧客（客戶），你媽咧我難道一個一個SQL 撈出來然後再丟進Excel 嗎？\n不！這絕對不是工程師的思維\u0026hellip; 後來想想我在我第一份工作的時候開啟了一個side project : office: https://github.com/r567tw/office 那時候為什麼我要開啟這個專案呢？原因是，我當時負責重構一個網站系統，是用Laravel 重構原本native php 改寫的報名網站\u0026hellip;. (這大概可以說是我工程師生涯其中一個直得常常拿出來說嘴的一個成就\u0026hellip;但當然啦我之後在想覺得那時候我初出茅廬才維護一年多就改寫實在有點冒險\u0026hellip;只怪我當時太年輕太衝動太不懂事了\u0026hellip;. 裡面還是有一些遺珠之憾等級的小後悔～)\n啊話說開了，總之那時候有要驗證台灣的身分證字號，還有生成台灣的身分證字號\u0026hellip;這當然網路上可以有工具可以用啦，但你不覺得開瀏覽器-\u0026gt;搜尋-\u0026gt; 點進網址 -\u0026gt; 可能還有點一些按鈕bla 的才能搞定自己的需求很麻煩嗎？\n於是你看到office 裡面就有一個資料夾應運而生：id_card_number 隨著時間推移，裡面的工具也越來越多XD\n這次我就用到使用ssh 連接到database 來幫我完成需求的工具：connectDBthoughSSH\n1import pymysql 2import sshtunnel 3import dotenv 4import os 5 6dotenv.load_dotenv() 7 8server = sshtunnel.SSHTunnelForwarder( 9 ssh_address_or_host=(os.getenv(\u0026#39;SSH_HOST\u0026#39;), 22), # 指定ssh登入的跳轉機的address 10 ssh_username=os.getenv(\u0026#39;SSH_USER\u0026#39;), # 跳轉機的使用者 11 ssh_pkey=os.getenv(\u0026#39;SSH_PEM_PATH\u0026#39;), # 跳轉機的密碼 12 remote_bind_address=(os.getenv(\u0026#39;DB_HOST\u0026#39;), 3306) 13) 14 15server.start() 16 17db = pymysql.connect( 18 host=\u0026#39;127.0.0.1\u0026#39;, 19 port=server.local_bind_port, 20 user=os.getenv(\u0026#39;DB_USER\u0026#39;), 21 passwd=os.getenv(\u0026#39;DB_PASSWORD\u0026#39;), 22 db=os.getenv(\u0026#39;DB_DATABASE\u0026#39;) 23) 24 25cur = db.cursor(pymysql.cursors.DictCursor) 26 27cur.execute(\u0026#39;select id,name from clients\u0026#39;) 28 29clients = cur.fetchall() 30 31db.close() 32server.close() 接下來，拿到sql 的資料之後就是Python 和 excel 的問題了，撒花！\n匯入第二波小說資料 因為目前時程與安排的緣故，目前匯入資料暫時由工程師處理，前面的應用到step function 就是其中一環的應用，但說真的，前面這一環的資料匯入，我開發幾個 laravel 的 api , 實在規劃的! 很！爛！ 我愧對我作為工程師的身份啊\u0026hellip;\n經過漫長快一個禮拜的規劃\u0026hellip; 我想到他馬的我為什麼要繼續用PHP完成我這個需求？用Python 呢？\n再經過兩～三天的研究與開發, Python 的版本終於應運而生！不過裡面資料先暫時用在sqlite 上面, 之後我想把它放在mysql 資料庫上面\u0026hellip; 然後寫好專案裡面的readme和說明，不用我只要大家用這個程式就可以做使用，多自動化多方便啊\u0026hellip; 這是我這個的最終目標啊！\n嘗試做一些改變 目前，我是一名後端工程師，我的專案其實就只有一個。這一個專案負責官網、後台、ios/android app 的API, 同時也需要與交易的 Lambda 溝通，去年我甚至也主導單集銷售模式的Lambda 開發，而我在接手此專案的過程中曾發下宏願：\n完整文件化 導入TDD,甚或是DDD , 強化程式碼品質、程式碼架構彈性 目前我自認自己將文件化的目標至少有70-80％，我很努力的研究swagger 怎麼寫，創造一個較為優良的swagger文件的環境，整理目前就我角度上專案的開發現況，導入代碼表的文件在每個需要代碼的swagger 文件。也在多次與app team/PM/官網/後台 有多次的溝通摩擦、gap , 雖然是有點加重了我個人的loading , 但至少在開發前做一次好好地確認、流程、導入mock api 的機制先在開發前作討論。\n我不知道，我這樣的做法，是否對於各方角度team 有好的成效、好的溝通效率？甚願可以。希望可以。畢竟API 的 DX 很差，那我這個後端工程師真的不用在繼續幹下去了!\n接下來，**希望完成資料庫的文件化，也希望程式的TDD, 測試能一一地補上。**這是我接下來要努力的目標之一。\n每次改變一點點，這也是DevOps 文化的其中一環麻。\n小君曰：原來這次我是Python工程師？\n","date":"Jan 18, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB9%E7%B5%90%E6%9E%9C%E6%88%91%E8%AE%8A%E6%88%90Python-%E5%B7%A5%E7%A8%8B%E5%B8%AB%EF%BC%9F/","series":["原來可以這麼寫"],"smallImg":"","tags":["python"],"title":"原來可以這麼寫(9):結果我變成Python 工程師？"},{"categories":["程式"],"content":"最近工作用到一些工具，使用到AWS step function , 因此在這裡也筆記一下\u0026hellip; 也在公司後端組例會分享了一下（以下就是我分享的PPT ）：\nhttps://www.slideshare.net/ssusereb2ee2/aws-stepfunction 其實我覺得我用的情境很簡單，只是用Map 的方式啟動lambda . 這個 lambda 就是我用來處理下載與上傳到s3指定位置\u0026hellip; 說真的應用的情境真的很不多\u0026hellip; 還有更多著墨的空間。\n另外，自己同時也針對此寫了兩個版本，用SAM 和 用 CDK 的版本\u0026hellip;\n一、CDK 的版本\n1import * as cdk from \u0026#39;@aws-cdk/core\u0026#39;; 2import * as lambda from \u0026#34;@aws-cdk/aws-lambda\u0026#34; 3import * as stepfunctions from \u0026#34;@aws-cdk/aws-stepfunctions\u0026#34; 4import * as tasks from \u0026#34;@aws-cdk/aws-stepfunctions-tasks\u0026#34; 5import * as logs from \u0026#34;@aws-cdk/aws-logs\u0026#34; 6import * as s3 from \u0026#34;@aws-cdk/aws-s3\u0026#34; 7import * as ec2 from \u0026#34;@aws-cdk/aws-ec2\u0026#34; 8import * as dotenv from \u0026#39;dotenv\u0026#39;; 9 10export class CdkLambdaStack extends cdk.Stack { 11 constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) { 12 super(scope, id, props); 13 14 // 將裡面比較敏感的資訊用env 包起來, 注意後面的path 要正確 15 dotenv.config({path:__dirname+\u0026#39;/../.env\u0026#39;}) 16 17 // 我要上傳音檔的S3 目標 arn:aws:s3:::test 為虛構（我忘了把這個也包env了哈哈） 18 const bucket = s3.Bucket.fromBucketArn(this,\u0026#34;test\u0026#34;,\u0026#34;arn:aws:s3:::test\u0026#34;) 19 20 // 負責前面呼叫step function 的 lambda 21 const downloadAudioLambda = new lambda.Function(this, \u0026#34;downloadAudioLambda\u0026#34;, { 22 runtime: lambda.Runtime.NODEJS_12_X, 23 timeout: cdk.Duration.seconds(25), 24 handler: \u0026#34;index.handler\u0026#34;, 25 code: lambda.Code.fromAsset(\u0026#34;lambda/downloadAudioLambda\u0026#34;) 26 }); 27 28 bucket.grantPut(downloadAudioLambda) 29 30 const downloadAudioJob = new tasks.LambdaInvoke(this,\u0026#39;Calllambda\u0026#39;,{ 31 lambdaFunction: downloadAudioLambda, 32 outputPath: \u0026#34;$.Payload\u0026#34; 33 }) 34 35 const map = new stepfunctions.Map(this, \u0026#39;ExampleMapState\u0026#39;); 36 map.iterator(downloadAudioJob); 37 38 const logGroup = new logs.LogGroup(this, \u0026#39;StepFunctionLogs\u0026#39;) 39 40 const stateMachine = new stepfunctions.StateMachine(this, \u0026#39;StateMachine\u0026#39;, { 41 definition: map, 42 logs: { 43 destination: logGroup, 44 level: stepfunctions.LogLevel.ERROR 45 } 46 }); 47 48 const testVpc = ec2.Vpc.fromLookup(this,\u0026#34;vpc-dev\u0026#34;,{ 49 vpcId: process.env.VPCID 50 }); 51 52 const processorLambda = new lambda.Function(this, \u0026#34;processorLambda\u0026#34;, { 53 runtime: lambda.Runtime.NODEJS_12_X, 54 handler: \u0026#34;index.handler\u0026#34;, 55 timeout: cdk.Duration.seconds(25), 56 code: lambda.Code.fromAsset(\u0026#34;lambda/processor\u0026#34;), 57 vpc: testVpc, 58 environment: { 59 ENDPOINT: process.env.ENDPOINT ?? \u0026#39;localhost\u0026#39;, 60 DATABASE: process.env.DATABASE ?? \u0026#39;db\u0026#39;, 61 DBUSERNAME: process.env.DBUSERNAME ?? \u0026#39;root\u0026#39;, 62 PASSWORD: process.env.PASSWORD ?? \u0026#39;password\u0026#39;, 63 NODE_ENV: process.env.NODE_ENV ?? \u0026#39;test\u0026#39;, 64 statemachine_arn: stateMachine.stateMachineArn 65 } 66 }); 67 68 stateMachine.grantStartExecution(transferLambda) 69 } 70} 總之，上面我就是用CDK先創建我的lambda , 然後把那個要放到state machine 的建立\u0026quot;task\u0026quot;, 給予我另外一個lambda 有 startExecution 的權限\u0026hellip;. 簡單完成！\n二、SAM 的版本\n總之，有些原因，我另外又學習怎麼用SAM製作 state machine XDD\n1AWSTemplateFormatVersion: \u0026#34;2010-09-09\u0026#34; 2Transform: AWS::Serverless-2016-10-31 3Description: 4 download audio file from huaxi to trigger audio transcoder 5Resources: 6 ProcessAudioFileStateMachine: 7 Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html 8 Properties: 9 DefinitionUri: statemachine/audioFile_processer.json 10 DefinitionSubstitutions: 11 DownloadAudioFunctionArn: !GetAtt DownloadAudioFunction.Arn 12 Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html 13 - LambdaInvokePolicy: 14 FunctionName: !Ref DownloadAudioFunction 15 16 DownloadAudioFunction: 17 Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html 18 Properties: 19 FunctionName: downloadaudio 20 CodeUri: functions/downloadaudio/ 21 Handler: index.handler 22 Runtime: nodejs12.x 23 Timeout: 20 24 Policies: 25 - S3ReadPolicy: 26 BucketName: \u0026#39;test\u0026#39; 27 - S3WritePolicy: 28 BucketName: \u0026#39;test\u0026#39; 29 30 ProcessorFunction: 31 Type: AWS::Serverless::Function 32 Properties: 33 FunctionName: processor 34 Timeout: 20 35 CodeUri: functions/processor/ 36 Handler: index.handler 37 Runtime: nodejs12.x 38 Environment: 39 Variables: 40 ENDPOINT: db_url 41 DATABASE: dbname 42 DBUSERNAME: dbusername 43 PASSWORD:dbpassword 44 NODE_ENV: test 45 statemachine_arn: !Ref ProcessAudioFileStateMachine 46 Policies: 47 - StepFunctionsExecutionPolicy: 48 StateMachineName: !GetAtt ProcessAudioFileStateMachine.Name 其實說真的CDK 和 SAM 沒有多大差別，只是CDK你可以用比較程式化的去做那個state machine language （就是sam 裡面要包的那個json 啦！），像我，實在懶得去構想那個json 怎麼寫（啊我就不是JSON工程師啊～），所以先用CDK 產生state machine , 然後上AWS控制台上面把那一串json 抓下來，放到我的sam 這裏\u0026hellip; 整理一下，CDK detroy 一下，sam 的template.yaml 調整一下，一個下午搞定啦！（不過我好像忘了在sam 裡面宣吿log 去接state machine 啦 XDDD 之後再研究吧！）\n小君曰：還有很多成長的空間\n","date":"Jan 16, 2021","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/aws-step-function-%E7%AD%86%E8%A8%98/","series":null,"smallImg":"","tags":["aws","aws-step-function"],"title":"aws step function 筆記"},{"categories":["活動心得"],"content":"最近工作上沒什麼事，可能是快要尾牙了吧？雖然一樣很多新需求、新功能追著我跑，不過每天都還算充實快樂，只是要努力的試著學習怎麼克服溝通這門學問\n於是乎，最近就常常十二月排了一些活動，像是這次天瓏書局協辦由江少傑（之前Yahoo 的工程師）帶了一場「網站可靠性工程工作手冊 」的導讀會兼簽書會(笑，技術書籍也搞這個簽名會啊\u0026gt;\u0026lt;)\n基礎、基礎、還是基礎 原本從我們公司到天瓏書局很遠，光是六點準時下班都還是預計會遲到。中間我稍微跑了一下，發現還真的遲到了幾分鐘\u0026hellip;不過還好，工程師們也都是忙碌的，因此活動還沒開始！\n作者前面一直講很多翻譯的甘苦談、出版社的困境、現在技術學習的方式與以前不太一樣甚至談到教育與人生\u0026hellip;哈哈，阿還有在Yahoo的工作等等，但我心裡想：我來不是想聽這些的啊\u0026gt;\u0026lt;\n不過講者也在過程中其實也算導讀一些東西啦，有點發散，大概我比較有印象的關鍵如下：\nAgile , CI/CD , Scrum , Test 其實這幾個都互相關聯與奠基著，穩定與速度也互相關聯著。為什麼我們的軟體專案會失敗，其實就是不知道這中間許多的細節與關聯、盲目的導入只是帶來更多的坑 一次只上一點點的改變，而不是一大包放上去，這才是CICD的做法、也是為什麼要自動上版的原因（想到我們公司CICD顯然就與這樣的想法背道而馳，而且還沒有測試，希望在我任內能將其補齊！） 團隊之間必須要有「信任」，「信任」很重要，然後也讓我想到我在看這本書剛開頭也講到所謂的「不究責」的文化，這帶給我蠻大的提醒，我們不是要來抓戰犯、而是要共同一起解決問題、處理問題啊！ 這本書是一種案例研究，如果你企圖將書上講的方法都硬套在你的公司上，那只會帶來失敗，你應該要認真好好的認識與理解你們公司的domain , 學習到本書各案例背後的精神與概念，帶去case by case 解決你們公司的問題 我問的問題 在會後，我問了幾個很笨的問題\n如果沒有讀過第一本書（網站可靠性工程：Google的系統管理之道 ），在看這本書會有點看不懂嗎？ 譯者回答，基本上應該是不會的，甚至可以直接看這一本也無所謂，就當成是案例研究，他也建議可以看第一本的內容互相對照，網路上也有免費的英文版可以看呢！\n做Developer不是SRE的角色，能看懂這本書嗎？ 譯者說，不會，而且開發者也應該也要試著看看這本書，學習與他人「溝通」\u0026hellip;是蠻重要的等等，旁邊也有一個工程師也說到看得懂（看起來也是他的好朋友或社群夥伴吧？！）\n剛開始讀這本書 我目前才剛看一點點而已，不過就有幾個概念對我蠻有所突破的。例如我們不該追求什麼「百分百可靠度」、也了解DevOps ＆ SRE的不同、上面說到不究責的文化等等\u0026hellip;\n如果對這本書有更進一步的資訊可以參加FB的社團，在FB搜尋書名就可以看得到～\n小君曰：DevOps也是一門學問呢但也是一種文化！！我也正在努力的學習中\n","date":"Dec 12, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%B6%B2%E7%AB%99%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8A%E5%B0%8E%E8%AE%80%E6%9C%83%E4%B8%80%E9%81%8A/","series":null,"smallImg":"","tags":["SRE"],"title":"網站可靠性工程工作手冊導讀會一遊"},{"categories":["活動心得"],"content":"最近請了一天公假，和很多後端組的同事一起參加今年2020 AWS Dev Day, 這是人生的第一次啊！能夠與很多AWS 的開發者聚再一起，實在是件令人興奮的事，以下就簡短、簡單的分享一下吧！\n早上的議程 早上其實是共同的議程，有Pahud 大大分享的「與開發者同行」以及Kim 分享的「技術人的社群影響力」，另外也有趨勢科技分享比較硬技術的「如何在 AWS 上建立大規模實時數據管道」，老實說，第三場有點聽不太懂，感覺與現實我遇到的情境真的相差甚遠，所以很難真正理解與明白他所談的一些概念，大概知道要有所「監測」才能有所證明，如果要證明自己做好，就可以用監測/Dashboard 的方式呈現給非技術性的團隊看，這種技巧可以記一下，至於其他技術關鍵字的部分，像是 AWS kinesis , Apache Flink 等等，可能只是稍微查查 wiki 了，看看以後有沒有機會遇到這樣。\n至於其他比較軟的部分，大多都是談談「人生」，但我覺得可以記下的是「技術人的社群影響力」這一場，他讓我也重新再思熱情的重要，回想起當初讀資管、寫程式的小初衷。或許明年，可以選擇某個社群認真參加一下、投入一下，一個人可以走的快、但一群人可以走得更遠啊！\n而另外我也很想在明年找一個G0V某個專案，好好給他投入一下，貢獻作為技術者的社會影響力！但說真的，還是要給他認真的付諸實踐才是真的！\n謝謝在外面擺攤的DDD TW 的社群義工，當我很認真地問起DDD, 甚至問了很多很基礎很初學的問題都還是很不厭其煩地為我解答！說真的之前就大概聽過DDD，就我的理解上是一種軟體開發方法論，可以將業務知識對應到我們的程式的方法，我覺得真的很適合拿來放在我在做產品的工作場域！希望藉由之後認真地給他投入DDD社群的過程中，真正學習、認識、應用與實踐DDD。畢竟，作為工程師，還是希望自己寫一手漂亮、好維護、可傳承的程式碼與產品啊！Be a better Coder ! Also be a better Architect!\n在下午的議程中，我先選擇了Track C 的第一場，之後就都待在Track A了\u0026hellip;\nCDK家族介紹：CDK, CDKTF 及 CDK8S 這場還蠻基礎的，因為先前參加過Pahud 的serverless php 工作坊，稍微認識過了CDK ,而在之後也有時候會看Pahud的Youtube影片學習，最近鐵人賽也有熱心人士分享CDK的學習(目前正在學習中) ，所以這場的知識量對我來說真的有點偏少，但也很不錯了，因為我直接跳過一些基礎或歷史直接學CDK難免還是會有點卡卡的，藉這此議程補足之前沒有補上的歷史與基礎也很不錯，當然啦，我覺得我不太認識Kubernetes也是一個小小的致命問題之一，學好Docker 卻沒有學好 Kubernetes真的有點傷啊！ 看來以後要補足這一塊的知識！\n運用 AWS Fargate 與 Amazon ECS 的 CI/CD 最佳實踐 這一場談到CICD的最佳實踐，說真的也是有點偏基礎，日常我工作就有在用到了\u0026hellip;不過他談到一個Blue/Green 部署的概念可以放在心上，就是讓舊的版本先飛一陣子，只有一部分的人用新的版本，等到新的版本穩定了，再將原本舊的版本拿掉。這樣的好處是如果到時候要從新版本還原很方便（大概我是記得這樣啦XD）。\n技術選型，今天要選 ECS Fargate 還是 ECS EC2 launch types 老實說，他其實沒有講什麼，最後也沒有真的大概指名什麼狀況要選Fargate,什麼時候要選Ec2 (之後可能還有ECS anywhere ??) ，大概整場就在講「燒烤店」吧（笑～ 。大過大概知道Fargate就是不太管、而 EC2就是要管理這兩種大差別吧，以及一些你可以選擇的場景XD\n數數發 DevOps 的轉型旅程與 AWS CDK 實作案例 其實要導入DevOps 真的不太容易，他是一種「文化」、需要「溝通」、擁抱「改變」，我很佩服國泰金控居然有這這樣的一個中心願意為此而努力、跳下去做！而這場比較有點硬技術且讓我印象深刻的是CDK的撰寫要for function（合） 還是 for resource (分)，其實沒有標準答案，帶他們團隊是採取for resource 的方式，另外，template的改變能越少越好，他們是有用一個叫做config.py的方式去載入一些真正會需要調整改變的地方，這帶給我寫code有不錯的技巧與工具啟發！\n結論 這場AWS Dev Day , 可能我選的議程都比較基礎比較簡單吧？所以感覺寫起來沒什麼技術點，但我覺得基礎是很重要的！這是我最近進入職場寫程式一直以來所擁有的體會，有時候我們忽略的基礎，剛開始可能會真的沒什麼太大用，但你寫久之後，其實這些正是事後需要補足的地方！無論是本科系或非本科系的都是一樣！\n小君曰：結果最後的airpod 沒抽到、然後報到禮和問卷禮都沒拿到，難道我這天只是來吃便當的嗎？\n","date":"Dec 6, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/2020awsdevday-%E4%B8%80%E6%97%A5%E9%81%8A/","series":null,"smallImg":"","tags":["aws","awsdevday","ddd"],"title":"2020AWSDevDay 一日遊"},{"categories":["讀書筆記"],"content":"Ruby基礎 [Ruby 的註解方式][1] #單行註解 Hello.rb 變數與輸入輸出 1puts \u0026#39;Hello World\u0026#39; #output Hello World 2puts 20+2 #output 22 3puts 20-2 #output 18 4puts 20*2 #output 40 5puts 20/2 #output 10 6name=\u0026#39;John\u0026#39; #no output 7puts name #john 8name=gets.chomp #get user input 9puts \u0026#39;Hello\u0026#39;+name #output Hello John 10print \u0026#39;Hello world\u0026#39; #不會換行 output Hello World puts 印出資料 (換行) print 印出資料(不換行) gets.chomp 取得輸入 +將兩個文字串接 boolean: true 和 false Tips:\n\\= 指派相等\n\\== 比較是否相等\n!= 比較是否不相等\nirb irb 是一個ruby 的命令介面，可以即時執行ruby 結果 control+l 清空 exit 離開 if \u0026hellip;else\u0026hellip;end 1#number =8 2number = Random.rand(9) 3#隨機產生0-9 的數字 4print(\u0026#34;請猜一個1~15之間的數字\u0026#34;) 5guess=gets.chomp.to_i 6#to_i 轉換為數字 7 8if guess == number # \u0026#39;8\u0026#39; != 8 9 puts \u0026#39;猜對了，答案是\u0026#39;+number.to_s 10 #to_s 轉換為字串 11else 12 puts \u0026#39;猜錯了!\u0026#39; 13end while\u0026hellip;end 1#上一個的進階版 2number = Random.rand(14)+1 3#while guess==number #迴圈 4while true 5 print(\u0026#34;請猜一個1~15之間的數字\u0026#34;) 6 guess=gets.chomp.to_i 7 if guess == number # \u0026#39;8\u0026#39; != 8 8 puts \u0026#39;猜對了，答案是\u0026#39;+number.to_s 9 break; 10 else 11 if guess \u0026gt; number 12 puts \u0026#39;猜錯了! 太大了\u0026#39; 13 else 14 puts \u0026#39;猜錯了! 太小了\u0026#39; 15 end 16 end 17end Array 1scores= [80,100,90,99] #定義一個名為scores 的array 2scores.each do |score| 3puts score 4end 5#另外一種寫法 6scores.each {|score|puts score} 7 8print(scores[0]) ## 印出第一個ruby array 值 9print(scores.pop(2)) ## 教最後兩個叫出來 [90,99] 10print(scores.pop) # 將最後一個叫出來 [99] 11print(scores.sort) # 排序 [80,90,99,100] 成績管理程式-綜合應用 1# 1=\u0026gt;檢視成績 2 新增成績 3 刪除成績 4 結束成績 2scores=[90,88,85] 3puts \u0026#39;輸入 1 檢視成績、2 新增成績、3 刪除成績、4 結束程式\u0026#39; 4while true 5 print \u0026#39;\u0026gt;\u0026#39; 6 command = gets.chomp.to_i 7 8 if command == 1 9 scores.each do |score| 10 puts score 11 end 12 end 13 if command == 2 14 print \u0026#39;請輸入要新增的成績:\u0026#39; 15 scores.push gets.chomp.to_i 16 end 17 if command == 3 18 print \u0026#39;請輸入要刪除的成績位置:\u0026#39; 19 scores.delete_at (gets.chomp.to_i-1) 20 end 21 if command == 4 22 puts \u0026#39;程式結束!\u0026#39; 23 break 24 end 25end Hash 1record={\u0026#39;name\u0026#39;=\u0026gt;\u0026#39;john\u0026#39;,\u0026#39;score\u0026#39;=\u0026gt;90} 2records={:name=\u0026gt;\u0026#39;john\u0026#39;,:score =\u0026gt;90} 3 4puts record[name] #john 5puts record[score] #90 6 7puts records[:name] #john 8puts records[:score] #90 9 10record.each do |key,value| 11 puts key 12 puts value 13end Method 1def greet 2 puts \u0026#39;hello\u0026#39; 3end 4 5greet #=\u0026gt; hello 6#def method_name....end 7def greet(name) 8 puts \u0026#39;hello,\u0026#39;+name 9end 10 11greet \u0026#39;John\u0026#39; #=\u0026gt; hello,John 12 13require_relative \u0026#39;method\u0026#39; #引入該資料夾底下的method.rb ","date":"Nov 4, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/ruby-%E7%AD%86%E8%A8%98/","series":null,"smallImg":"","tags":["ruby"],"title":"Ruby 筆記"},{"categories":["工作筆記"],"content":"這篇文章有點廢，沒什麼技術點\u0026hellip; 純粹是拿部落格當筆記的概念。\n玩 AWS SAM 最近在玩AWS SAM CLI 部署 lambda ，真的好好玩喔，最近拿來部署好關於一些資料庫、SQS、KMS 等等的東西\u0026hellip; 以下是我花了一點時間研究好怎麼寫template.yaml \u0026hellip; 都要變成yaml 工程師拉！\n更多的Mysql 研究 另外因為某個原因，讓我最近一直在研究database lock 的問題\u0026hellip; 原來，加一個[for update]就可以達成了，真的好好玩～\n1select points from customers for update 資料來源：https://oldmo860617.medium.com/transaction-%E4%BD%B5%E7%99%BC%E9%8C%AF%E8%AA%A4%E8%88%87%E9%9A%94%E9%9B%A2%E5%B1%A4%E7%B4%9A-51b8af6178ae https://blog.xuite.net/vexed/tech/22289223-%E7%94%A8+SELECT+\u0026hellip;+FOR+UPDATE+%E9%81%BF%E5%85%8D+Race+condition 徹底解決Composer 記憶體不夠的問題 再裝某些Composer package 時常常遇到記憶體不足的問題，後來查到一個超棒的指令\n1COMPOSER_MEMORY_LIMIT=-1 composer update 資料來源：https://medium.com/@kycd.dark/%E5%9F%B7%E8%A1%8C-composer-update-%E6%99%82%E9%81%87%E5%88%B0-composer-memory-limit-aee4f2df56ee 小君曰：「真廢」\n","date":"Oct 18, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB8-sam-%E7%9C%9F%E7%9A%84%E5%A5%BD%E5%A5%BD%E7%8E%A9%EF%BD%9E/","series":["原來可以這麼寫"],"smallImg":"","tags":["aws","composer","mysql"],"title":"原來可以這麼寫(8): SAM 真的好好玩～"},{"categories":["工作筆記"],"content":"在工作上被賦予資料庫Schema的設計責任\n像是因應贈課功能、訂閱功能、關鍵字功能等等。也因此發現資料庫的學問真的博大精深\n看來我還需要多多的磨練。\n1. unsigned \u0026 zerofill 在資料庫常常看到unsigned這個字，最近想一想覺得要好好研究他，查了一下資料，就我個人的理解是：\nunsigned: 將數字「無符號化」，意表這個欄位就是0 和正整數\nzerofill: 在查資料也發現zerofill , 原來它是資料庫中，拿來前面補零的語法與功能。\n文章來源：https://twgreatdaily.com/RbGjcW4BMH2_cNUgvI0q.html 2. 資料庫怎麼設計 在查資料發現一個很棒的github repo , 告訴我們怎麼設計schema 或怎麼最佳化實踐，目前有空會再看看，好好消化一下。分享一下：https://github.com/alextanhongpin/database-design ","date":"Oct 6, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB7-%E8%B3%87%E6%96%99%E5%BA%AB%E7%AD%86%E8%A8%98%E7%AC%AC%E4%B8%80%E5%BD%88/","series":["原來可以這麼寫"],"smallImg":"","tags":null,"title":"原來可以這麼寫(7): 資料庫筆記第一彈"},{"categories":["工作筆記"],"content":" 此文章為舊文章，當時我仍以wordpress維運我的部落格，捨棄自己所寫的wp佈景主題 我換了一個佈景主題，你知道的，後端工程師美感幾乎都不怎麼樣。我覺得我開發的佈景主題好像還是不是很好用、很美\u0026hellip; 所以找了一個新的佈景主題，好看多了\u0026hellip;\u0026hellip;\n參加 AWS 工作坊 最近有機會上課，課程名稱是：PHP 開發者工作坊 -深入淺出 AWS 無伺服器 LAMP 架構(https://awsphpday.splashthat.com/ )，引用了外國人寫的一系列文章：https://aws.amazon.com/tw/blogs/compute/introducing-the-new-serverless-lamp-stack/ 從這一系列文章，這個人定義出新的LAMP定義： L- Lambda , A- API gateway , M-Mysql , Ｐ-PHP。並且介紹如何實作以及實現。\n之後滿心期待報名，甚至還報名了三次，兩次用私人信箱、一次用公司信箱。AWS真的有夠現實的，只有公司信箱報名的那個有成功XD 另外也發現原來我們公司的公假這麼好請XD 只要主管有同意就好 哈哈\n有機會認識到Pahud 大大，他真的是一個很熱情的人，在會後請教他問題都很熱情地回答哈哈，同時也深入到Bref 這個套件、以及 Pahud 大大開發的套件可以如何方便的部署serverless laravel 在 AWS 上，我真的很期待這門課程也很開心得到很多不錯的收穫，同時也認識到AWS CDK，目前也正以緩慢的速度慢慢理解學習他（畢竟我又不是DevOps 哈哈）\u0026hellip;\u0026hellip;\n啊主要這門課程他就是在介紹他開發的這個套件：https://github.com/aws-samples/cdk-serverless-lamp 這個套件主要是依據AWS CDK為基底，做出符合serverless laravel 的contruct lib ，可以很方便的讓開發者使用開箱\nAWS SAM CLI ＆ Lambda 同時我的第一個 Lambda 專案終於開發到一個階段了，甚至也經過前輩的Code Review 完！真的很期待他上架的時候，除了是我第一個Nodejs 架上專案也是第一個 Lambda 專案，而且很認真的畫流程圖、一步一步開發規劃。就是可惜目前開發順序＆上架就是有點混亂、這也是讓我有點不爽的地方，一直被「中間插件」\u0008\u0026hellip; 然後等到上架可能又有更多東西要調\u0026hellip;那開發者到底為什麼當初要規劃那麼多？幫使用者想那麼多？（不過軟體工程不就是需求常常會改來改去嗎？ 真的很好奇更標準更專業的IT他們怎麼處理這一塊？）\n同時，這個專案也要慢慢學習與習慣用SAM CLI ，之前我們公司的Lambda 管理與開發比較亂、現在有了SAM之後會比較好整理及有次序，能夠成為公司內導入這部分的其中一份子真的蠻令人興奮的！也希望我的 第一個 Lambda 專案可以趕快上去！ 這樣我就又有一個成績可以炫耀（誤\n小君曰：最近都在搞AWS呢\n","date":"Aug 22, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB6-%E6%8F%9B%E4%BA%86%E4%B8%80%E5%80%8B%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C/","series":["原來可以這麼寫"],"smallImg":"","tags":["aws","lambda","laravel","sam cli","serverless"],"title":"原來可以這麼寫(6): 換了一個佈景主題"},{"categories":["活動心得"],"content":"上個月底我參加 LaravelConf 2020\n買的是直播票線上票。先分享一下會眾們的筆記先：https://hackmd.io/@LaravelTaiwan/Conf2020/%2F1p8VzdKxR7eZ210Lk0j3pA 強型別 其實整體心得不太多，因為自從2017 年、2019年這樣參加下來，我覺得自己能聽懂的越來越多，反而是比較多是「人生」上面的思考。 像是：我覺得最近PHP越來越往強型別靠攏、javascript 也有相對的TypeScript , 聽 Ant 大大講到，強型別的好處是可以有助於之後在程式碼上的靜態分析\u0026hellip; 不禁讓我覺得，要開始好好學習強型別、希望可以在之後經手的專案上慢慢導入強型別的習慣吧！\n基本功打穩 至於serverless 的部分，真的是最近慢慢接到 lambda 的專案才慢慢認識他。其實serverless 才不是真的不管server, 只是對server的控制權、管理權降低，讓開發者可以更多地專注於商業邏輯。其實有時出錯了有時還是需要看看server 與 跑的狀態\u0026hellip; 後來工作幾年後感覺，那些在大學上過的作業系統、網路概論真的蠻重要的，基礎很重要！這也是我最近也在試著把那些基礎補起來的一個想法\u0026hellip;\n小君曰： 所以，要開始繼續往Better coder 的偉大航道前行！！\n","date":"Aug 22, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/laravelconf-2020-%E5%BF%83%E5%BE%97/","series":null,"smallImg":"","tags":["laravelconf","larvel","工程師人生"],"title":"LaravelConf 2020 心得"},{"categories":["工作筆記"],"content":"最近工作接下交易與金流的部分，開始將自己最近火燙燙學習的 Nodejs 來拿去試試水溫。不過，被callback 弄的昏頭轉向的\u0026hellip;. 所幸，最後藉著文件與冷靜，慢慢的下斷點、看結果，參考之前前人寫的code , 才慢慢走出來，甚至處理到進度似乎發展還不錯。\nMySQL 的 insert 新寫法 因為專案需求，我雖然接下這個舊專案，但是要開發新功能，於是，我覺得可以趁此改善專案架構與程式碼品質，原本程式碼的SQL 是用那種字串方式連結的，但我知道這樣會有SQL injection 的問題，所以在新功能＆參考舊程式碼的過程當中，也慢慢的將字串方式改成可以防止SQL injection 的方式。同時也意外發現Mysql insert 有新的寫法：\n1INSERT INTO table SET a=1, b=2, c=3 比起原本冗長INSERT INTO table (a, b, c) VALUES (1,2,3), 我覺得這種set 的方法真的很不錯，這樣在對照上及程式碼易讀性也更勝一籌，所以覺得可以評估是否要引入的可能性\u0026hellip;..\n參考資料：https://stackoverflow.com/questions/861722/mysql-insert-into-table-values-vs-insert-into-table-set 參加LaravelConf 2020 其實本週還真的沒啥事情，除了就是討論、開發、維護、就是這些不斷的循環\u0026hellip;. 工程師的人生就是這麼平凡無奇，但週末參加了 LaravelConf 2020 , 這次我買的是線上回放票，整體下來感覺很不錯，聽Ant 大大的對PHP＆Laravel 之未來的一席話，真的有所感受與領悟啊！然後我覺得比起之前參與過的2017、2019，我發現我又更加聽懂了很多內容，覺得感受到自己的成長真的蠻棒的，不過整體的心得文與筆記我想之後會再好好整理起來。現在還有安可場，可以再去買票去聽啊\n小君曰：工程師的生活就是這麼平凡無奇，且有趣\n","date":"Jul 26, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB5-%E5%8E%9F%E4%BE%86mysql-%E5%8D%9A%E5%A4%A7%E7%B2%BE%E6%B7%B1/","series":["原來可以這麼寫"],"smallImg":"","tags":["laravel","mysql","php"],"title":"原來可以這麼寫(5): 原來MySQL 博大精深"},{"categories":["工作筆記"],"content":"近況 最近工作終於接到新的任務，雖然還是在同一個專案\u0026hellip;..\n事情是這樣的，我們那個專案的後台分成兩個部分的人負責，一個是後台、另外一個則是交易\u0026hellip;..而我進來公司後，一直都是處理後台，對於交易都是一知半解，只知道要打Lambda 而已。而這次，在專案時程終於沒這麼趕的情況下，以統一後端接口(俗語說：天下大勢，合久必分、分久必合)，我被授命要接下這交易功能的後續維護＆開發新功能\u0026hellip;. 這對我是一種挑戰，因為我終於可以有段時間不用繼續和PHP掛勾拉XD (交易lambda 是使用NodeJS)\n況且，最近也剛學習了一點 NodeJS, 前陣子上完六角學院的 NodeJS 課程，很期待可以將自己新學習到語言運用到實務專案，不過之後還是要多多進修將nodeJS 補齊基礎拉，而且這個又是金流與交易，其實我自己說實在有點抖抖的＆很興奮能接到此挑戰！\n總之，為自己加油拉！而且其實也沒用到太高的技巧,那些 nodejs 其實還算好懂的\nMysql: COALESCE 因為在 trace 與理解交易商業邏輯的 code 當中，我看到我們用到COALESCE 在SQL語法中\u0026hellip;原來，他是一個好方便的參數啊，可以回傳在列表裡的第一個非null的值。\n例如\n1SELECT COALESCE(NULL, NULL, NULL, \u0026#39;W3Schools.com\u0026#39;, NULL, \u0026#39;Example.com\u0026#39;); 這行sql 語法就會回傳W3Schools.com\n相關可以參考的資料：https://www.w3schools.com/sql/func_mysql_coalesce.asp\n沒用過還真的不知道可以這樣用啊！\n強化與習得Docker技能 在今年初，看到Hahow 上面有個關於Docker 的新課程，在最近終於把那門課程上完了，雖然，自己本身工作就已經在使用Docker了，而且為了讓自己可以弄個舒服的開發環境，以符合自己早期的開發習慣，還自己簡單刻了 docker-compose.yml , 好讓自己資料庫可以用自己本機。（我們專案資料庫是用AWS RDS），所以早在上課之前對Docker 就有略知一二。不過，經過有系統的整理後確實能對Docker有更多的理解。像是中間會多了一個虛擬Linux container層,而每一個命令都是新的Container層而互不干擾，他的教學其實還蠻淺顯易懂的，我這裡可以推薦一下：Docker 部署入門完全指南-圖片速學攻略(https://hahow.in/courses/5df27f1fa5ee510022a08500/main) 不過之後還是會想研究一下，會有點想要像我們公司專案一樣，把 Laravel 部署到 Fargate 的部分\u0026hellip;\u0026hellip;\n小君曰：接到新專案囉，雖然還是在一刻(我們公司產品簡稱) XD\n","date":"Jul 18, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%B5%82%E6%96%BC%E6%8E%A5%E6%96%B0%E5%B0%88%E6%A1%88/","series":["原來可以這麼寫"],"smallImg":"","tags":["lambda","mysql","nodejs"],"title":"原來可以這麼寫(4) : 終於接新專案"},{"categories":["工作筆記"],"content":"來開始交代一周一次的功課了XD\n希望技術部落格可以一周一篇文章, 提升更多的技術含量\n記錄自己一天比一天更佳進步的軌跡\n關於trello trello 是很多Team會用到的一個工具,可以用來管理專案與任務安排\n它真的是一個真的很方便以及很有幫助的工具\n我的前一份工作和現在這一份都有用到這個trello\n一開始進入公司的時候 我發現到他們trello 有 進行中, Todo , 完成後請檢察等等的分類, 然後用tag作專案上的分類, 用了一陣子之後發現他們這樣的管理方式真的很不錯\n所以就應用在我的side project 管理上\n不過我個人也對這樣的部分做了一個調整: 加入了一個研究中的list\n畢竟做為小小工程師而言, 作side project 的目標除了是興趣與證明自己的實力以外\n也是還要將一些新的東西應用與練習的麻~ 好幫助自己真的可以越來越進步\n於是就來分享看看我這個trello 的 template 喔: https://trello.com/b/PFi72D78/r567tws-template 歡迎用我的template去管理你們的專案～\n如果有甚麼改進的建議或管理好方法歡迎來告訴我喔\nComposer scripts 本周也學到composer 可以在composer.json 裡面寫一些指令, 可以在安裝後,更新後或者安裝前,更新前可以寫command 執行\n至於這裡就有豐富關於此的內容，這裡我就不贅述：https://docs.phpcomposer.com/articles/scripts.html 我看到這個的想法是: 哇以後那些php的初始專案就可以不用這麼麻煩了耶, 只要下載後, composer install 或 composer update , 就可以使用了\u0026hellip;\u0026hellip;\n我是一個很懶的工程師,也很不喜歡背來背去那些指令, 況且每次都要google 一下把指令們copy \u0026amp; paste , 真的很麻煩\n有了這個東西,方便多了, 不用跑 cp .env.example .env 和php artisan key:generage\n不過也發覺, 原來我還不懂composer XDDDD\n但還好啦, composer 就是一種工具, 有用到就會自然學到了\nscript 技巧 GET !!!!\n接到新任務- rust 真的有點看不懂 最近接到新任務, 就是一個可以幫營運單位整理資料夾的任務, 好讓營運單位可以上傳整個資料夾, 而這個資料夾的整理, 是需要戴上資料庫的id , 而營運單位會給我們他們的原檔案, for example : 他們給我們a.mp3 ,我要幫他們找到資料庫 a.mp3 的資料id (例如 10), 那我就要幫他們a.mp3檔案複製存成media/in/10/10.mp3\n它其實真的很簡單: 就是先資料庫連線取得要被整理出來的id 到底是哪些, 然後就做檔案的管理這樣就好(而且我下午還有些時間被抓去開會, 討厭, 沒辦法專心寫程式)\n至於程式碼之後我再補這樣　XD (雖然後來我們討論流程這個部分又改了ㄎㄎ 總之這段程式不會用到實務)\nhttps://github.com/r567tw/office/tree/master/move_audio_files 我用Python , 用了一個下午時間就寫完了, 隔天我還去找了Python 有沒有那種.env 這種東西, 把env 導入我這個小小小程式, 也是不到幾小時的時間\n因為還有時間, 我就想說來改寫成rust 的版本, 剛好前幾天在超級簡單的看rust 的東西, 發現\u0026hellip;. rust 真的有點看不懂, 那個連結 mysql 的範例\u0026hellip;. 感覺有點不好懂\u0026hellip;. 需要一段時間我才能將Python 語法轉換過去。不過 反倒golang 的範例就沒有那麼難懂\u0026hellip;.\n不知道是不是因為rust 比較底層的關係呢?\n後記: 來分享我目前的吃飯工具們好了~ vscode：寫程式慣用的編輯器 sourceTree Tableplus(偶爾會用workbench) Skype Slack AWS Postman Chrome Spotify 小君曰: 最近我家的PM常常有事沒事來找我, 說: 沒事, 專案(Server / API)還好好的\u0026hellip;..\n","date":"Jul 12, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB3-%E9%97%9C%E6%96%BC%E6%88%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/","series":["原來可以這麼寫"],"smallImg":"","tags":["composer","trello"],"title":"原來可以這麼寫(3) : 關於我的工作流程"},{"categories":["工作筆記"],"content":"哈哈, 原本想說可以一個禮拜寫一篇技術文章的\n但就是「懶」，所以到現在才出所謂的第二篇\u0026hellip;.\n距離通過工作試用期也已經超過一個月了，我覺得工作上還算是得心應手，進度都在掌握中，也很喜歡目前的工作狀態，只是\u0026hellip;.我好想接新專案啊\u0026hellip;..\n在家工作心得 之前，因為疫情關係，我們公司試行了在家工作。老實說，這是我人生第一次在家工作。第一次的時候，還沒有待滿一個月\u0026hellip;第一次，好慌、好亂\u0026hellip;.完全不知道在做什麼\n但是，等我慢慢熟悉專案與產品、進度也漸漸掌握起來了，第二次試行、第三次試行，搞清楚自己目前的戰鬥位置、狀況，**突然覺得，在家工作好棒啊，甚至有點享受、開心！**只要我進度在掌握中就好拉，也確實，我也漸漸掌握好專案的進度ＸＤ\n可惜，台灣疫情控制實在太好了，之前公司試行在家工作的制度就這樣無疾而終。\n我好想要繼續在家上班啊\u0026hellip;\n結論：在家上班的前置工作與預備真的要做好\nＭysql function/trigger 在做搜尋API這個功能時，因為原有資料庫欄位的設計限制與需要，欄位存了HTML標籤，但這反而造成我們在搜尋類似‘p’這種關鍵字時，會變成所有的資料都被回傳，形同沒有搜尋\u0026hellip;. 那時還算菜\u0026hellip; 同事後來找到一個解法，就是新增新的欄位，利用Mysql function 的功能，再加上trigger , 可以在每次資料庫有異動時，新的欄位可以放入沒有html標籤的原資料，從而在API開發上,搜尋這個新的欄位，就可以克服這個問題\n我以為只有oracle 資料庫有這種trigger 功能，因為我以前有在學校上課有修過這個oracle資料庫的課，所以對這個略知一二，但沒想到Mysql 也有這樣的功能，於是花了一點時間重新複習，把以前上課的回憶都找回來了啊\u0026hellip; 而網路上,也有幫忙去除html 標籤的現成function, 配合trigger 的onupdate \u0026amp; oninsert , 再配合sql 語法將現在線上資料的html標籤去除, 真的是一個不錯的方案\u0026hellip;.不過如果你知道有更好的方式解決，歡迎告訴我＆交流～\nwindows docker 問題 因為公司產品有使用到docker, 另外我在公司配備的是 windows電腦 （好想要被配備mac啊～～），於是在某次午休回來時，發現為什麼我的API 會出現問題？明明token , 程式都沒什麼問題啊\u0026hellip; 後來我發現好像原來是docker 在windows休眠之後醒來後, docker內部container的時間會和外部window 不是一樣的，因為我的專案有調用到aws的api , 在時間不sync的情況下當然api就出錯了\u0026hellip;. 我記得有搜尋到某篇文章說怎麼解決那個問題,好像到window設定什麼東西的\u0026hellip;. 總之,那是之前遇到的,我也不知道我那時的紀錄丟到哪了,現在我寫文章的時候一直找不到ＸＤ 但我說一下我的解法：因為文章裡面交代得實在太麻煩了,於是我決定：重開docker 大法 哈哈哈\nLaravel env 問題 我在開發時候,有時候調用一些env的資料, 後來發現, 為什麼都調用不到\u0026hellip; 經查詢後發現，原來是因為執行了php artisan config:cache的指令關係\u0026hellip;. 詳細可以看看這篇文章：https://learnku.com/laravel/t/3362/laravel-use-env-to-read-the-environment-variable-null 結論：媽的，坑\u0026hellip;.好拉, 對不起，我沒好好認真看文件所以犯蠢\u0026hellip;.\nLaravel 的queue 和玩玩 graphQL 剛好專案有用到, laravel 的queue 功能, 我預計之後為這個寫一篇專屬文章筆記一下這個, 以後面試可以大膽說用到queue了哈哈\n然後因為進度超前及在掌握中，有一些空閒的時間，研究一下之前開發者還沒研究出來的GraphQL, 我裝了rebing/graphql-laravel, 原來，graphQL 是這個樣子\u0026hellip;.. 在這段時間,比起之前對graphQL有更多更深入的認識了, YA ~\n小君曰：真的很久沒寫文章了\n","date":"Jul 4, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB2%E5%A5%BD%E4%B9%85%E6%B2%92%E5%AF%AB%E6%96%87%E7%AB%A0%E4%BA%86/","series":["原來可以這麼寫"],"smallImg":"","tags":["graphQL","laravel","mysql","queue","wfh"],"title":"原來可以這麼寫(2):好久沒寫文章了"},{"categories":["工作筆記"],"content":"去年的12月，我從上一間公司離職。其實，一月是打算好好去玩～ 突然覺得自己韓國去得真是很好的時候，不然可能回來就要自行隔離幾天了ＸＤ 想知道韓國旅遊心得的可以到我的樂在信仰中喔：https://r567tw.tw/2020韓國之旅/ 然後二月就是各種找工作、思考要做那些工作\u0026hellip;..然後各種的無聲卡、拒絕、邀請進去\u0026hellip;。\n有一家做博弈的接案公司最誇張，其實我本來就沒打算做博弈了，去面試也只是想說「以戰養戰」的態度、寫寫題目，看看有沒有需要再精進的\u0026hellip;（是說這間在話術上也很厲害，在頁面其實沒有看到博弈，他們也說他們不標榜自己是博弈，只是接案剛好有大部分都是接博弈的\u0026hellip;\u0026hellip;），然後我就隨意地寫寫，甚至幾題我是空白沒寫，想說記起來回家研究怎麼寫會更好\u0026hellip;結果超好笑的是下禮拜居然還發給我錄取通知\u0026hellip;.（到底有多缺人Xd）\n還有一間是說我們「氣不合」，這個理由真的很靠杯，雖然我也知道面試這種事其實與技術能力沒有太大關聯，技術能力只是代表你能帶多少籌碼，最重要的還是面試官喜不喜歡你麻～ 但直接用「談論起來氣不合」這種直白的理由真的會覺得很不尊重面試者，這間公司的名稱就不公佈了，想知道可以私訊～\n總之三月之後正式工作，進入了一間大型傳統機構，薪水上蠻滿意的。不過我想先等三個月培訓期度過了在公開自己在哪裡好了，不然培訓期沒過真的會很好笑很尷尬ＸＤ\n不過我覺得是時候應該要好好記錄工作上的筆記與東西了，畢竟有紀錄有籌碼，這樣下次在跳、再找也更有話可以嘴，同時也是一種回顧自己進步的軌跡的概念～\n有一句話我很喜歡：「Don\u0026rsquo;t Prove; Improve」（連結 ）\n話不多說，這個系列的文章就叫做「原來可以這麼寫」，紀錄我看前輩、同事的code的筆記、以及一些工作上學到的新概念、新技術～然後後面的標題可以自行發揮創意，像這週就比較沒創意：新工作第一週！\n原來可以直接創造一個class\u0026hellip; 1trait TraitA { 2 public function HelloWorld(){ 3 echo\u0026#39;Hello World\u0026#39;; 4 } 5} 6trait TraitB { 7 public function HELLOTWO(){ 8 echo\u0026#39;hELLO tWO \u0026#39;; 9 } 10} 11$helper = new class { 12 useTraitA,TraitB; 13}; 14$helper-\u0026gt;HelloWorld(); \u003c=\u003e 運算子 這個很少遇到，沒寫道真的不會記得～\n他會比較兩邊的值，然後會回傳0,1,-1\n至於規則可以參考：https://www.php.net/manual/zh/language.operators.comparison.php filter_var https://blog.xuite.net/coke750101/networkprogramming/57002113-PHP+filter_var%28%29+%E5%87%BD%E6%95%B8Filter+%E5%87%BD%E6%95%B8 AWS ECR: 類似aws方提供的docker hub KMS: 加解密服務 Lambda : 微服務的部分 匿名函數 https://www.php.net/manual/en/functions.anonymous.php 1$gifts-\u0026gt;sort(fn($a, $b) =\u0026gt; $b-\u0026gt;created_at \u0026lt;=\u0026gt; $a-\u0026gt;created_at)-\u0026gt;values()// 越後面的日子就會排越前面～ 小君曰：這能這個系列應該會是週更，但有可能會是月更，阿不管啦，我想寫就寫啦ＸＤ\n","date":"Mar 8, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8E%9F%E4%BE%86%E5%8F%AF%E4%BB%A5%E9%80%99%E9%BA%BC%E5%AF%AB1%E6%96%B0%E5%B7%A5%E4%BD%9C%E7%AC%AC%E4%B8%80%E9%80%B1/","series":["原來可以這麼寫"],"smallImg":"","tags":["php","aws"],"title":"原來可以這麼寫(1):新工作第一週"},{"categories":["旅行"],"content":"前言 藉著讀「不忙碌的門徒」這本書所影響，讓我最近開始學習調整、制定個人的「生活規則」，其中一條就是**「每兩年一次國外旅行、每一年至少一次國內旅行**」。而上一次我為了校園雜誌所談到「石之教堂」而殺去日本，其心得文可以看看這裡 ，而這次，我決定來去「韓國」，原因其實只是：「想嘗試不同的國家看看ＸＤ」，並且也制定了幾個目的：\n1.想吃炸雞（因為曾追了某齣韓劇-最棒的炸雞 XD） 2.朝聖一下傳說中世界最大的教會(雖然我以前常常批判趙鏞基本人以及他的神學思想哈哈哈) 3.給自己的任務：算算看旅程中會遇到幾間教會:(就是想看國外宣教或者其他教會的痕跡) 4. 放鬆、休息、思考人參…貂皮烏拉草\n而這次感謝上帝，沒有像上次去日本這麼衰遇到大雪，所以這次規劃的天數都有規劃到呢！讚讚，而且也是規劃一離職就馬上去玩，所以早在11月的時候就買好去韓國的機票、住宿，並且規劃了將近一個月、研究要怎麼樣的行程、怎麼樣的吃……. 如果有興趣的話我願意公開我這個規劃筆記：韓國愉快旅行 第一天：開始習慣全韓文、全韓語的世界。 然而其實我個人是還蠻懶得做功課這一回事…通常…我不太可能會規劃到仔細到爆炸…所以一開始還是有點被自己雷到哈哈哈哈\n像是一開始到韓國地鐵我發現他們的地鐵設計其實對提著很多大行李的旅客蠻不友善的，而且其實韓國地鐵做了很大程度的自動化，基本上，很難找到他們的服務人員……（相較於台灣這裡隨便都可以找到服務台詢問裡面的客服，這點就給台灣按個大愛心啦！）(如上圖)\n不過後來其實也蠻好解決的，(如上圖)就是到旁邊按下「Help」 就可以打開那個閘門然後出去喔，你說這個有沒有問題…我個人是試過，還好，下次仍可以順利地用T-money 卡做地鐵呢\n（PS. 如果韓國的地鐵其實有方向性的，所以你要去做哪一站前請千萬要好好看清楚他所指示的方向喔～）\n在那時選擇住宿的地點是新村附近，找了booking.com 上面評分很高的AINI house ，因為他那裡有中文接待（笑～～～～，而且還可以幫忙叫外送炸雞….\n而因為炸雞太多，於是我就帶出去 living room 和在那裡的遊客一起吃ＸＤ，雖然覺得自己還沒有到全面地跟上，但是感覺比起上次日本行來說，英文有進步一點了！！！！\n第一天原本是很想衝「首爾塔」的，然而一開始就遇到狂迷路與迷失…還自以為是的跑去做韓國公車…（在此學習到一個經驗：如果你第一次到韓國，不建議學習搭公車，除非你非常了解那個地方怎麼走…否則你利用google map 其實不太準…其他人建議的韓國地圖app 也很不靠譜…）\n不過，人生嘛，總是會找到回家的路的…後來我發現我好像飄到了新沙洞站…這也算是一種有趣的體驗啦，表示我要到過這裡喔哈哈哈，既然迷路了就好好享受這個過程吧！（雖然還是覺得早知道就宅在飯店看電視看韓團ＸＤＤ）\n不過我發現韓國的基督教好像真的蠻強勢的，光是電視台的部分就高達三台左右、然後轉啊轉…呵呵，不過我感覺韓國的新聞台好像很少？\n對韓國電視台導覽有興趣的話可以私訊我喔ＸＤＤ不才錄了一段大約10分鐘的影片來瀏覽韓國的電視台哈哈哈ＸＤＤＤＤ\n第二天、景福宮、通仁市場與首爾塔＆明洞 其實在我規劃的筆記裡面就寫道：就爬文爬到有一個部分是我想要看看韓國的五宮一廟，但覺得後來時間實在太少了所以就選擇只逛最大、最壯闊的景福宮。其實說也蠻奇怪的，明明上次我去日本就沒穿和服，為什麼這次我要體驗穿韓服ＸＤ 而且覺得那個女店員靠近我親自服務我試穿的部分讓我覺得好害羞喔….不過不知道為什麼…我的韓服褲子總是感覺容易掉XD….可能就是沒綁緊吧哈哈哈\n景福宮感覺應該被中國因素影響很多….其實很多都是中文字….覺得蠻像參觀紫禁城或故宮的感覺…既然我們決定不進去習維尼的中國大陸…..就看看這個過過乾癮吧哈哈\n然後在我選擇還是難得記錄一下自己穿韓服的時候…居然有兩個中國女子走過來….希望與我拍照….（真第一次聽到這種要求ＸＤ害我覺得害羞*2），雖然後來因為一些技術上的問題沒有要到他們的電話（阿不是，是照片….），但還是有請他們幫我拍幾張照片….這應該算是上帝給我的幫助吧？（我！實！在！不！會！自！拍！啦！）\n午餐就吃通仁市場和issac 吐司（後來聽說issac 在台北有分店…我覺得已哭….那幹嘛來韓國特地吃呢哈哈哈），感覺蠻有趣的，用韓國的古銅錢來買吃的東西，我覺得是一種很不錯的文化體驗～～\n至於第一天沒去到的首爾塔，當然這一天就要衝上去一坡啊，查好了資料，就是搭到明洞站、走去南山纜車站、搭纜車去首爾塔….不過他與那個貓空纜車不太一樣，他就是直接一個車廂，裡面塞很多的人，而不是像貓空裡面做三四個人，很悠哉的過去….然而，人多也有人多的好處….這樣你就可以和另外一半抱緊緊啊（誤？！ 我看到車廂裡很多情侶都這麼弄呢ＸＤ\n首爾的愛情產業鏈應該發展多年，使用韓劇、韓星等觀光手法，只能說真的可以用「浪漫」形容…..這點我們高雄的韓市長應該可以學一學，花什麼大錢蓋什麼摩天輪呢XD （不過說真的，那個愛情鎖真他媽有夠多……）\n目前我逛過三個國家的高塔，分別是首爾塔、日本晴空塔以及台北101，現在來個簡單不負責任評分好了：晴空塔\u0026gt;=首爾塔\u0026raquo;\u0026raquo;\u0026raquo;\u0026raquo;台北101。\n說真的，台北101真的讓我超失望，因為他的商業化也點明顯，我們都知道要商業化才能發大財，但商業化的包裝是一種學問、要可以騙得了觀光客XD 至少這方面我覺得晴空塔和首爾塔就做的比台北101好太多….台北101展的什麼翡翠、高單價的首飾珊瑚….完全沒有！可！逛！性。\n晴空塔至少會搞的動漫展、而首爾塔就完全發揮愛情產業鍊的功能…就你台北101展出那個什麼東西，好像是什麼財團叫做綺麗珊瑚的喔，感覺就是要賺大陸財啊，真是令人超級傻眼…..從頭到尾除了風景就只剩那顆球可以看了…………\n然後首爾塔我覺得纜車搭回去之後就是明洞站，或許明洞就可以在這裡一起被規劃這樣…然而，作為一個基督徒，我上網查到「明洞聖堂」，於是就心心念念的想先去到這裡…是說Google map 和韓國地圖真的蠻雷的…讓我真的找得蠻久的…不過所幸，還是被我最後找到了….其實沒有App反而更難找到呢ＸＤ\n明洞聖堂一進去，就感受到很靜謐的感覺….很多旅人每個進到這裡，都會選擇一個小角落坐下、祈禱….這算是我過去一直以來都沒有過的旅遊體驗…..沒有什麼聲音、只有一些拍照、坐著安靜…..甚至有敬禮的舉動…拿到他中文的DM之後也才發現，原來明洞聖堂也埋了一些關於部分殉教者的遺骸，原來，所謂復興的國家一開始必先有迫害….很少地方是一開始就復興起來的啦！\n之後坐下禱告完，明洞聖堂也差不多要關了（只有到八點），於是開始我逛明洞商圈之旅啦…上網查到很多都說明洞商圈已沒落…然而實際上我個人是覺得沒有到沒落啦…而且比起弘大來說，明洞商圈比較小比較集中，反而會比較好逛…（當然弘大是比較屬於年輕氣息很高的，也是有另外一種優勢…）\n第三天、作為基督徒當然要主日啊，不然要幹嘛～ 第三天是個禮拜天，其實是故意這麼做的，因為就想看看汝矣島福音教會到底什麼樣子ＸＤ而且，很想嘗試一次在國外主日的感覺….韓國是我的第一次啊ＸＤ\n當然查過資料發現下午1:30是中文堂，所以早上當然先有個簡單的行程啊，上網爬文有很多人建議說住在弘大附近，而**最後我的住宿點是選擇在新村站附近。其實這對我來說真的是好地點，去梨花女子大學或去弘大都超近的，就是分別地鐵的上下兩站而已….。**所以後來先當個變態去梨花女子大學….真的是好拍照的校園ＸＤ而且在網路上也邊查關於它的歷史…原來巾幗不讓鬚眉，他們也參與許多韓國重要的社會運動當中，原來韓國走過極度獨裁的時期…..這不禁也讓我有所思考：民主與經濟要選擇哪一個？如果為了民主而真的讓經濟很爛很爛甚至爛到讓人無法生存的那種也要拼死爭民主嗎？（哈哈，覺得自己好政治不正確喔～）\n當然啦，如果經濟很不錯了，已經算是人人可吃飯的那種….當然是選擇民主啊（我是這樣想啦，發財其實是一種比較的概念，其實人的慾望無窮，誰又能真的大大發財呢？）\n然後回到我的旅行，我覺得梨大女人街不太好逛….可能我不是女的吧？哈 感覺和師大夜市87%像～\n下午，便殺到汝矣島去，參觀所謂我一直在批判的趙鏞基…..真的超多人的啦，而且敬拜動用管弦樂團也太浮誇了….然後結束崇拜前果不其然…搞個什麼醫治釋放的邪教儀式…..不過我覺得還蠻貼心的是他們安排外國人席，所以外國人可以用耳機嘗試聽牧師到底在講什麼….不過可能真的蠻累的….我根本沒記得牧師到底講些三小ＸＤＤＤＤ\n不過也經過同意錄了一些敬拜片段，還蠻好玩的，竟然很多詩歌都是我會唱的呢ㄎㄎ，只是韓文版\n其實藉由KKday 以及別人推薦下去搭漢江遊覽船，所以就決定加入了這個行程….然而很衰的事發生了…我發現我忘了帶充電線啦ＸＤ（加上昨天水瓶搞丟….），於是聚會完就馬上找了一個7–11購買iphone的充電線，至於wifi機的部分我就只好放給它沒電了….（這也給了我經驗：Wifi 機不好用….）\n不過由於很早很早就到要搭遊覽船的地點，於是我在漢江公園晃晃晃了好久，還跑去租腳踏車騎了一圈，只能說那天下午的行程很慢活….也看到有些人會去那裡野餐、買炸雞在那邊聚再一起…..真的覺得，下次好想找人一起出國喔ＸＤ\n然而悲慘的事情發生了，大概就在這段期間，我也發現我的T-money 卡搞丟了ＸＤ ，屋漏偏逢連夜雨….當然，**我覺得護照、錢包、手機沒有搞丟的話都還好啦，能用錢解決的事都是小事，T-money 卡真的很便宜呢！只要2500元….(韓元)**～\n不過漢江遊覽船真的蠻好玩的，聽著live band 的表演….而且其實遊覽船有分不同的類型，如果不同的時間搭應該會有不同的部分哈哈哈～ 總之超爽der～\n第四天、跟團KKday、弘大商圈 隔天下午就要搭飛機回台灣了，而這一天就選擇第一次來使用KKday 的行程，原本我還蠻擔心自由度的問題，（不然為什麼我這兩次國外旅行都選擇自助呢ＸＤ），但其實也還好，他們這一天就跑三個點：小法國村、南怡島以及江村鐵道自行車…….\n而且導遊在車上也給了我們很多的講解，讓我更加了解關於韓國的事情，原來南怡島不是國家所有，而是有私人所有，而很狂的是他居然向韓國文化局申請「南怡共和國」….實在是太有趣了啦….\n而最後江村鐵道自行車，我被分配到與三個香港人一組，（覺得下次應該要找人一起去的….），不過整體來說真的是很好的體驗…. 好玩～\n至於晚上的弘大商圈….就像我上面講的，地區很大，不太可能一天逛完（於是隔天我又去逛了一次），然後因為目標太廣，反而不知道怎麼逛….況且，不知道是不是我邊緣的關係，都沒有人叫我幫忙代購哈哈哈，害我一時不知道怎麼在弘大逛街ㄎㄎ\n第五天、準備回家家 其實第五天的行程好像沒有排得很好…於是問了Aini House 的接待建議我怎麼走…他建議我可以在附近晃一晃走一走…..然後繼續到弘大逛街….. 其實，這樣蠻不錯了啊ＸＤ 都要準備上飛機了實在不太適合排太緊迫的行程ＸＤ 吃了一下Lotteria 速食店之後，走一走之後又狂買了很多伴手禮之後，就殺去機場（後來想一想，我好像伴手禮沒有買很齊啊，手上還剩下太！多！韓！元！我還是花錢太保守了ＸＤ）\n幸虧我很早就殺去機場，一開始還是迷路了一下，仁川機場真的是很大，建議真的要留1~2小時的時間做個緩衝…而且後來我發現，原來T-money 卡的退款其實是有限制的，如果在三萬韓元以上是不給退款的呢！所幸後來我離三萬沒有很多，所以匆匆買了兩瓶香蕉牛奶結束這一個回合：拿回退款29,150 韓元！！！\n我還以為和日本一樣是連卡都會拿回去，沒想到居然卡又還給我….看來這個T-money 卡是要註定跟著我了ＸＤ\n總花費 其實我建議，在台灣換一些韓元之後，剩下的就去明洞換韓元，實在是很賺啊ＸＤ\n不用擔心民間的換錢所的問題，其實那些民間的換錢所根據我查到的資料也是韓國銀行授權給他們的業務之一，所以假鈔的問題應該不會很嚴重（但是當然還是會有些風險啦ＸＤ 如果你真的很擔心還是可以在台灣銀行換完再去）\n關於外匯的部分：換 25000 TWD\n在台灣：5060 =\u0026gt; 180,000 (台換韓：35.573) 在韓國: 20000 =\u0026gt; 772000 (台換韓：38.6) 花費明細\n機票： $ 7,336 (台幣)\n用KKday 使用台幣的部分（跟團、wifi機、遊覽船、韓服體驗、門票等）：$ 3,883(台幣)\nAini house 住宿 $5,199 + $78 = $ 5,277 (台幣)\n旅平險（感謝阿蒓幫忙） $731 (台幣)\n在韓國花的韓元：(180,000+772,000)-$601,270 = $350,730 (韓元) （約$9,062元）\n總計：約 $26,289 元（台幣）\n結論 結果好像還是不到三萬元ＸＤ 原來我估五萬真的太多了….看來剩下的錢搞不好可以再衝一次沖繩？？？好啦這次韓國之旅讓我感受到豐富的，就用在第四天看到一個咖啡廳外面的一句話為這次的旅行作結，因為我覺得這句話很棒，所以就決定拍下來了….\n「Each day is a gift, Open it, celebrate. And enjoy it」\n小君曰：下次希望有人陪我一起出國玩～\n","date":"Jan 9, 2020","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/2020%E9%9F%93%E5%9C%8B%E4%B9%8B%E6%97%85/","series":null,"smallImg":"","tags":["韓國"],"title":"2020韓國五天四夜之旅"},{"categories":["信仰"],"content":"在這特別的日子，我要寫一篇特別文章紀念、也寫作一個關於我正在發生的故事。或許有人早已聽過、或許有人還沒聽過。然而，這是一個特別的版本，為了是寫給祂。\n這篇文章爆長，大約4700字左右，我先點播一首「Reckless Love 」這首歌給大家，我最喜歡Shine所翻譯的版本，有耐心的人可以邊聽邊讀吧！\n斯托得在他的著作「Why I am a Christian」(中譯為：做個真門徒)形容他之所以成為一位基督徒，是因為後面有位「天堂獵犬」在追趕著他、把他抓住。\n我現在要分享我與這「天堂獵犬」的故事\n我出生於台東的一個傳統家庭，其實小時候對於耶穌的印象不過就是在童年時電線桿上面看到的「信耶穌得永生」等警世標語而已。如果沒有這後面一連串的巧合、遇見這些人、遇見耶穌，或許現在我不過就會是一個平凡的老師、公務員、上班族吧？(因為過去的夢想及志願是成為一名老師)\n不知道是什麼時候開始，那時因為母親因憂鬱症或者其他的病症而無法獨力照顧年幼的我\u0026hellip;總之她在當時已是一個病入膏肓的狀態，於是把我送進一個安親班，遇見了正式將耶穌介紹給我的人：江威美老師。說真的我早忘了那個安親班到底教了我什麼、童年就是盡力的玩盡力地放縱\u0026hellip;.唯一有印象的是：每到禮拜天都會有一台車到我家的門口，我媽媽或者我爸爸就會把我叫上車，這台車的目的地是「台東浸信會」。老師在車上會發給我們小朋友每個人一個十塊錢，叫我們在袋子拿過來的時候把它投進去。或許這影響了我日後主日奉獻都會投個「十塊錢」作為示意，為的就是紀念這件事情。\n過了沒多久，母親就去世了。當時江老師形容她已與「天父」同在、到了「天堂」享樂了。說實在的，在越來越認識基督信仰之後，也早知道這是一個神學不正確的說法，母親又沒有信主，何來去天堂之說呢？而當然這件事情也帶來我家庭母親角色的消失。影響我後來過母親節或多或少都有點不太適應\u0026hellip;\n但是在母親去世之後，江老師囑咐我，要在學校放學之後到某個門口等她，她就會把我接過去安親班\u0026hellip;.而在安親班，好像沒什麼印象在寫功課、而是在樓上看著一部部的聖經卡通、在樓下看著一本本的聖經故事繪本、和江老師的女兒＆兒子玩。甚至江老師在某次寒假還是暑假帶我進去一個營隊背誦聖經的金句，或許就因為那一次營隊玩得很開心，也間接種下我以聖經為本的信仰價值種子。\n時光飛逝，國小五年級我被送往台北，遇見了一個沒有血緣關係的阿姨以及他的女孩和兒子，事後才知道，她原來是我爸爸的前女友\u0026hellip;然而，阿姨將我視如己出，雖不是基督徒，但在那一年我開始將重心轉移到課業、也開始建立一步步的品格與個性，至於那個江老師呢？我和她已失去了聯絡，國小六年級，又輾轉回到台東，江老師似乎有短暫與我聯繫一兩次(甚至邀我去聖誕晚會)，但上了國中、到了台北叔叔家居住，又再一次完全斷了聯繫。\n這是空白的三年、從國小五年級、六年級到國一，那是一段沒有與主建立關係的日子：沒有聖經、沒有教會、沒有牧師、沒有小組，但那段日子主仍然掌權、祂與我同行。祂預備了我的學識、品格、溫柔以及獨立。誰也沒想到，當時國中入學前，堂弟一直以來是比我成績還要好的，卻到了國中之後，我的功課超越了堂弟，從一開始的班排穩定前20名，到班排前10名，最後到了班排前五名，可算是校內前段班的名次了吧，自此，我的父親從來不擔心我學業，所謂的學業壓力都是自己給自己的，每次打電話告訴我父親我考差了，他總是說：「有學會了就好\u0026hellip;」\n原本一開始他很擔心我這個從台東來的土包子跟不上在台北的功課，似乎因為我這樣的自我進步與成長，他就不在管我了\u0026hellip;其實這也使我到現在有時候會感到失落與被忽視。\n或許因為從家裡的缺乏歸屬，於是我決定像以前一樣「找教會」，每當看到「教會」二字，心裡就會有一點特別的感覺，是不是應該進去看看\u0026hellip;.在這大新莊地區走啊走、找啊找，找到了一間感覺氣勢很宏偉、很有架勢的教會：「耶穌後期聖徒教會」\n感謝上帝，讓我有機會可以認識異端，並且是在我還尚未有「委身」這個概念的時候\u0026hellip;..有一次我對那群宣教士說我想要一本「聖經」的時候，他們發給我一本「摩爾門經」。在教室裡，外國老師帶我認識他們的信仰、介紹「約瑟·斯密」這個人物：影片裡說到約瑟斯密那時候看到很多教會，但每個教會都不是神所喜悅的，是正統教會，直到某一次在森林當中遇到上帝的聲音\u0026hellip;承接了使命建立後期聖徒教會，並且在上帝的指示下找到「摩爾門經」\u0026hellip;.\n那時我的尚處於懵懂懞懂的時代，再一次暑假回去台東找朋友的時候，朋友提醒我那個教會別再去了\u0026hellip;然後邊給了我一本全台教會名錄，那時我抄寫了幾個教會地址，再度停止聚會許久，直到基測考完之後，便重新踏上找教會的路程。\n當時進入了「新莊浸信會歸主堂」，其實我也早早忘記了那群人叫什麼名字，只記得他們希望我叫他們「大姊」與「二姊」。自此，也影響我對於「姊」的定義，那是我對於女性的一種尊稱\u0026hellip;也帶入我後來的教會經驗裡。\n記得第一次的青少年團契，我們搭著台北公車與捷運，去聽天韻合唱團的演唱會，逛了一下西門町。不知道為什麼，那時候國中時期每逢大考結束都會與朋友逛西門町與東區，在那個時候會是一種奢侈與享受？\n然而在歸主堂的時間並沒有很久，因為家庭的因素，原本按照成績與我當時的志願表填寫，我應該會讀一間公立高中。可是卻被迫跑去讀了一所私立高職，我選擇當時學校唯一的「商科」：資料處理科。(事後想想，根本一點也不是我預料中的商科之路啊，怎麼跑去寫程式當工程師了XD)\n但上帝有祂的計畫與美意。祂的帶領，使我在學校的獎學金可以超過在學校的學費。讓我家庭的財務狀況可以更加充裕。也因為在一所完全非預期的學校裡，剩下的只是我怎麼拉開第一名與第二名的差距、而在國小國中時期家裡從來沒有一台個人電腦的我，如今卻要學習怎麼操作電腦\u0026hellip;..可是誰都沒想到高一術科成績倒數的我，能夠在高三衝上術科的第一名。\n不過我覺得上帝的帶領絕非如此而已，因為學業壓力的鬆綁，讓我得以看許多課外讀物、藉此培養「閱讀」的興趣，更是在一次教會退修會當中，牧師將我暫時放在「小組長」一職，而他親自監管小組，幫助我這個「從未服事」過的人。\n沒想到意外發現其實我能帶小組\u0026hellip;.於是一步步的成為當時青少年團契的副組長（是說我也不知道為什麼我要當啦ＸＤ）\n之後我也受洗了、原因是因為我慕道友的歲月其實蠻久了哈，上完了受洗班、就接受洗禮了\u0026hellip;..\n也因為進入一所天主教學校，漸漸學習關於天主教的觀念，奠基日後我對於天主教開放、寬容的神學態度。\n原來，上帝不甘於我只是成為一個汲汲營營只看著學業成績的學生，他希望我能正式的受洗、並且紮根在他的教會中、學習服事。而在這個時候祂灌輸給我什麼是應該、什麼是不應該，可是，我還不認識主的愛。基督教對我來說是道德、是善惡的判斷罷了。\n高三的時候，我也忘了是什麼時候什麼原因與教會肢體發生了嚴重衝突，於是憤然離開了教會\u0026hellip;\n其實作為第一代基督徒，這樣的離開如果日後都沒有人管，其實應該就會真的離開了\u0026hellip;..\n**但如同斯托得所形容的「天堂獵犬」。**一個從未認識的剛接下青少年團契的輔導姊姊每個禮拜傳來的奪命連環簡訊（甚至有一次說有禮物要給我XD）、還有另外一個教會姊姊的極力勸說，我又回來這個「是非之地」、重新修補、重新參與團契當中，但不知道為什麼，好像還是有那個「疙瘩」、好像回不去當時的「熱情」？\n成績保送最後將我帶入了雲林科技大學，上帝利用當時一次次教會的講道、詩歌，重新向我闡述信仰的真締，為什麼我會在這個時候聽到這首詩歌？為什麼我會在這個時候聽到這篇講道？我認為：這算是我第二次的洗。是上帝祂親自施的洗，祂帶我認識何謂祂的愛，也讓我認識到過去的信仰幾乎只停留在人際、律法道德的層面而已。因此在如今陷入信仰低潮、面臨教會的醜陋、過去信望愛團契路線問題當中，這樣的經歷成為我仍不會放棄祂的關鍵(既便我曾說過要放棄，那其實是在一種氣話罷了，我無法放下這份信仰)\n而上帝不甘於我只是這樣，祂讓我後來接下信望愛團契的財務長，並且在同一個時期更發生趙鏞基與康希牧師財務相關的事件。上帝彷彿提醒我，我必須忠心於我的服事、不可為魔鬼留地步。雖然後來因為信望愛團契路線的問題而離開團契，但我很開心在某一次與某位老師聊天的時候，他竟然稱讚我當時財務長的服事很「忠心」。我想，這也在某個方面確立我生命特質的目標\n在畢業前，**上帝更帶領了我某位同學信主，這帶給我新的眼界：原來一個人的信主絕非偶然，而是很多很多次偶然和很多人所促成，為了不是叫人驕傲，而是說明「主權在主」。**我本身並不是透過「決志」信主的，然而我卻要帶他決志，後來與江老師再度見面，都說道我們親身見識「保羅栽種了，亞波羅澆灌了，惟有上帝叫他生長。」這句經文。\n之前傳給我奪命連環簡訊的輔導，成為我信仰生涯上重要的屬靈母親，因為她對於聖經的敏銳與厚實的查經能力，更影響我讓我在大學完成讀完聖經兩遍的目標，也對聖經、解經也一定程度的了解與認識，讓我的信仰不僅僅是靠感覺，而是因為聖經告訴我。甚至翻轉我整個的生活方式與價值觀，盡力以聖經為本（既使我還是有時會跌倒）。因為這位屬靈母親，更是認識了「斯托得」這位神學家，雖然屬靈母親已經離開我的信仰生活，至今斯托得的神學仍然藉著每一年新出版出來的書影響著我、改變我、塑造我。而我的「閱讀」也能夠帶給我一次次新的看法與更新\n記得某一次復活節屬靈母親丟給我的一個問題：「耶穌死在十架與復活的意義是什麼」。\n經歷過第二次洗的我，可以很輕易的回答耶穌死在十架的意義，然而復活的意義呢？我竟然無法回答\u0026hellip;..\n有一次斯托得講座的主題是「公共神學」，當時的我去參加。然後旁邊坐了一個人\u0026hellip;再一次與講者Q\u0026amp;A的時候，我問了講者一些問題\u0026hellip;旁邊的這個人對我印象深刻，於是問我的學校、名字等，知道我是雲科大的，便說：「你一定要浸宣神學院找我啊」，離開的時候還遞給我他的名片，原來是浸宣神學院前院長沈介仁老師\n其實說真的我也可以不用理它的\u0026hellip;但不知道為什麼我最後竟然還是透過我在雲林教會的輔導聯絡他(剛好我的輔導在浸宣修課)\u0026hellip;和他找時間對話\u0026hellip;（我現在有時會想：為什麼要遵守承諾找他啊哈哈哈）\n然後我為了與他會面，我準備了一些問題，但一題都沒有問到，反倒沈院長找我漫談整個神學教育、以及目的、還有神學是什麼\u0026hellip;. 說真的，要不是我還是想當工程師、對世俗仍有些依戀，我還真的蠻想放棄一切跟隨沈院長學習呢！\n而與沈院長聊天的過程當中，竟然也間接回答我之前難以回答的「耶穌復活的意義」。\n當然啦，我不敢說我完全想透這個問題\u0026hellip;或許之後會隨著時間而變化吧！呵呵\n耶穌的死為要承擔我們的罪，為了成就上帝的愛與計畫而犧牲祂自己。而耶穌的復活也代表了祂至今仍活著、所以祂仍然在這裡，因著「人不可能被判第二次的死刑」，因此若「我們在基督裡」，基督便\n成為我們的「外面」，代表了我們。\n","date":"Dec 17, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/why-i-am-a-christian/","series":null,"smallImg":"","tags":null,"title":"Why I am a Christian"},{"categories":["鐵人賽"],"content":"終於來到這最後一天，然而人家最後一天都在寫些感言充廢文，我在這一天還是要稍微帶點技術含量的東西ㄎㄎ\n以下東西很多又很雜，畢竟 php 就是義大利麵嘛(大誤)，請耐心閱讀～\nLaravel Best Practice 介紹一個 Github 專案：https://github.com/alexeymezenin/laravel-best-practices\n裡面介紹很多建議的 Laravel 寫法，例如驗證不要寫在 controller 裡面，而是用 Request 類別作為包裝，在寫 Laravel 的時候可以根據這些原則檢核一下自己\nLaravel 遇上大架構 當 Laravel 遇到大架構的時候，基本上我們不會把這些東西都只是塞在 Model\\Controller\\view 當中，而是會使用到 Repository、Service、Presenter 或 Transformer 做包裝，分別控制資料庫邏輯與商業邏輯、顯示的邏輯和格式的回傳，讓程式更加容易維護、易讀\n大架構的部分說明你可以參考以下網址：\nhttps://learnku.com/articles/19452 https://www.youtube.com/watch?v=pzY0FBafXd0 https://www.muzilong.cn/storage/html/2/oomusou.io/laravel/laravel-architecture/index.html 可以讓 PHP 偉大的其他東西 其實只學會 Laravel 不足以讓 PHP 偉大啦，不過我期許自己是能夠成為越來越強的 phper 的喔！希望你們也是＾＾\n1.學習 swoole：據說這是可以讓 php 效能 up up 的工具框架，是現代 phper 值得學習的一項東西，也是可以讓 php 邁向異步時代的重要推手\n2.學習 composer：我還能說什麼呢？沒有 Composer 別跟我說他是現代 php 框架 XD\n2.學習 lumen、slim: 剛剛學過 Laravel 一遍了，他就是這麼的肥這麼的胖，所以如果能學會幾個微框架是不錯的，對應 Laravel 來說，Lumen 就是他的簡易版，相信學會了 Laravel 以後，Lumen 上手應該不是什麼太大的難事。\n如何學好 php 其實我覺得網路上的資源太多了，容易眼花撩亂而且有時候還會學到舊的。我個人是建議以下這些資料\n書籍：現代 PHP：新的特點及良好習慣 PHP Right Way 我個人只推薦這幾個資源，其他就不必了。因為這些資源是可以讓你比較能夠學習現代php的方法與資源。\nLaravel 相關資源 larvel news : 每週都會寄給你 Laravel 界相關資訊，你也可以加入他的 Procast，順便練習英文聽力 Diving Laravel :一個深入 Laravel 核心的部落格，會講到 Queue、job 等等較為進階的功能與核心解釋等。 賽後感言 其實一開始還卡在題目到底要選什麼\u0026hellip;然後就咚咚咚的到開賽前一刻才決定好，於是成為了時間驅動寫作，也因為自己的惰性使然，其實有點虎頭蛇尾，自己都覺得自己好像沒有寫的太好\u0026hellip;\u0026hellip;。只能說又學到這次的經驗了～\n然後有別於去年我寫的 python，這次的 Laravel 似乎不怎麼討好\u0026hellip;所以後面也越寫越沒勁兒，於是成為這樣小蛇尾，我自己應該好好檢討吧 XD\n本人的技術部落格：https://tech.r567tw.tw/ 歡迎使用 feedly 訂閱我的網站喔 XD\n未來我會慢慢的將我鐵人賽的文章慢慢的搬過去我個人網站的，並且加以擴充、更新吧？！應該吧？！\n","date":"Oct 14, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E8%B3%BD%E5%BE%8C%E5%B0%8F%E6%84%9F%E6%83%B3%E4%BB%A5%E5%8F%8A%E5%BE%8C%E7%BA%8C%E5%AD%B8%E7%BF%92/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"賽後小感想以及後續學習"},{"categories":["鐵人賽"],"content":"今天將帶大家快速帶過幾個官方套件以及個人工作經驗上覺得好用的套件。並且後續也給大家相關的軍火庫可以在日後開發專案上用到。基本上有相對應的需求才用，可以搭配該套件的官方文件撰寫程式，這些基本上文件都很易讀，相信無痛上手是很有可能的喔！\n官方套件 篇 首先我一定要先推薦一下 Laravel 官方提供的套件啦，就是這些套件形成 Laravel 一個龐大且厲害的生態系。\nLaravel Cashier(官方文件 ):一個關於金流的套件，他可以與國外金流公司 API 做無痛的結合，例如 Stripe 或者 Braintree，當然，如果台灣的話可以使用其他的套件，例如laravel-newebpay 或者laravel-payum Laravel Dusk(官方文件 ):還記得我們之前的測試篇嗎？其實 Dusk 這個服務有點像是Browsers的測試，如果你看到文件你就大概明瞭，他是有點 for 終端測試的角色\nLaravel Passport(官方文件 ):一個快速建立 API 授權請求的相關套件，基於 Oauth2 標準\nLaravel Scout(官方文件 ): 一個基於 Eloquent Model 所建立的全文搜索相關開發套件，並且預設以 Algolia 作為驅動\nLaravel Socialite(官方文件 ):我們在網頁註冊的時候，常常看到 FB/Google 一鍵登入對吧？其實實作 Facebook，Twitter，LinkedIn，Google，GitHub，GitLab 和 Bitbucket 等等相關身份驗證機制並不難，這個套件可以提供你這樣的功能～\nLaravel Telescope(官方文件 ):本人認為史上最牛的開發調試工具，可以觀察資料庫、也可以觀察任務工作、Request/Respose 等等\n另外還有很多其他的官方套件，不過我覺得很少用所以就不特別介紹了\u0026hellip;\u0026hellip;\n個人經驗 篇 laravel-excel(官方文件 ): 一個可以方便操作 Excel 的套件 laravel log viewer(官方文件 ):有時候我們會需要 Trace log 好幫助我們能夠 trace Request 或者 Response 喔喔～\nlaravel-cors(官方文件 ):前後端分離，你會遇到的 Cors 問題～\nlaravel-permission(官方文件 ): Laravel 界最有名的權限/角色管理套件\nlaratrust(官方文件 ): 另一套個人覺得也沒好用的權限/角色管理套件，而且他比前面的 Laravel-permission 多支援 Group 的特色，好用！然後文件也寫得和 Laravel 易讀好用。\nForms \u0026amp; HTML(官方文件 ): Laravel 在 4.x 的版本有所謂的 Form 的語法糖，但在 5.x 版本之後便移除了，很多人還想要繼續有這種功能，所以這個套件便出現了啦！\n軍火庫 接下來，我要介紹一下 Laravel 的軍火庫\npackagist :Laravel 使用 Composer，而 composer 使用的軍火庫也就是這個！\npackalyst :類似上面的 packagist，不過這是專屬 Laravel 的喔！\n","date":"Oct 14, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-%E5%A5%97%E4%BB%B6/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel 套件"},{"categories":["鐵人賽"],"content":"剩下最後的三天鐵人賽，其實原本我有點想繼續寫下去的\u0026hellip;但說真的有點有氣無力，如果你發現我最近這幾天的文章風格與教學，就可以發現我其實有點虎頭蛇尾了哈哈。\n所以最後這三天將進入第三階段新的章節，也就是主要會再討論關於 Laravel 的套件、以及大架構、還有 Best Practice 等等的內容，雖然技術含量不高，但也就是我基於我所有的 Laravel 經驗全力輸出了！\n不過我個人是還蠻喜歡看書的，在資訊界的領域當中，歐萊禮是很多人常常入門的資訊書出版社。所以這裡，我要學習歐萊禮的寫作風格，寫寫一些遺珠之憾，好讓大家不至於感覺有點一半跑掉，而是後續還能有些內容學習和追蹤。\nNotifications Laravel 有一個類別是 Notifications，有別於我們之前寫到的 mailable 可以寄信，Notifications 可以寄送通知到其他服務，例如 Slack、簡訊、或者其他類似可以收取資訊的內容\nQueues 這個東西允許你將一個比較耗時的任務延後處理，好讓你的網頁服務不至於為了處理某些很複雜的請求讓後面在等待的其他請求全部 pedding，無法更快的反應。而他的背後又可以與 Redis 或者 Amazon SQS 等服務一起工作\nCache Laravel 是個全能型的框架，所以其實他的速度會很慢，所以 Laravel 允許你快取一些設定檔或者路由，好讓整個網頁的效能可以做個簡易的提升，像是php artisan config:cache或者php artisan route:cache之類的指令都可以做這樣的快取。\nFrontend Laravel 的前端框架預設是Vue，然而，現在他也允許使用React了，在我們目錄底下有一個檔案是webpack.mix.js，還記得我們之前使用Auth的時候就有用到類似npm run build之類的指令嗎，其實就是動用這個檔案裡面的設定與調整。以及 resourse 裡面的 js 檔如何做出編譯也是這部分的課題。\nBroadcasting(廣播) 此類課題有點困難，我自己也私自下班玩過一次而已，這個東西其實需要配合前端以及相對應的套件，其中一個用途就是可以寫聊天室、或者與 Websocket 的結合，讓網頁也可以主動通知使用者\nEvent 它提供了一個簡單的監聽器實作，允許你在應用程式可以訂閱和監聽事件\nLaravel 及 Redis 相互搭配使用\n明天我將分享一些生態系的官方套件以及自己之前工作經驗常用到的套件。明天見囉！\n","date":"Oct 12, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel: 遺珠之憾"},{"categories":["鐵人賽"],"content":"接下來，我想要分享關於Laravel 的一個比較特別的類別：Collections 他有點像是陣列的概念，但更像是一個集合的概念。\n相信如果你還記得前面教學談到幾行的程式碼，裡面不是有Article::all和$article-\u0026gt;tags這幾段嗎？如果你去dd()它，你會發現他們都是同一種類別：Illuminate\\Database\\Eloquent\\Collection\n當然，如果你有在之前helper的章節發現到collect()這個方法，他其實回傳的也是Collection，但是他是Illuminate\\Support\\Collection\n兩者在使用上會有一些差異，基本上他們也是大部分使用上也蠻像的，所以我就在這裡把他們放在一起講。\n兩者使用差異可以參考這篇文章：https://medium.com/@lynnlin827/two-types-of-collections-in-laravel-888d43858c4e\nLaravel為Collection這個類別提供許多的方法，例如map()或者avg()等等，其實和helper()那裏一樣，其實文件也大部分都寫的清清楚楚了。 https://laravel.com/docs/6.x/collections#available-methods 是不是有點像是在寫JavaScript在處理呢！沒錯，我也有這樣的感覺。但這樣似乎程式變得更好讀了呢！\n另外Laravel在6.0也推出Lazy Collections的類別，是為了處理我們有時候會有大量的資料時候，避免一次全部讀進記憶體，使用到比較現代化的PHP技巧：yield 和 generator，而開發的一個新類別。其實使用方法很簡單，就是將我們原本使用的all()改成cursor()就完成囉！\n","date":"Oct 11, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-collections/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Collections"},{"categories":["鐵人賽"],"content":"接著前一天的Helper主題，我們那時談到了trans()這個helper，底下應該會常常在使用它，我們有時候會需要有國際化的需求，需要征服宇宙，所以做一個多語系的網站是有必要的。接下來，讓我們來示範一下Laravel這個全能型框架關於多語系能力的展現吧！\n網頁要實現所謂的多語系有兩種方法\n建立多個網站(土法煉鋼型)：例如我需要有英文和中文的網站，就會英文有一個網站，中文又會有另外一個網站。這兩個網站的樣子可能會有很大的不一樣或者很大的一模一樣，好處是：可以就語系別做出更高的客製化，然後壞處就是：費工，重複造的輪子肯定很多\n使用語系檔將檔案內容作出轉換：以上面的例子來說，可能我會有一個中文的語系檔和另外一個英文的語系檔，根據網站的語系選擇呈現以某個語系檔所轉換過來的文字。好處是：重複造的輪子不多，只要學會翻譯文字就好，壞處就是無法提供給各語系特別的客製化。\n我大概能想到的優點和缺點就是這樣，如果有大大可以補充歡迎告訴我。 接下來我們將示範說明的會是第二類。使用所謂的語系檔轉換內容。\nLaravel 語系檔存放在resources/lang資料夾的檔案裡。在此資料夾內，一個蘿蔔一個坑，一個網站支援的語系對應到一個語系子目錄。像是這樣的結構：\n1/resources 2 /lang 3 /en 4 messages.php 5 /zh-Hans-TW 6 messages.php 語系檔裡面放的到底是什麼，其實就是大概這樣而已拉\n1\u0026lt;?php 2 3return [ 4 \u0026#39;welcome\u0026#39; =\u0026gt; \u0026#39;Welcome to our application\u0026#39; 5]; 一般來說，網站的預設語系是在config/app.php這個檔案裡面有一個locale的屬性\n1 \u0026#39;locale\u0026#39; =\u0026gt; \u0026#39;en\u0026#39;, 然而如果我們想要切換語系的話該怎麼辦？其實很簡單，使用App::setLocale($locale);這個方法就可以了，以下讓我們做個簡單的火力展示。\n首先是增加個Route規則\n1Route::get(\u0026#39;welcome/{locale}\u0026#39;, function ($locale) { 2 app()-\u0026gt;setLocale($locale); 3 return view(\u0026#39;welcome\u0026#39;); 4}); 然後分別建立兩個檔案，一個是resources/lang/zh-TW/message.php以及resources/lang/en/message.php，分別在裡面寫這些：\n1//zh-TW/message.php 2\u0026lt;?php 3 4return [ 5 \u0026#39;welcome\u0026#39; =\u0026gt; \u0026#39;歡迎來到我們的應用程式\u0026#39; 6]; 1//en/message.php 2\u0026lt;?php 3 4return [ 5 \u0026#39;welcome\u0026#39; =\u0026gt; \u0026#39;Welcome to our application\u0026#39; 6]; 之後到welcome.blade.php修改一下，把原本的Laravel那一行替換成\n1{{ trans(\u0026#39;message.welcome\u0026#39;) }} 之後到welcome/zh-tw和welcome/en就會看到我們這些被轉換的文字呢！\n當然拉，這個超級陽春的多語系，其實我們可以利用cookie和session存放語系值，藉由前面我們說到的middleware，加上app()-\u0026gt;setLocale($locale)來做我們語系上的設定喔。\n以下是參考的文件：\nhttps://laravel.tw/docs/5.2/localization https://laravel.com/docs/6.x/localization 今天得程式碼不多，要看完整程式碼的可以參考這裡: https://github.com/r567tw/Make-PHP-Great-Again/commit/9957deac8788ee8bd20ccb3a0cd8ce867e352f0e ","date":"Oct 10, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-%E5%A4%9A%E8%AA%9E%E7%B3%BB%E7%B6%B2%E7%AB%99/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel 多語系網站"},{"categories":["鐵人賽"],"content":"寫到這裡，終於剩下最後的5天就可以完成這整個鐵人賽！（撒花\n接下來希望自己再接再厲。繼續完成後續幾天的Laravel 教學系列。 今天也是個簡單風（好幾天都是簡單風了QQ）\n介紹一下Laravel作為一個全能型的框架，還提供了一些稱為「Helper」的東西幫助我們可以整理程式碼、封裝了一些我們常常會弄到的部分，也可以稱之為「語法糖」，總之幫助我們可以避免「重複造輪子」。而順道一提的是：我們之前也早已用過這些東西了：例如route()、view()或者factory()\n如果你看到文件：https://laravel.com/docs/master/helpers\n其實大概這些語法可以分類為以下幾種：\n陣列及物件類：可以處理陣列與物件的資料等，例如：Arr::add()、Arr::where()\u0026hellip;\n路徑類：就是Laravel一些資料夾的路徑，像是public_path、storage_path()\u0026hellip;\n字串類：可以處理我們的字串，Str::camel或trans()，預告一下明天將會討論關於多語系的網站設計，trans()便是我們到時會可能會用到的方法～\n網址類：像是我們之前會用到的route()方法、以及asset()方法都是回傳一串的網址。\n其他：像是無法歸類以上四類的，之前我們用到的view()或者factory()都在這個裡面，而這裡我也順道介紹一個我們在debug常常會用到的dd()\n在你任何想要的地方，如果你想知道這個值到底傳出來是怎麼樣的值、怎麼樣的型態，你可以使用dd()，例如我們昨天的分頁：\n1dd(Article::paginate(5)) 當執行到dd()的時候會立刻終止那一段程式，並且var_dump回傳被dd的值與型態，像是這樣 我覺得Laravel的文件是世界上最好讀的文件，我想剩下的你們應該可以自行探索吧XD\n","date":"Oct 9, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-helpers/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Helpers"},{"categories":["鐵人賽"],"content":"沒想到寫這麼多天以來，我居然漏掉一個這麼重要的環節：「分頁」。在網頁的世界中，讓資料作出排序及分頁絕對是必要做到的一件事情，Laravel作為一個全能框架，這項功能肯定是有放在裡面的。讓我們以文章列表作為範例，其實就是將原本的Article::all()改為Article::paginate(5)就好囉，至於那個5看你想換哪個數字都可以，那個意思是你要幾個項目為一頁。 然而我知道，你會想問如果底下沒有一個可以點連結的頁數頁尾那怎麼行，超簡單，在article/index.blade.php這個檔案下面放至一行程式碼\n1{{ $articles-\u0026gt;links() }} 這樣你就看到囉 這樣這個分頁是不是很簡單？當然，如果你想要客製化，可以使用這個指令\n1php artisan vendor:publish --tag=laravel-pagination 你會在views/vendor/pagination裡面看到很多的類似樣板的分頁檔案，bootstrap-4.blade.php是預設的分頁樣板，如果你想要客製化，可以修改那個檔案！ 當然既然給了我們這麼多的分頁樣板，當然可以用其他的囉，讓我們來修改一下預設的分頁樣板。 來到app/Providers/AppServiceProvider.php這個檔案，use Paginator，之後在boot裡面加入Paginator::defaultView('vendor.pagination.semantic-ui');就可以從bootstrap-4.blade.php改成semantic-ui.blade.php囉\n1use Illuminate\\Pagination\\Paginator; 2...（略） 3public function boot() 4{ 5 Paginator::defaultView(\u0026#39;vendor.pagination.semantic-ui\u0026#39;); 6} 另外補充一下：如果你想只是有上一頁或下一頁的連結的話，可以使用simplePaginate這個方式。然後按照上面的方式去客製化你的分頁按鈕，他只是在檔案加入simple的前綴而已。\n想要更多研究可以看此文件：https://laravel.com/docs/6.x/pagination\n要看完整程式碼的可以參考這裡:https://github.com/r567tw/Make-PHP-Great-Again/commit/f3ab7fb7816555dce91df98ea242114b4f477a2e\n","date":"Oct 8, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-pagination/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Pagination"},{"categories":["鐵人賽"],"content":"接下來我想要分享一些關於 CronJob 的一些事情，有時候，我們會有一些日常的工作需要在每天某一個時間固定執行，像是網頁世界最常見的就是發電子報，這只是最常見的例子，當然還有其他類似的例子，例如會員卡收費、清Log之類的，我們可以透過 Laravel 的 Task Scheduling 來做這些事情，管你想新增多少項、要做什麼，只要能用程式寫得出來，都可以來做喔！\n還記得我們前幾天談到的Laravel Artisan 以及 Command 嗎？當然，寫 Task Schedule 可以有很多種不同的方式，但我個人建議是使用先建立 Command 的方式可以讓我們比較好的管理程式碼。當然，其他方法我也會分享的喔～\n把 Laravel 加入 CronJob 不知道什麼是 Cron Job 嗎？我剛剛都解釋那麼清楚了：就是一到某個時間，電腦(如果還是開啟的狀態下)就會執行的工作。相對於我們網頁必須要透過request才能發動response的情況下，Cron Job主動多了。\n如果你是 Mac 或者 Linux 系統，可以使用這個指令，如果你是 windows 的話，建議你換一個作業系統，開玩笑的，是可以參考網路上說在 windows 建立 cron job 的流程。\n1$ crontab -e 這個指令會讓你進入到一個vim的模式，你可以參考即將失傳的古老技藝 Vim ，總之我們先按一個i按鍵，加入底下這行\n1* * * * * cd /path-to-your-project \u0026amp;\u0026amp; php artisan schedule:run \u0026gt;\u0026gt; /dev/null 2\u0026gt;\u0026amp;1 path-to-your-project只是個例子，請使用你所在的 Laravel 的主目錄 這個部分就是告訴電腦每分鐘都到我那個Laravel專案的目錄，執行php artisan schedule:run 這個指令\n貼完那一行之後，你可以按esc,之後使用:wq，離開vim的模式。 之後你會看到這個結果就表示你成功了啦\n1crontab: installing new crontab 你也可以用crontab -l做進一步的確認。 定義要被 schedule 的指令或流程 該在哪裡定義 schedule 呢？其實很簡單喔，就是在app/Console/Kernel.php這個檔案裡啦，你會發現有一段被註解的\n1 // $schedule-\u0026gt;command(\u0026#39;inspire\u0026#39;) 2 // -\u0026gt;hourly(); 沒錯喔，他的意思就是每一個小時執行inspire這個指令，也就是php artisan inspire\nhourly可以替換成daily()，也能替換成weekdays之類的，更可以輸出到某一個檔案或寄信，像是appendOutputTo或emailOutputTo 你可以參考這個文件：https://laravel.com/docs/6.x/scheduling#schedule-frequency-options\n這也就是為什麼我要說這部分也和artisan 和 command有所關係，把前面的php artisan 去掉就可以加入 command 的參數作為執行。\n為了方便，我們可以改成\n1$schedule-\u0026gt;command(\u0026#39;inspire\u0026#39;) 2 -\u0026gt;everyMinute() 3 -\u0026gt;appendOutputTo(\u0026#39;inspire.log\u0026#39;); 之後你就會看到 laravel 專案有一個inspire.log，裡面每一分鐘就會增加一句 inspire 的話語呢！\n當然除了command的方式，你也可以使用其它方式呢～讓我做個簡單的示範\n1 $schedule-\u0026gt;call(function () { 2 file_put_contents(\u0026#39;time.log\u0026#39;, \\Carbon\\Carbon::now()); 3 })-\u0026gt;everyMinute(); 這個例子就是每分鐘將每一次時間記錄在time.log～\n如果有想要學習更多可以看看這個：https://laravel.com/docs/6.x/scheduling\n要看完整程式碼的可以參考這裡:https://github.com/r567tw/Make-PHP-Great-Again/commit/49f53d4e3f6b2b89883c905d7f55248a627c910c\n","date":"Oct 7, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-task-scheduling/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Task Scheduling"},{"categories":["鐵人賽"],"content":"接下來我分享關於Laravel內建關於檔案管理的部分，先上個文件：https://laravel.com/docs/6.x/filesystem\nLaravel 的檔案除了傳統上的可以存在本機(Server)上，也可以存在AWS S3和ftp/sftp喔，也可以配合一些大大寫好的套件存在GCP或者其他儲存的載體中。\n這裡就簡單說明一下：\n如果你要提取檔案 1$contents = Storage::get(\u0026#39;file.jpg\u0026#39;); 如果你想要從AWS S3取得檔案的話，在中間加入一個disk即可 1$contents = Storage::disk(\u0026#39;s3\u0026#39;)-\u0026gt;get(\u0026#39;file.jpg\u0026#39;); 註：ftp 和sftp以此類推\u0026hellip;\n而在文件當中也說到我們可以去強迫他人下載檔案，大家有印象的話通常我們在某些連結點擊時不是就會出現一個跳窗(問你要存在哪裡？)(沒有的話可能是你已經先做預設的調整了～)，在Laravel可以這樣用：\n1return Storage::download(\u0026#39;file.jpg\u0026#39;); 接下來，我決定帶大家試做一遍，一個極簡單可以上傳檔案的表單。好讓大家試試看這個File Storage的API。\n建立Route、Controller和blade 首先，我們先準備兩個route，一個是上傳檔案的form，另外一個則是負責上傳流程的。\n1// in routes/web.php 2Route::get(\u0026#39;upload\u0026#39;,\u0026#39;UploadController@uploadPage\u0026#39;); 3Route::post(\u0026#39;upload\u0026#39;,\u0026#39;UploadController@upload\u0026#39;); 然後建立一下UploadController，你可以用指令，也可以手動建立\n1$ php artisan make:controller uploadController 然後，我們先來處理form的部分，uploadPage裡面就只是簡單回傳一個view\n1 public function uploadPage(){ 2 return view(\u0026#39;fileUpload\u0026#39;); 3 } 別忘了要到resources/view資料夾建立fileUpload.blade.php\n1@extends(\u0026#39;layouts.app\u0026#39;) 2 3@section(\u0026#39;content\u0026#39;) 4\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 5 \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; 6 \u0026lt;div class=\u0026#34;col-md-8\u0026#34;\u0026gt; 7 \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; 8 \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; 9 @if (isset($message)) 10 \u0026lt;div class=\u0026#34;success\u0026#34;\u0026gt; 11 {{ $message }} 12 \u0026lt;/div\u0026gt; 13 @endif 14 \u0026lt;form class=\u0026#34;form\u0026#34; action=\u0026#34;\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; 15 @csrf 16 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 17 \u0026lt;label for=\u0026#34;\u0026#34;\u0026gt;檔案上傳\u0026lt;/label\u0026gt; 18 \u0026lt;input class=\u0026#34;form-control-file\u0026#34; type=\u0026#34;file\u0026#34; name=\u0026#34;ImageFile\u0026#34; id=\u0026#34;\u0026#34; accept=\u0026#34;image/*\u0026#34;/\u0026gt; 19 \u0026lt;/div\u0026gt; 20 \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;送出\u0026lt;/button\u0026gt; 21 \u0026lt;/form\u0026gt; 22 \u0026lt;/div\u0026gt; 23 \u0026lt;/div\u0026gt; 24 \u0026lt;/div\u0026gt; 25 \u0026lt;/div\u0026gt; 26\u0026lt;/div\u0026gt; 27@endsection 請記得，上傳檔案的form必須要加一個enctype=\u0026quot;multipart/form-data，否則你無法上傳檔案。\n接下來，讓我們開始處理檔案上傳的流程吧！ 在UploadFileController這個檔案新增upload這個function，別忘了要在之前use Storage喔\n1use Storage; 2...（略） 3 4 public function upload(Request $request){ 5 Storage::put(\u0026#39;test.jpg\u0026#39;, $request-\u0026gt;file(\u0026#39;ImageFile\u0026#39;)-\u0026gt;get()); 6 return view(\u0026#39;fileUpload\u0026#39;)-\u0026gt;withMessage(\u0026#39;Success Upload\u0026#39;); 7 } 說明：這裡可以使用put這個方法，並且將檔案的內容傳入，其實就是這麼簡單，使用request類別的file方法，裡面則就放在表單裡宣告的名稱(name)，這裏以ImageFile為例。\n1\u0026lt;input class=\u0026#34;form-control-file\u0026#34; type=\u0026#34;file\u0026#34; name=\u0026#34;ImageFile\u0026#34; id=\u0026#34;\u0026#34; accept=\u0026#34;image/*\u0026#34;/\u0026gt; 2對上 3$request-\u0026gt;file(\u0026#39;ImageFile\u0026#39;)-\u0026gt;get()** 接下來嘗試上傳一個檔案，看到Success Upload就正確囉 之後你也會看到storage/app 出現了一個test.jpg的檔案囉～ 要看完整程式碼的可以參考這裡:https://github.com/r567tw/Make-PHP-Great-Again/commit/85ba735bbf1144c9c4ea7d5aae142441d59f7871\n","date":"Oct 7, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-file-storage/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel File Storage"},{"categories":["鐵人賽"],"content":"接下來我決定我要分享的部分就是關於測試的部分，我指的可不是我們在前端頁面點一點、拉一拉的肉眼測試喔，而是利用程式測試程式。在 php 有一個很有名的工具：PHPUnit，這麼湊巧的是，Laravel 也結合了這個部分，很巧妙的讓我們也能夠輕鬆的使用 phpunit，搭上 TDD 的方法，讓我們更能夠寫出優秀、強韌的程式來。\n資料夾 首先讓我們看到在 Laravel 專案底下，有一個tests的資料夾，賓果！那就是我們測試所放的部分，Feature是放置比較針對功能面，需求面功能的測試類別，而Unit則是放置關於檔案，像是 Model、Services 等等的測試類別，別急，接下來我會舉一些例子讓你們更加清楚一些。\n如何執行 1$ ./vendor/bin/phpunit 就這麼簡單，把 vendor 裡面的 bin 有一個 phpunit，把他呼叫起來就好了，如果你什麼都還沒做的話應該會類似以下的畫面\n1PHPUnit 8.3.4 by Sebastian Bergmann and contributors. 2 3.. 2 / 2 (100%) 4 5Time: 735 ms, Memory: 20.00 MB 6 7OK (2 tests, 2 assertions) ㄟ ？哪裡來的兩個測試？哈，原來是 Laravel 自己就附帶兩個測試了，一個是Feature/ExampleTest.php，另一個則是Unit/ExampleTest.php\n然後你會看到類似assert為前綴的函式，那就是可以讓我們做結果對應的函式喔。詳細的使用信息你可以參考這個文件：https://laravel.com/docs/6.x/http-tests#available-assertions\n做個示範：以新增文章還有測試 Relationship 為例 接下來，我們來做個範例測試，測試我們之前寫的新增文章還有測試 Relationship 的部分。\n新增文章(Feature) 1$ php artisan make:test ArticleTest 接下來你就會看到在feature底下有一個ArticleTest.php，之後請將裡面的TestExample拿掉並貼上\n1 public function testAddArticle() 2 { 3 $response = $this-\u0026gt;post( 4 \u0026#39;/article\u0026#39;, 5 [ 6 \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Testing\u0026#39;, 7 \u0026#39;content\u0026#39; =\u0026gt; \u0026#39;Testing\u0026#39; 8 ] 9 ); 10 11 $response-\u0026gt;assertRedirect(\u0026#39;/article\u0026#39;); 12 } 執行指令（filter 的參數可以幫助我們只要指定某個測試，而這個參數就是每個 function 去掉前面的 test 即可）\n1$ ./vendor/bin/phpunit --filter=AddArticle 接下來如果你拿到\n1OK (1 test, 2 assertions) 那你就順利囉～～\n測試 Relationship(Unit) 接下來我們也順便講關於unit的部分，測試 Article 和 Tag 之間的關係\n1$ php artisan make:test ArticleModelTest --unit 接下來你就會看到在unit底下有一個ArticleModelTest.php，之後請將裡面的TestExample拿掉並貼上\n1 public function testHaveManyTags() 2 { 3 $article = \\App\\Article::first(); 4 $this-\u0026gt;assertInstanceOf(Collection::class, $article-\u0026gt;tags); 5 } 執行指令（filter 的參數可以幫助我們只要指定某個測試，而這個參數就是每個 function 去掉前面的 test 即可）\n1$ ./vendor/bin/phpunit --filter=HaveManyTags 接下來如果你拿到\n1OK (1 test, 1 assertions) 那恭喜你，結束本日的課程。\n要看完整程式碼的可以參考這裡:https://github.com/r567tw/Make-PHP-Great-Again/commit/0d29855f462cecc952f33cefd51ce0696ee2bb12\n","date":"Oct 6, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-testing/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Testing"},{"categories":["鐵人賽"],"content":"終於來到這個第 20 天了，今天我們繼續談談 Eloquent ORM 的部分，Laravel 為 Eloquent 提供一個很棒的東西，那就是relationship，有點像是我們資料庫裡面的「外來鍵」，透過使用relationship，我們可以更加輕巧的使用 ORM 呢！\nLaravel 寫了一個很詳盡的文件：https://laravel.com/docs/6.x/eloquent-relationships\n提供我們以下這些類型的「relationship」\n一對一 一對多 多對多 多對一 has-one-through Has Many Through 這裡我以一對多的關係作為情境的例子。沿著之前的簡單部落格專案的例子，「一篇文章可以有很多標籤」吧。\n首先，我們必須先做一個很多「標籤」的資料 Model，首先做 Migration 開始。\n1$ php artisan make:migration tags --create=tags 在新的{timestamp}_create_tags_table.php調整一下資料表結構\n1 public function up() 2 { 3 Schema::create(\u0026#39;tags\u0026#39;, function (Blueprint $table) { 4 $table-\u0026gt;bigIncrements(\u0026#39;id\u0026#39;); 5 $table-\u0026gt;bigInteger(\u0026#39;article_id\u0026#39;)-\u0026gt;references(\u0026#39;id\u0026#39;)-\u0026gt;on(\u0026#39;articles\u0026#39;); 6 $table-\u0026gt;string(\u0026#39;name\u0026#39;); 7 $table-\u0026gt;timestamps(); 8 }); 9 } 之後建立 Model\n1php artisan make:model Tag 之後我們就開始建立文章對標籤的一對多關係了，讓我們來到app\\Article.php這裏。加入一段\n1 public function tags() 2 { 3 return $this-\u0026gt;hasMany(\u0026#39;App\\Tag\u0026#39;); 4 } 接下來我們來測試一下，打開php artisan tinker\n1\u0026gt;\u0026gt;\u0026gt; use App\\Article; 2\u0026gt;\u0026gt;\u0026gt; $article = Article::first(); 3=\u0026gt; App\\Article {#3053 4 id: 11, 5 title: \u0026#34;123\u0026#34;, 6 content: \u0026#34;123\u0026#34;, 7 created_at: \u0026#34;2019-09-29 08:10:02\u0026#34;, 8 updated_at: \u0026#34;2019-09-29 08:10:02\u0026#34;, 9 } 10\u0026gt;\u0026gt;\u0026gt; $article-\u0026gt;tags 11=\u0026gt; Illuminate\\Database\\Eloquent\\Collection {#3047 12 all: [], 13 } 這樣就表示我們有成功了喔！\n要看完整程式碼的可以參考這裡:https://github.com/r567tw/Make-PHP-Great-Again/commit/2851d8e553e2eb556026095cf110fca9d7d71972\n","date":"Oct 5, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-eloquent-orm-%E4%B8%8B/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Eloquent ORM-(下)"},{"categories":["鐵人賽"],"content":"接下來我們介紹 Laravel 的 ORM：Eloquent，ORM 就是使用物件導向的方式去操作資料庫。這對負責程式開發的工程師有一個很不錯的好處：不用處理「純 SQL 語法」，當然，不使用「純 SQL」的效能會略比使用 Eloquent 還要差一點，然而，這是可以讓我們有比較易讀的程式碼以及較好的維護性。\n簡單來說Eloquent他就是 Laravel 內部的類別。其實我們繼承他就可以讓我們做使用了，例如之前練習的 Article.php\n1use Illuminate\\Database\\Eloquent\\Model; 2 3class Article extends Model 4{ 5 // 6} 為了接下來我們可以來做一些介紹 Elquent 的部分，我這裡介紹一個之前沒講過指令，但在我們 Debug\\開發的時候非常好用，那就是\n1$ php artisan tinker 然後你可以利用 Cli 的模式去查詢這個 Model，例如查詢所有 Article 框架的好處就是約定成俗，因此當你這樣的宣告Article.php的 Model，他當然也就會對照articles，那如果今天有個情境：不是articles怎麼辦？那也很簡單，在 Eloquent 裡面加入一個新屬性\n1protected $table = \u0026#39;my_articles\u0026#39;; 這樣我們也可以使用其他 table 處理 ORM 囉！\n而他另外還有一個很常用的屬性，就是是否讓我們批次賦值的部分，這個批次賦值可以讓我們不用每一次都要new一個 Model，然後一個一個屬性宣告，最後save()(請複習我們之前綜合應用(4) 使用 Laravel 做一個簡單的部落格：複習-下 )\n1//沒有使用批次賦值 2$article = new Article(); 3$article-\u0026gt;title = $title; 4$article-\u0026gt;content = $content; 5$article-\u0026gt;save(); 但是如果我們要使用批次賦值之後，這就方便許多了，首先在eloquent model同樣增加一種屬性\n1protected $fillable = [\u0026#39;title\u0026#39;,\u0026#39;content\u0026#39;]; 之後我們 ArticleController 就可以這樣改囉～\n1//使用批次賦值 2$article = Article::create($request-\u0026gt;all()) 這樣是否方便許多了呢？\n現在，讓我們感受一下 ORM 的魔力一下，假設我今天想要找出標題為\u0026rsquo;title\u0026rsquo;的資料該怎麼處理？在 Laravel 的 Eloquent ORM 裡，非常簡單\n1Article::where(\u0026#39;title\u0026#39;,\u0026#39;title\u0026#39;)-\u0026gt;get() 詳細的深入可以參考文件：https://laravel.com/docs/6.x/eloquent 明天將會討論 Relationship 的部分，敬請期待吧～\n註：如果要離開php artisan tinker的可以使用exit就可以離開囉 要看完整程式碼的可以參考這裡(今天的程式碼超少的啦 XD):https://github.com/r567tw/Make-PHP-Great-Again/commit/e7041c983f0fd019ef8aa2bff5672e58f2c93588\n","date":"Oct 3, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-eloquent-orm-%E4%B8%8A/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Eloquent ORM-(上)"},{"categories":["鐵人賽"],"content":"今天簡單點、輕鬆一點。\n接下來讓我來介紹一下關於 Laravel 的 Log 功能，有時候我們會需要使用到紀錄的功能，需要知道這個 request 到底發了哪些東西，這樣才能方便我們追蹤我們寫的程式與網頁\nLaravel 的 logs 其實都放在storage/logs這個資料夾當中，你會發現有很多以 Laravel 為前綴並且加入date的.log檔，如果沒有可能剛好只是你的目前的 log 等級還沒有到那裡(預設是 error，也就是有錯誤的時候才會放進去 log 檔裡面)\n其實要弄 log 非常得簡單，使用Log這個類別即可完成～現在讓我們以之前創建文章的那裡作為範例，首先先去ArticleController.php這個檔案裡面\n1use Log; 2....(略) 3 public function store(Request $request) 4 { 5 Log::info(\u0026#39;Hi 我們的第一個Log訊息\u0026#39;); 6 $title = $request-\u0026gt;title; 7 $content = $request-\u0026gt;content; 8 9 $article = new Article(); 10 $article-\u0026gt;title = $title; 11 $article-\u0026gt;content = $content; 12 $article-\u0026gt;save(); 13 14 return redirect(route(\u0026#39;article.index\u0026#39;)); 15 } 當你新增文章之後，你去到最新日期的.log 檔，就會看到一行「Hi 我們的第一個 Log 訊息」囉！ 設定 Log 的設定 其實 Laravl 提供我們很多有關於 Log 的設定，其實我們可以跑到config/logging.php裡面，其實就記載了許多不少的設定，順便補充說明一下env()這個方法，他其實就是在讀取.env 檔的設定喔，所以當我們回來看到.env 檔會看到一行\n1LOG_CHANNEL=stack 為什麼 Laravel 預設 log 都是加入日期，然後一個日期一個日期紀錄呢？能不能統一紀錄同一個？\nLaravel 聽到你的心聲囉，讓我們把.env 裡面LOG_CHANNEL從stack改為single，其實再一次新增文章之後，你就發現我們的 log 檔就多了一個名叫laravel.log的檔案啦！ Log 到 Slack 接下來我們來玩一個極有趣的功能，就是讓 log 跑到 slack 上面，其實非常簡單，Laravel 早就幫我們準備好了，總之就是在.env 檔案裡面增加一行\n1LOG_SLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxxxx 這個LOG_SLACK_WEBHOOK_URL請自行去這裏 自行加入到自己的 workspace 來找囉！\n然後要去一下config/logging.php修改一下 slack 的 log level，把他從原本預設的critical改為debug\n1 \u0026#39;slack\u0026#39; =\u0026gt; [ 2 \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;slack\u0026#39;, 3 \u0026#39;url\u0026#39; =\u0026gt; env(\u0026#39;LOG_SLACK_WEBHOOK_URL\u0026#39;), 4 \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Laravel-Bot\u0026#39;, 5 \u0026#39;emoji\u0026#39; =\u0026gt; \u0026#39;:boom:\u0026#39;, 6 \u0026#39;level\u0026#39; =\u0026gt; \u0026#39;debug\u0026#39;, 7 ], 之後測試一下新增文章，就會在 slack 找到訊息呢！ 如果想要更加使用 log 功能的可以看看以下參考資料：\nhttps://laravel.com/docs/6.x/logging http://kejyun.github.io/Laravel-5-Learning-Notes-Books/services/errors/services-errors-log-packages-slack-log.html 要看完整程式碼的可以參考這裡:https://github.com/r567tw/Make-PHP-Great-Again/commit/dd0466752a79040420427981c94fc22a9e7189c2\n","date":"Oct 2, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-error-and-logging/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Error and Logging"},{"categories":["鐵人賽"],"content":"接下來我們來談一下 Laravel 關於驗證的部分，作為一個全能型的框架 Laravel，到底會讓 Validation 會如何好寫呢！ 以下請跟著我走就知道，check out~。\n為什麼需要驗證 因為我們要當使用者就是笨蛋啊，不是啦，是為了防止使用者輸入到錯的資訊以至於讓我們系統崩潰，別忘了 Garbage in，Garbage out 喔～\nLaravel 提供給我們的驗證規則 還記得我們第十二天做的綜合應用(4) 使用 Laravel 做一個簡單的部落格：複習-下 嗎？如果沒看過的可以回去複習一下，在那裡面，有 update\\create 的表單，其實那是非常粗糙的，完全沒有驗證可言，所以接下來我將以 update 的表單為例子，順便也說明 Laravel 本身到底提供了哪些驗證給我們。\n先上一下文件：\n中文 英文 如果你滑倒底下有一個地方叫做Available Validation Rules，沒錯，Laravel 就是內建提供我們這麼多規則喔～ 不過在這之前，我們先在 blade 那裡放有關於驗證訊息的版面 首先到layouts/layout.blade.php，放這一段程式碼\n1 @if ($errors-\u0026gt;any()) 2 \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34;\u0026gt; 3 \u0026lt;ul\u0026gt; 4 @foreach ($errors-\u0026gt;all() as $error) 5 \u0026lt;li\u0026gt;{{ $error }}\u0026lt;/li\u0026gt; 6 @endforeach 7 \u0026lt;/ul\u0026gt; 8 \u0026lt;/div\u0026gt; 9 @endif 完成，可以回去加入驗證囉 XD\n有很多種方法可以讓我們使用這些驗證規則，以下將簡單的小小帶過：\n在 Controller 直接驗證 我們可以直接改寫update的部分，增加$request-\u0026gt;validate即可 1public function update(Request $request, Article $article) 2 { 3 //method 1. in controller 4 $request-\u0026gt;validate([ 5 \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, 6 ]); 7 8 $title = $request-\u0026gt;title; 9 $content = $request-\u0026gt;content; 10 11 $article-\u0026gt;title = $title; 12 $article-\u0026gt;content = $content; 13 $article-\u0026gt;save(); 14 15 return redirect(route(\u0026#39;article.index\u0026#39;)); 16 } 之後如果你在編輯的那個表單故意沒有填寫而送出的話就會送上一些訊息，就會導回去頁面，並且增加了一段訊息「The title field is required. 」像是這樣 使用 Request 類別(推薦，之後我將會介紹一個專案:Larvel Best Practice ) 這裡介紹一個製作 Request 的方法，實際上這也是比較推薦的做法～\n1$ php artisan make:request UpdateArticleRequest UpdateArticleRequest.php出現在app/Http/requests資料夾當中，然後我們開始處理它 1 public function authorize() 2 { 3 return true; 4 } authorize()這個方法是判斷是否可以處理，原本的預設值是false，我們肯定是需要改成true的。\n之後增加 rules，\n1 public function rules() 2 { 3 return [ 4 \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;required\u0026#39; 5 ]; 6 } 好了，接下來就是使用它了。\n1use App\\Http\\Requests\\UpdateArticleRequest; 2...(略) 3public function update(UpdateArticleRequest $request, Article $article) 4 { 5 $title = $request-\u0026gt;title; 6 $content = $request-\u0026gt;content; 7 8 $article-\u0026gt;title = $title; 9 $article-\u0026gt;content = $content; 10 $article-\u0026gt;save(); 11 12 return redirect(route(\u0026#39;article.index\u0026#39;)); 13 } 其實就是這麼簡單，把原本的Request類別改成UpdateArticleRequest即可，效果一樣\n自己做一個驗證規則 如果當 Laravel 的預設驗證規則都沒有符合我們的需要呢？沒問題，這一切還是可以解決的。\n有很多方法可以使用，其實文件裡面早已寫得清清楚楚，不愧是史上最好看的官方文件，分別有 Rule 類別的方式、Closures 以及 Extensions 的方式，不過我個人偏好使用 Rule 的方式（不要害怕很多檔案或者建立資料夾～）\n1$ php artisan make:rule CustomRule 然後到CustomRule.php裡面調整程式。\n建立 Rule 的邏輯過程 1public function passes($attribute, $value) 2{ 3 return strlen($value) \u0026gt; 10; 4} 自訂訊息 1public function message() 2{ 3 return \u0026#39;字串長度必須大於10\u0026#39;; 4} 如何使用我們的驗證 自訂訊息CustomRule做好了，接下來該如何使用它呢？ 到UpdateArticleRequest.php那裡\n1use App\\Rules\\CustomRule; 2...(略) 3public function rules() 4{ 5 return [ 6 \u0026#39;title\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, new CustomRule] 7 ]; 8} 其實就是把原本字串的方式改成以陣列的模式，然後使用 new 關鍵字把她實例化出來。\n這時候如果你發現我們如果標題沒有填入超過 10 個字送出去後就會回傳「字串長度必須大於 10」囉 要看完整程式碼的可以參考這裡: https://github.com/r567tw/Make-PHP-Great-Again/commit/502ad5aeeaf43e074b1ce76ce54ffaddc1ea8899 ","date":"Oct 1, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-validation/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Validation"},{"categories":["鐵人賽"],"content":"接下來我們來說明關於 Laravel 的 Middleware，什麼是 Middleware 呢？中文名稱稱呼是「中介層」，我是想像他有點像是防火牆的概念，可以在每一次 request 進入 controller 的流程當中，做一層過濾、驗證的部分，而當 Response 出來之後，也會經過這樣一層層程序回應給使用者。\n在這裏也提供一些參考資料：https://laravel.tw/docs/5.2/middleware 舉例來說，還記得我們第 12 天綜合應用嗎？如果沒看過記得回去複習一下使用 Laravel 做一個簡單的部落格：複習-下 在我們撰寫關於create、edit和destroy的表單當中，不是都有帶一個@csrf嗎？其實這個csrf就是一種 Middleware，他就藏在 Laravel 的app\\Http\\Middleware這個資料夾，有一個名為VerifyCsrfToken.php的檔案喔～ 補充一下關於 CSRF 的科普:順便淺談一下 Laravel 為我們帶上哪些 Middleware 這裡插播一些小知識好了，為什麼會需要驗證是否有一個CSRF的 token，原因是因為 HTTP 其實他是很好被偽造的，同時更是因為HTTP是一種無狀態協定，其實你以為你登入的那些資料其實都是瀏覽器幫忙，所以你才可以一開始就不用什麼登入就有資料、或者看到你那些資訊～\n總之請求很容易被偽造，CSRF 就是可以在不同的 domain 底下卻能夠偽造出「使用者本人發出的 request」\n討論 CSRF 也不是本篇的重點，總之如果你想要更多理解可以參考底下連結：\n讓我們來談談 CSRF wiki-跨站請求偽造 所以聰明的 Laravel 就自動幫我們附帶了一個VerifyCsrfToken.php囉，不過你要關閉也是可以啦，不建議這麼做～\n有兩個方法：一種是全域的，另外一種是局部性的\nA. 局部性的： 先談一下局部性的關閉 CSRF，當你跑去打開VerifyCsrfToken.php的時候，有沒有發現$except這個地方呢？裡面填一下相關的 URL 就可以囉，我以前面我們做的Create表單作為例子。（根據我們 RESTFul API 的概念，Create就是article~）\n1 protected $except = [ 2 \u0026#39;article\u0026#39; 3 ]; 之後你就可以在article/create.blade.php把@csrf拿掉囉，之後新增文章就不在需要經過 CSRF 的部分了\nB. 全域的 另外一個方法就是我們直接全部關閉 CSRF，就是我們要到HTTP/Kernel.php裡面，有一個$middlewareGroups的地方，直接註解掉web裡面的\\App\\Http\\Middleware\\VerifyCsrfToken::class,這一行就好啦，這樣全站都不會經過 CSRF 了，同時，你也發現了，其實 Laravel 也提供了我們一些預設的Middleware，例如\\App\\Http\\Middleware\\EncryptCookies::class,等等等，有興趣的話可以去看這些檔案都做了哪些事情～。\n製作自己的 Middleware 現在我們來設定一下簡單的情境，只有 email 為example@example.com才能進來我們指定的地方，所以我們就必須先確定資料庫 User 有一個 email 為example@example.com的人\n讓我們開始來建立自己的 MiddleWare 吧！！沒錯，正如你想的那樣，Laravel 也提供了我們類似的建立指令喔～\n1$ php artisan make:middleware FirstMiddleware 接下你就會看到FirstMiddleware.php這個檔案。 在FirstMiddleware.php這個檔案裡面handle()做出改寫\n1 public function handle($request, Closure $next) 2 { 3 if (!Auth::check()) { 4 return redirect(route(\u0026#39;login\u0026#39;)); 5 } 6 7 if (auth()-\u0026gt;user()-\u0026gt;email === \u0026#34;example@example.com\u0026#34;) { 8 return $next($request); 9 } else { 10 return response(\u0026#39;You can not access this page!\u0026#39;); 11 } 12 } 說明： auth()其實就是 Laravel 內建的驗證 user 的方法，他裡面提供 user()和 check()的方法檢查 user 及提取 user 資料，在這個範例當中，如果他沒有登入就導向到登入的地方，另外確定登入好後繼續處理流程，也就是確認 user 的 email 這樣。\n但可不是建立好 Middleware 這麼簡單，我們還需要告訴 Http/kernal 有這個 Middleware，到Http/Kernel.php裡面找到$routeMiddleware補充一行\n1\u0026#39;FirstMiddleware\u0026#39; =\u0026gt; \\App\\Http\\Middleware\\FirstMiddleware::class, 如何使用自己做的 Middleware 有兩種方式，一個是在 Controller ，另一個是在 Route。\nController 一個是在 Controller 裡面使用__construct將 Middleware 引入，像是這樣\n1public function __construct() 2{ 3 $this-\u0026gt;middleware(\u0026#39;auth\u0026#39;); 4} auth這個名稱其實就是我們剛剛在http/Kernel.php註冊的$routeMiddleware那裡喔～ Route 另一個則是在 route 直接做宣告，這裡我們使用這個策略 到routes/web.php加入一個新規則 1Route::get(\u0026#39;middlewareTest\u0026#39;, function () { 2 return \u0026#39;Hello example@example.com\u0026#39;; 3})-\u0026gt;middleware(\u0026#39;FirstMiddleware\u0026#39;); 完成囉！ 以下如果想要知道 Middleware 可以還有什麼樣的變化可以直接看看文件：\nhttps://laravel.com/docs/6.x/middleware 要看完整程式碼的可以參考這裡: https://github.com/r567tw/Make-PHP-Great-Again/commit/7aba3963ee4d66473c13b97afceebb434dbb4938 ","date":"Sep 30, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-middleware/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Middleware"},{"categories":["鐵人賽"],"content":"接下來我們要講講關於 Laravel 的 Email 的功能，其實所謂的現代框架，尤其是像 Laravel 本身這樣「全能型」的框架，基本上都會有相關寄信、送信的功能。現在讓我們～開始囉～\n介紹 MailTrap 服務 要讓程式寄送電子郵件，首先一定是要有個SMTP的 SERVER 才可以，不可能無緣無故就讓你用幾行程式簡簡單單就寄送出去，當然要有一個從什麼發出來的東西啊～如果不太了解什麼是 SMTP 沒關係，你先將它當作類似 Apache 或者 Nginx 提供 HTTP 服務的東西，只是它是提供Email寄送的服務。\n但我們又不是 MIS，哪裡來的 SMTP 啊\n沒關係，你只要知道，現代網路上基本上你的問題絕對不是第一個發生的，如果可以，一定有解決方案，如果沒有解決方案，那就解決提出問題的人\n總之MailTrap就是類似這樣的服務，可以方便提供開發者作出簡單的測試信件之類的，你現在上面註冊過帳號，然後到https://mailtrap.io/inboxes 這裏，你會看到底下的畫面\n選擇點進去某個 inboxes 當中，之後你會看到這樣的畫面。 叮咚，我們有一個可以測試用的 SMTP 囉～ 不過這只是屬於開發中在用的，如果要搬到正式專案上建議仍是要有一個真正的 SMTP Server 喔\n填入 SMTP 資訊到.env 當中 如何將 SMTP 連結我們的 Laravel 專案呢？那些繁複的過程和程式其實 Laravel 大部分都幫我們寫好了，我們只要填入資訊即可，讓我們到.env這個檔案當中，你會看到MAIL_DRIVER那裡，請把你剛剛在mailtrap上看到的username和password分別對應填到MAIL_USERNAME和MAIL_PASSWORD裡 開始寫 Mailable 連線資訊準備好了，那我們來準備寄信看看吧！ 首先讓我們建立一個叫做Mailable的東西，這是 Laravel 所提供的 class\n1$ php artisan make:mail FirstMail 有沒有看到app資料夾裡面多了mail/FirstMail.php呢？ 之後，我們去到FirstMail.php這個檔案改寫一下build()這個地方，改寫為\n1public function build() 2{ 3 return $this-\u0026gt;from(\u0026#39;example@example.com\u0026#39;)-\u0026gt;view(\u0026#39;mail.index\u0026#39;); 4} 有沒有看到很熟悉的view啊，所以讓我們到views裡面建立mail/index.blade.php 之後在index.blade.php放一段簡單的HelloWorld就好。這樣我們的 Mail 大概完成了啦～\n使用 Mailable 之後我們寫一個簡單的路由規則\n1Route::get(\u0026#39;sendMail\u0026#39;, function () { 2 \\Mail::to(\u0026#39;abc@abc.com\u0026#39;)-\u0026gt;send(new \\App\\Mail\\FirstMail); 3}); 之後php artisan serve之後到http://127.0.0.1:8000/sendMail\n回到MailTrap，本堂課完成！ 不過啊，寄 Email 也可以帶上一些參數、附件，這些都是可以的喔，如果你有興趣想更加進深，可以參考史上最好看的官方文件：https://laravel.com/docs/6.x/mail\n要看完整程式碼的可以參考這裡: https://github.com/r567tw/Make-PHP-Great-Again/commit/85bb74924e6fb29aa7eb4d7910468fbf69b8f8d9 ","date":"Sep 30, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-mail-and-mailable/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Mail and Mailable"},{"categories":["鐵人賽"],"content":"接下來讓我們來討論關於 Command 的部分，Laravel 本身提供了一些類似 CLI 的部分，許多強大的現代框架大部分也都會有類似的功能。對了，補充一下，CLI 全名是：Command-line interface，意思是他有別於圖形化介面，以不倚靠滑鼠、大部分倚靠鍵盤，key 進一連串的文字及指令。\nLaravel 的 CLI 名為Artisan，他的使用方式就是在artisan前面加上php，意思是我用 php 去執行Artisan這個檔案，讓我們來看看 Laravel 的資料夾，是不是果真就有一個 Artisan 的檔案呢？ 然後其實Artisan本身也就是一個 php 的檔案，基本上就是和public/index.php有點像，就是啟動核心來 Handle 我們的輸入及輸出。只是這個 kernal 是從 HTTP 的部分換成 Console，不過沒關係，如果你對 Laravel 的源碼非常有興趣，可以自行研究。我們其實只要怎麼用，知道出問題找誰就好了。\nLaravel 提供的指令 其實在你建立 Laravel 的時候，Laravel 就附帶很多的指令供我們操作，之前我們不是常常建立那些 Controller、Migration 或者 Model 之類的檔案嗎，都可以透過 Artisan 為我們建立看來，你可以下php artisan list就知道到底 Laravel 為我們提供了哪些指令。 其實這個圖片後面還有很多指令，我們之前也常用這些指令，像是php artisan serve或者php artisan migrate等等。其實有些我在前幾天的文章都會統一整理在Artisan 相關指令這個小章節，但之後我們也會繼續補充，乾脆許願一下如果本篇訂閱人數在 30 天結束前超過 20 人就來寫一篇超完整Artisan 指令CheetSheet好了～ 不過其實你用前面的 php artisan list 就好了啊\n產生新的指令-Scafford 指令 還記得我們在第四天講到 Route 路由的部分嗎？如果忘記的可以到這裡複習:Laravel Route(路由) 其實啊，在 routes 這個資料夾底下就有一個名為console.php這個檔案，如果你有舉一反三的能力應該會清楚，我們在 web.php 那時使用function的部分嗎？之後我們很少在web.php裡面在寫類似function這種呼叫模式了，基本上我們都用 Controller 替代，相對 Console.php 而言，Command 其實就是對應像是 Controller 的角色。讓我們之後用舉例來做說明： 首先，我們先開始執行make的指令\n1$ php artisan make:command FirstCommand 註：其實啊，這個 FirstCommand 這一串字你可以替換任何你想替歡的字串。\n之後你會在 app\\Console\\Command 的資料夾裡看到FirstCommand.php這個檔案囉 這也表示我們成功一半了\n產生新的指令-寫指令裡面的功能 接下來讓我們來看看這個幫我們產生出來的FirstCommand.php到底做了什麼事情，讓我們先來打開他看看\n1\u0026lt;?php 2 3namespace App\\Console\\Commands; 4 5use Illuminate\\Console\\Command; 6 7class FirstCommand extends Command 8{ 9 /** 10 * The name and signature of the console command. 11 * 12 * @var string 13 */ 14 protected $signature = \u0026#39;command:name\u0026#39;; 15 16 /** 17 * The console command description. 18 * 19 * @var string 20 */ 21 protected $description = \u0026#39;Command description\u0026#39;; 22 23 /** 24 * Create a new command instance. 25 * 26 * @return void 27 */ 28 public function __construct() 29 { 30 parent::__construct(); 31 } 32 33 /** 34 * Execute the console command. 35 * 36 * @return mixed 37 */ 38 public function handle() 39 { 40 // 41 } 42} 我們發現這個 FirstCommand 繼承了 Command 這個類別，而 Command 這個類別其實就是 Laravel 本身提供的類別，你會發現在之後我們常用他的方法～\n哦~ 我們發現他裡面有一個signature的屬性，其實這就是我們在 CLI 所要放的字串，舉例來說我們常常會用到php artisan serve，那麼這個signature就是serve。\n現在讓我們在signature為其賦予一串文字吧，我先以HelloWorld作為起頭。\n1// 修改一下protected $signature = \u0026#39;command:name\u0026#39;; 2protected $signature = \u0026#39;HelloWorld\u0026#39;; 然後之後要在handle()裡開始寫我們的執行流程和邏輯，在這裏其實很簡單，\n1public function handle() 2{ 3 $this-\u0026gt;info(\u0026#39;HelloWorld\u0026#39;); 4} 接下來神奇海螺的事情發生了，在 Command line 打上php artisan HelloWorld就會出現HelloWorld的字樣呢！\n不過我知道你會疑惑 Laravel 給我們的形式Command:name是什麼意思，呵呵，有時候我們打指令不是也會加入一些參數或引數嗎？name就是這樣的用法~ 讓我們來改造一下 HelloWorld 來做示範看看\n將 $signature 改成HelloWorld:name {name} 註：如果你還記得我之前教的 route 嗎？其實參數就是這麼簡單加入的喔～ 1protected $signature = \u0026#39;HelloWorld:name {name}\u0026#39;; 之後再Handle()可以用這樣的方式接下$name 1public function handle() 2{ 3 $name = $this-\u0026gt;argument(\u0026#39;name\u0026#39;); 4 $this-\u0026gt;info(\u0026#39;Hello \u0026#39; . $name); 5} 之後我們自製的指令就可以這樣更加進階：php artisan HelloWorld:name {NAME} 像是下圖： 另外，Laravel 的 Console 可不只有info這種只會顯示資料的方法喔，他還有很多的功能，例如問答\n1$framework = $this-\u0026gt;ask(\u0026#39;What is your favorite framework?\u0026#39;); 2$this-\u0026gt;info($framework); 如果希望對 Command 有更多的研究可以參考文件：https://laravel.com/docs/5.8/artisan\n之後我們會談到 Schedule 的部分，也就是 Cron Job 的相關，可以讓電腦為我們做一些例行公事的概念，會與 Command 有密切的相關，所以希望你能先將 Command 這個特色有ㄧ些基礎的概念\n要看完整程式碼的可以參考這裡: https://github.com/r567tw/Make-PHP-Great-Again/commit/7a46a36355f31d3789db26c3e0e713d4ae324c52 ","date":"Sep 29, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-artisan-%E4%BB%A5%E5%8F%8A-command/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Artisan 以及 Command"},{"categories":["鐵人賽"],"content":"經過前幾天導覽過簡單的 Laravel 之 CRUD 篇，現在開始我們要一一來談談關於比較進階，而且也是平時開發常用到的功能與指令等，可能有時候也會順便在講解的時候偶爾帶入前幾天說的東西。在網站開發上，我們常常會有所謂的「會員制度」，身為一個成熟的框架 Laravel，他要如何實現會員制度這個功能呢？放心，不會很辛苦，幾個指令就能搞定，厲害吧！讓我們來體驗這種快速開發吧！ Let's Go!\n在 Laravel6.0 之前 其實作者我很早就開始寫 Laravel 了，只是我沒想到在我寫這一系列文章的時候，Laravel 6.0 就已經出來啦！ 推薦一下隔壁棚的鐵人賽，那裡會稍微帶到 Laravel6.0 的特色：Laravel 6.0 初體驗！怎麼用最新的 laravel 架網站！ 既然都是寫 Laravel 當然都支持一下啦～ 不過廢話說太多了，在 Laravel 6.0 之前，Laravel 5.x 的版本其實很厲害，一個指令就能完成：\n1$ php artisan make:auth 這也太簡單了\u0026hellip;不過這一切，要從 Laravel 6 說起\n在 Laravel 6.0 之後 後來當我下php artisan make:auth之後，居然出錯，和我說沒有 make:auth 這個指令，我就知道，Laravel 6.0 改版囉～ 和各位說明一下，如果你們仔細去看之前小專案的composer.json就會發現 原來是 Laravel 6.0 的部分啊(拍手)\n好了，又歪樓，因為幾個指令就能完成 Auth 的部分所以才會說那麼多廢話，我絕對不是因為要把鐵人賽的文章寫到一定字數挑戰成功才故意寫這麼多\n首先，讓我們先用 Composer 安裝一個 Package\n1$ composer require laravel/ui 之後請使用 ui 的指令，並且加入\u0026ndash;auth 這個參數\n1$ php artisan ui vue --auth 2Vue scaffolding installed successfully. 3Please run \u0026#34;npm install \u0026amp;\u0026amp; npm run dev\u0026#34; to compile your fresh scaffolding. 4Authentication scaffolding generated successfully. 之後按照他的回應說Please run \u0026quot;npm install \u0026amp;\u0026amp; npm run dev\u0026quot; to compile your fresh scaffolding.，在下一些指令\n1$ npm install \u0026amp;\u0026amp; npm run dev 然後呢？沒有然後了， 使用php artisan serve 之後你只要進入到http://127.0.0.1:8000，你就會看到你的畫面右邊有兩個字：login 和 register 剩下的就是玩耍的部分了\n要看完成程式碼的可以參考這裡(不過其實都是用指令生成出來的啦，沒什麼參考價值 XD): https://github.com/r567tw/Make-PHP-Great-Again/commit/efa323cdfa9c5708a72299ff3e95d47e8334654c ","date":"Sep 27, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-auth-%E7%82%BA%E7%B6%B2%E7%AB%99%E5%8A%A0%E5%85%A5%E6%9C%83%E5%93%A1%E5%9B%89%EF%BD%9E/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Auth: 為網站加入會員囉～"},{"categories":["鐵人賽"],"content":"接下來到該篇章最後一個小節，讓我們把剩下的新增、修改、刪除都做好吧！ 這是接續前兩天的實作，如果不太清楚的話記得複習一下前兩天\n綜合應用(2) 使用 Laravel 做一個簡單的部落格：複習-上 綜合應用(3) 使用 Laravel 做一個簡單的部落格：複習-中 新增文章對於 RESTFul API 的概念來說，他是一種POST，對於網址來說以 Article 為例則是http://127.0.0.1:8000/article，然而，這個網址其實正也是index的網站(不過他是用GET的方法)\u0026hellip;.但是，我們要怎麼傳要新增的資料呢？怎麼辦？\n因此對於 Laravel 來說，他在網址後面也增加了一個關鍵字：create作為識別，以告訴瀏覽器，這是一個創建文章的頁面，不是列表 index 的頁面喔，然後用 form POST 的方式，將新增文章建立好。同理其實與修改文章的模式一樣，C 和 U 有兩個頁面，C 對應到 create()和 store()，而 U 對應到 edit()和 update()\n新增文章 之前我們說到 CRUD，而 C 就對應到 controller 的 create()和 store()\nArticleController@create 只是傳一個頁面，和 Show()很像，傳一個 view 給他就好\n1 public function create() 2 { 3 return view(\u0026#39;articles.create\u0026#39;); 4 } 別忘了我們要做一個articles/create.blade.php喔，如下\n1@extends(\u0026#39;layouts.layout\u0026#39;) 2 3@section(\u0026#39;content\u0026#39;) 4\u0026lt;h1 class=\u0026#34;font-bold\u0026#34;\u0026gt;新增文章\u0026lt;/h1\u0026gt; 5\u0026lt;form class=\u0026#34;bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\u0026#34; action=\u0026#34;{{ route(\u0026#39;article.store\u0026#39;)}}\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; 6 @csrf 7 \u0026lt;div class=\u0026#34;mb-4\u0026#34;\u0026gt; 8 \u0026lt;label class=\u0026#34;block text-gray-700 text-sm font-bold mb-2\u0026#34; for=\u0026#34;title\u0026#34;\u0026#34;\u0026gt; 9 標題 10 \u0026lt;/label\u0026gt; 11 \u0026lt;input class=\u0026#34; shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight 12 focus:outline-none focus:shadow-outline\u0026#34; type=\u0026#34; text\u0026#34; name=\u0026#34;title\u0026#34; id=\u0026#34;title\u0026#34;\u0026gt; 13 \u0026lt;/div\u0026gt; 14 \u0026lt;div class=\u0026#34;mb-4\u0026#34;\u0026gt; 15 \u0026lt;label class=\u0026#34;block text-gray-700 text-sm font-bold mb-2\u0026#34; for=\u0026#34;content\u0026#34;\u0026gt; 16 內容 17 \u0026lt;/label\u0026gt; 18 \u0026lt;textarea 19 class=\u0026#34;shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\u0026#34; 20 name=\u0026#34;content\u0026#34; id=\u0026#34;content\u0026#34; cols=\u0026#34;30\u0026#34; rows=\u0026#34;10\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; 21 \u0026lt;/div\u0026gt; 22 \u0026lt;button 23 class=\u0026#34;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\u0026#34; 24 type=\u0026#34;submit\u0026#34;\u0026gt;新增\u0026lt;/button\u0026gt; 25\u0026lt;/form\u0026gt; 26 27@endsection PS.tailwindcss 的麻煩之處就是他的 class 名稱會變得好長好長 XD 在php artisan serve 接下來你進入http://127.0.0.1:8000/article/create就可以看到我們要的新增文章表單囉～ 說明 @csrf 是 Blade 的用法，如果你有用到 Laravel 的表單，那麼這個東西你是一定要加的，除非你把管 csrf 的 Middleware 先關掉，關於 Middleware 的部分我們以後會再說明，總之這是一種資安的防禦手段，需要加入這個部分，想更多了解可以到此：https://laravel.com/docs/5.8/csrf ArticleController@store 當表單送出去後，就會到這個store的 function，之前第二天 MVC 有談到，如果不知道的可以到這裡：來談什麼是 MVC 結論就是如同我們現在所實作的這樣，View 不可能直接對Ｍ odel 作用，而需要透過表單傳送給 Controller 來對 Model 做調整。 所以Store()這個部分承接了表單傳過來的資料、對 Model 作用且要導向頁面\u0026hellip;所以我們的 store 可以這麼寫\n1 public function store(Request $request) 2 { 3 $title = $request-\u0026gt;title; 4 $content = $request-\u0026gt;content; 5 6 $article = new Article(); 7 $article-\u0026gt;title = $title; 8 $article-\u0026gt;content = $content; 9 $article-\u0026gt;save(); 10 11 return redirect(route(\u0026#39;article.index\u0026#39;)); 12 } 之後我們在新增頁面新增完資料就會回到列表頁囉，而在列表頁裡面也就有我們新增的一筆新文章。\n說明 redirect 就是重新導向，此範例就是導向到文章列表 而我們可以藉由 new 一個新的 model，然後對他填入資料、之後使用save() 這個 function 就可以幫助我們對資料庫寫入資料 修改文章 修改文章的部分其實和新增文章很相似， U 就對應到 controller 的 edit()和 update() 只是比較特別的是 HTTP 裡面只有 GET 和 POST 的方法，如何實現 PUT/PATCH 呢？ 我現在先把程式碼範例放上來，如果需要說明的會再做更多說明～\nArticleController@edit 和 Create 一樣簡單，就是回傳一個可以讓我們更新的頁面而已，不過我們也要把準備要被修改的資料一起傳到 blade 給他喔，所以在後面增加了withArticle。\n1 public function edit(Article $article) 2 { 3 return view(\u0026#39;articles.edit\u0026#39;)-\u0026gt;withArticle($article); 4 } 而edit.blade.php和Create.blade.php非常像，其實我們只要把$article 的值填入表單，另外使用@method(\u0026lsquo;PUT\u0026rsquo;)，將 form 的 action 改為route('article.update',$article-\u0026gt;id)就好了啊\n1@extends(\u0026#39;layouts.layout\u0026#39;) 2 3@section(\u0026#39;content\u0026#39;) 4\u0026lt;h1 class=\u0026#34;font-bold\u0026#34;\u0026gt;編輯文章\u0026lt;/h1\u0026gt; 5\u0026lt;form class=\u0026#34;bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\u0026#34; action=\u0026#34;{{ route(\u0026#39;article.update\u0026#39;,$article-\u0026gt;id)}}\u0026#34; 6 method=\u0026#34;post\u0026#34;\u0026gt; 7 @csrf 8 @method(\u0026#39;PUT\u0026#39;) 9 \u0026lt;div class=\u0026#34;mb-4\u0026#34;\u0026gt; 10 \u0026lt;label class=\u0026#34;block text-gray-700 text-sm font-bold mb-2\u0026#34; for=\u0026#34;title\u0026#34;\u0026#34;\u0026gt; 11 標題 12 \u0026lt;/label\u0026gt; 13 \u0026lt;input class=\u0026#34; shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight 14 focus:outline-none focus:shadow-outline\u0026#34; type=\u0026#34; text\u0026#34; name=\u0026#34;title\u0026#34; id=\u0026#34;title\u0026#34; value={{ $article-\u0026gt;title }}\u0026gt; 15 \u0026lt;/div\u0026gt; 16 \u0026lt;div class=\u0026#34;mb-4\u0026#34;\u0026gt; 17 \u0026lt;label class=\u0026#34;block text-gray-700 text-sm font-bold mb-2\u0026#34; for=\u0026#34;content\u0026#34;\u0026gt; 18 內容 19 \u0026lt;/label\u0026gt; 20 \u0026lt;textarea 21 class=\u0026#34;shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\u0026#34; 22 name=\u0026#34;content\u0026#34; id=\u0026#34;content\u0026#34; cols=\u0026#34;30\u0026#34; rows=\u0026#34;10\u0026#34;\u0026gt;{{ $article-\u0026gt;content }}\u0026lt;/textarea\u0026gt; 23 \u0026lt;/div\u0026gt; 24 \u0026lt;button 25 class=\u0026#34;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\u0026#34; 26 type=\u0026#34;submit\u0026#34;\u0026gt;更新\u0026lt;/button\u0026gt; 27\u0026lt;/form\u0026gt; 28 29 30@endsection 接下來就到http://127.0.0.1:8000/article/1/edit就看到可以修改的頁面囉～ ArticleController@update 接下來讓我們寫一下修改文章的邏輯吧！ 其實也是和store()類似，只是不需要 new 出一個新的 article 了，我們直接對他操作就好了喔\n1 public function update(Request $request, Article $article) 2 { 3 $title = $request-\u0026gt;title; 4 $content = $request-\u0026gt;content; 5 6 $article-\u0026gt;title = $title; 7 $article-\u0026gt;content = $content; 8 $article-\u0026gt;save(); 9 10 return redirect(route(\u0026#39;article.index\u0026#39;)); 11 } 接下來送出更新的表單就很快看到列表上的文章被更新啦～ 撒花～～～\n刪除文章 終於來到最後的刪除文章，對於 Controller 來說他就是destroy()這個方法，從 RESTFul API 讀到它就是使用Delete方法，剛剛我們從edit.blade.php得知我們可以使用@method()這個部分，但這個通常要加入一個POST表單一起才會生效，所以讓我們修改一下文章列表的部分～ 原本的在index.blade.php刪除按鈕的部分：\n1\u0026lt;a href=\u0026#34;{{ route(\u0026#39;article.destroy\u0026#39;,$article-\u0026gt;id ) }}\u0026#34;\u0026gt;刪除\u0026lt;/a\u0026gt; 我們可以加入表單，讓他變成\n1\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;{{ route(\u0026#39;article.destroy\u0026#39;,$article-\u0026gt;id ) }}\u0026#34;\u0026gt; 2 @csrf 3 @method(\u0026#39;delete\u0026#39;) 4 \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;刪除\u0026lt;/button\u0026gt; 5\u0026lt;/form\u0026gt; 然後開始寫我們的刪除流程囉～\nArticleController@destroy 1 public function destroy(Article $article) 2 { 3 $article-\u0026gt;delete(); 4 return redirect(route(\u0026#39;article.index\u0026#39;)); 5 } 之後你按刪除就會把你選得那一篇文章刪除了呢！\n要看完成程式碼的可以參考這裡：https://github.com/r567tw/Make-PHP-Great-Again/commit/30f58366dbbcd4377bc9b0d92e231739ead5ffd5\n結語 以上就是利用 RESTFul API 所做的一個極簡單的文章管理或者部落格專案，當然，現實世界中根本不可能這麼簡單，還記得我們剛剛一直在用的@csrf嗎？那是 Laravel 其中一個 Middleware，另外我們新增與修改也不會這麼簡單，在網頁世界裡，我們要當使用者是很危險的一種生物，一定有時候會有亂寫、不符合格式之類的，所以驗證因應而生。因此，之後讓PHP再次偉大，使用Laravel將會進入一個新的章節，開始討論關於 Laravel 裡面有的深度工具與用法，記得要訂閱我喔！(雖然我不一定把握會寫得很好就是了)\n另外，藉由這四篇的小專案教學也算是要綜合前幾天的所寫所學，畢竟我並不覺得自己前幾天寫得很好，希望藉由這樣的小實作可以讓你們更了解怎麼使用 Laravel，如果有疑問的歡迎在底下發問，這樣才可以成為我下一次寫技術文的養分，知道自己應該要怎麼寫會讓人更加明瞭～～\n","date":"Sep 26, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A84-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%8B/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"綜合應用(4) 使用 Laravel 做一個簡單的部落格：複習-下"},{"categories":["鐵人賽"],"content":"昨天我們小部落格專案已經準備好資料庫、Seeder、Route和Model了。\n如果錯過的可以看看昨天的：綜合應用(2) 使用 Laravel 做一個簡單的部落格：複習-上 現在剩下最後的Controller和View我們就可以將這個小專案完成囉，Check out~\n建立Controller 首先就是Controller拉，既然我們Route/web.php 裡面新增了Route::resource('article', 'ArticleController');\n我們當然就是要把ArticleController生出來啊\n一個指令就能結束這一個回合～\n1$ php artisan make:controller ArticleController --resource 接下來你會看到ArticleController.php 在App\\Http\\Controller\\這個資料夾底下囉\n建立View 接下來，我們必須要建立一些可以用的view檔案。不過這些檔案沒辦法用指令產生，真是可惜 而這個地方其實最為繁瑣，所以我才臨時決定將這篇簡單部落格專案教程分成上下兩部，才不是因為昨天我想要耍廢\n其實撰寫blade其實就像寫html一樣好玩，你可以參考之前我寫的第八天文章自行發揮創意：Laravel View 然後為了專注於Laravel 的開發，以下對於view的撰寫會盡量簡潔及陽春，css的部分也就只是隨便套套css framework這樣喔～～\n所以讓我們開始吧！ Go!Go!Go! 來到resources\\view這個資料夾，建立一個layouts的子資料夾 讓我們建立一個layout.blade.php吧，如下圖 在layout.blade.php填入以下程式碼：\n1\u0026lt;html\u0026gt; 2 \u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 4 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;FirstLaravelProject\u0026lt;/title\u0026gt; 6 \u0026lt;link href=\u0026#34;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; 7 \u0026lt;/head\u0026gt; 8 \u0026lt;body\u0026gt; 9 \u0026lt;div class=\u0026#34;container mx-auto\u0026#34;\u0026gt; 10 @yield(\u0026#39;content\u0026#39;) 11 \u0026lt;/div\u0026gt; 12 \u0026lt;/body\u0026gt; 13\u0026lt;/html\u0026gt; 在此專案中我選擇使用TailwindCSS ，你可以自行選擇你喜歡的css ，我是想要順便學習TailwindCSS拉 不是在第八天早就說了嗎，blade可以讓你用類似繼承、模板的方式，讓你很清晰清楚的開發php～讓大家見識@yield的厲害！ 開始串Articles的小前言 接下來讓我們邊把controller的function填一填，順便一起建立起view吧！以下為了極度簡潔程式碼，所以我會用很多Laravel附帶的magic method，你可能在其他人的文章看到不同的寫法，但基本上都是大同小異喔！\n另外當然拉，既然ArticleController要使用到Article的資料表，理所當然的就要用到它的model了喔，所以讓我們先到ArticleController.php裡面，使用use這個關鍵字(這就是現在php奧義)，將App\\Article引入進來～\n像是底下這樣\n1\u0026lt;?php 2namespace App\\Http\\Controllers; 3 4use Illuminate\\Http\\Request; 5use App\\Article; //將Model引入進來，這樣我們才可以在Controller裡面使用它 6 7class ArticleController extends Controller 8{ 9 //...略... 10} ArticleController@index() 在RESTFul API裡面，通常index 是所謂的首頁 ，就資源的角度來看，是一種列表。\n當我們利用--resource的參數時，ArticleController裡面就有了index方法，讓我們在index裡面加入一下他要做的功能：列表\n1public function index() 2{ 3 return view(\u0026#39;articles.index\u0026#39;)-\u0026gt;withArticles(Article::all()); 4} 嘿嘿，這裡用到Laravel的一個Magic Method ，將後面的with加上英文字母，就可以把參數傳到view的部分\u0026hellip;.當然，或許你比較常見的應該是這樣：\n1public function index() 2{ 3 $articles = Article::all(); 4 return view(\u0026#39;articles.index\u0026#39;)-\u0026gt;with(\u0026#39;articles\u0026#39;,$articles); 5} 這也是可以～不過我喜歡簡潔漂亮的程式碼，所以喜歡使用前者。 還記得我們第四天講到的Laravel Route的部分嗎？沒看過的請到這裡來：Laravel Route ，裡面關於web.php的部分是不是Laravel給了我們有一段關於view()這敘述，沒錯拉，這個也可以在controller裡面用喔～所以我上面填充的程式碼代表請到articles/index.blade.php這個檔案來，並且也帶上名為$articles的參數\n所以我們當然就要建立articles/index.blade.php 囉，但是裡面總不能空空的吧？這時候就用到前幾天的blade技巧，繼承來自剛剛建立的layout.blade.php，順便我們也用表格來呈現文章列表～\n1@extends(\u0026#39;layouts.layout\u0026#39;) 2 3@section(\u0026#39;content\u0026#39;) 4 \u0026lt;h1\u0026gt;文章列表\u0026lt;/h1\u0026gt; 5 \u0026lt;a href=\u0026#34;{{ route(\u0026#39;article.create\u0026#39;) }}\u0026#34;\u0026gt;新增文章\u0026lt;/a\u0026gt; 6 \u0026lt;table class=\u0026#34;table border border-black\u0026#34;\u0026gt; 7 \u0026lt;td class=\u0026#34;border border-black\u0026#34;\u0026gt;標題\u0026lt;/td\u0026gt; 8 \u0026lt;td class=\u0026#34;border border-black\u0026#34;\u0026gt;內容\u0026lt;/td\u0026gt; 9 \u0026lt;td class=\u0026#34;border border-black\u0026#34;\u0026gt;動作\u0026lt;/td\u0026gt; 10 @foreach($articles as $article) 11 \u0026lt;tr class=\u0026#34;border border-black\u0026#34;\u0026gt; 12 \u0026lt;td class=\u0026#34;border border-black\u0026#34;\u0026gt;{{ $article-\u0026gt;title }}\u0026lt;/td\u0026gt; 13 \u0026lt;td class=\u0026#34;border border-black\u0026#34;\u0026gt;{{ $article-\u0026gt;content }}\u0026lt;/td\u0026gt; 14 \u0026lt;td class=\u0026#34;border border-black\u0026#34;\u0026gt; 15 \u0026lt;a href=\u0026#34;{{ route(\u0026#39;article.show\u0026#39;,$article-\u0026gt;id ) }}\u0026#34;\u0026gt;查看\u0026lt;/a\u0026gt; 16 \u0026lt;a href=\u0026#34;{{ route(\u0026#39;article.edit\u0026#39;,$article-\u0026gt;id ) }}\u0026#34;\u0026gt;編輯\u0026lt;/a\u0026gt; 17 \u0026lt;a href=\u0026#34;{{ route(\u0026#39;article.destroy\u0026#39;,$article-\u0026gt;id ) }}\u0026#34;\u0026gt;刪除\u0026lt;/a\u0026gt; 18 \u0026lt;/td\u0026gt; 19 \u0026lt;/tr\u0026gt; 20 @endforeach 21 \u0026lt;/table\u0026gt; 22@endsection 在我們利用php artisan server之後，使用http://127.0.0.1:8000/article 就會看到我們完成的列表頁囉，像是這樣 說明一下關於這個articles/index.blade.php:\n我們用到了blade語法： @foreach 和 ＠endforeach route()這個方法他可以填入route name，從而call出我們想要的網址，當我們在Route裡面使用到Route::resource('article', 'ArticleController');之時，他的名稱就會冠上一些RESTFulAPI的一些名稱，例如Article的create就是article.create，以此類推\u0026hellip;\u0026hellip;。而像是有些事需要參數的例如show 或edit等，可以在route()這個方法加入第二個參數，也就是正被foreach迭代的$article-\u0026gt;id，如此便能方便的呼叫到應該對上的網址。至於name的部份我們更可以使用php artisan route list作出查詢。 ArticleController@show() show()這個function 所對應到的就是RESTful Api的概念就是索取資源，以文章的意思來說就是我要看某一個文章。所以在show()裡面我們就要傳給他他所點選的文章還有單頁文章的頁面。如下\n1 public function show($id) 2 { 3 return view(\u0026#39;articles.show\u0026#39;)-\u0026gt;withArticle(Article::find($id)); 4 } 請注意是withArticle不是withArticles喔，有沒有加s傳過去給view讀到的參數很不一樣\n另外Laravel 很厲害的也支援Route Model binding，詳細的情節可以參考文件:https://laravel.com/docs/5.8/routing#route-model-binding\n所以show()可以再改得更藝術一點～\n1 public function show(Article $article) 2 { 3 // 把原本的$id改成Article $article ，他會把Route傳過來的id與Article Model做出mapping，可以視為Article::find($id) 4 return view(\u0026#39;articles.show\u0026#39;)-\u0026gt;withArticle($article); 5 } 想看這次完整的程式碼可以看此： https://github.com/r567tw/Make-PHP-Great-Again/commit/9fc8db207cb0af6ca5f7aa33012ed1735a484aed 這時候如果你到http://127.0.0.1:8000/article/1就會看到我們要的結果 由於Create、Edit、Update 和 Delete等方法有點小複雜，讓我們明天繼續討論吧！我們明天見\n","date":"Sep 26, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A83-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%AD/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"綜合應用(3) 使用 Laravel 做一個簡單的部落格：複習-中"},{"categories":["鐵人賽"],"content":"現在讓我們結合過去九天的學習，一起做個簡單的部落格，其中他就只是一個文章的增刪改查的部分。藉此案例來實作我們的小專案。\n建立環境 首先，讓我們使用指令建立一個全新的 Laravel 專案。讓我們以FirstLaravel為名，這個名稱你可以自訂，只要是字串都可以～\n1$ laravel new FirstLaravel 在這裏補充之前沒說過的 Artisan 指令 為了讓我們的環境可以統一，我們就使用 Laravel 附帶 serve 的指令來開發吧～\n1$ cd FirstLaravel #先讓我們移動到FirstLaravel這個資料夾底下 2$ php artisan serve 3Laravel development server started: \u0026lt;http://127.0.0.1:8000\u0026gt; 看到後面的網址了嗎？讓我們在瀏覽器打上http://127.0.0.1:8000 就會看到這個畫面，這樣我們就～～成功一半了呵呵～～ 資料庫、Factory 和 Seeder 接下來，讓我們開始寫程式吧！首先是參考我們第五天說到的 database:https://ithelp.ithome.com.tw/articles/10218302\n在 .env 填好你的資料庫連線資訊之後，應該就可以開始了，首先也是使用一下指令\n1$ php artisan make:migration create_article_table --create=articles 2Created Migration: 2019_09_24_150500_create_article_table 建立 Migration 接下來你就看到2019_09_24_150500_create_article_table.php 在 database/migrations 裡面出現，PS. 2019_09_24_150500是時間戳記，數字不一樣沒關係，但後面的 create_article_table 要一模模一樣樣啊～\n然後讓我們在up() 裡面寫一下程式：\n1 public function up() 2 { 3 Schema::create(\u0026#39;articles\u0026#39;, function (Blueprint $table) { 4 $table-\u0026gt;bigIncrements(\u0026#39;id\u0026#39;); 5 $table-\u0026gt;string(\u0026#39;title\u0026#39;); //新增一個叫做title的欄位，使用string型態 6 $table-\u0026gt;text(\u0026#39;content\u0026#39;); //新增一個叫做content的欄位，使用text型態 7 $table-\u0026gt;timestamps(); 8 }); 9 } 建立 Factory 為了在一開始有一些資料可以用，我們也順便把 Factory 和 seeder 也一起弄一弄好了～\n為了讓 Factory 來用，我們先建立個簡單的 Model 吧，這樣才有辦法讓 Factory 用\n1$ php artisan make:model Article 然後我們可以開始用 Factory 了，Check out~\n1$ php artisan make:factory ArticleFactory --model=Article 你就看到 database/factories 裡有一個ArticleFactory.php 檔案囉 讓我們寫一下 Factory 的資料吧！\n1\u0026lt;?php 2 3/** @var \\Illuminate\\Database\\Eloquent\\Factory $factory */ 4 5use App\\Article; 6use Faker\\Generator as Faker; 7 8$factory-\u0026gt;define(Article::class, function (Faker $faker) { 9 return [ 10 \u0026#39;title\u0026#39; =\u0026gt; $faker-\u0026gt;title(), 11 \u0026#39;content\u0026#39; =\u0026gt; $faker-\u0026gt;paragraph() 12 ]; 13}); 建立 Seeder Factory 只是指定資料如何建立，接下來我們還要建立 Seeder 才會建立資料庫\n1$ php artisan make:seeder ArticlesTableSeeder 這樣我們就會看到ArticlesTableSeeder.php出現在 database/seeds 資料夾裡面 之後在這個檔案裡面寫道factory('App\\Article', 10)-\u0026gt;create(); 就準備好了呢，10 這個數字你可以改別的數字～將ArticlesTableSeeder.php程式碼放在下面供參閱\n1\u0026lt;?php 2 3use Illuminate\\Database\\Seeder; 4 5class ArticlesTableSeeder extends Seeder 6{ 7 /** 8 * Run the database seeds. 9 * 10 * @return void 11 */ 12 public function run() 13 { 14 // 15 factory(\u0026#39;App\\Article\u0026#39;, 10)-\u0026gt;create(); 16 } 17} 別忘了DatabaseSeeder.php這個檔案 對了，別忘了告訴 DatabaseSeeder.php 裡面要呼叫 ArticlesTable 喔，如下範例\n1\u0026lt;?php 2 3use Illuminate\\Database\\Seeder; 4 5class DatabaseSeeder extends Seeder 6{ 7 /** 8 * Seed the application\u0026#39;s database. 9 * 10 * @return void 11 */ 12 public function run() 13 { 14 $this-\u0026gt;call(ArticlesTableSeeder::class); 15 } 16} 接下來讓我們跑指令\n1$ php artisan migrate --seed 你就看到你的資料庫有表和資料囉～ Routes 之後讓我們在 Route 裡面加入我們 CRUD 的部分，在 routes/web.php 請加入這一行\n1Route::resource(\u0026#39;article\u0026#39;, \u0026#39;ArticleController\u0026#39;); 其實可以一口氣把後面剩下的 Controller 和 View 寫完～ 但好想耍廢喔 所以就讓我們明後天在把這個小專案結束囉～ 我們明天見～\n本次文章完整程式碼可以參考至此：https://github.com/r567tw/Make-PHP-Great-Again/commit/8ae1735846c233fb9e6f793eb34293990a758c95\n","date":"Sep 24, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A82-%E4%BD%BF%E7%94%A8-laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%EF%BC%9A%E8%A4%87%E7%BF%92-%E4%B8%8A/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"綜合應用(2) 使用 Laravel 做一個簡單的部落格：複習-上"},{"categories":["鐵人賽"],"content":"前面幾天我們大概導覽了一下整個Laravel 的結構、以及分別M-model、V-view、C-Controller，並且也講到Database的部分還有Route，基本上我們可以算是學會Laravel 的一半了，剩下的就是真的是遇到需求再說，例如event、middleware 還是auth之類的，如果有需要在自行加入即可。\n所以在這裡我想要以一個簡單的Laravel 部落格的簡單應用，部落格不外乎就是新增文章、刪除文章、看文章以及修改文章，暫時我們先不用處理登入登出的問題，這個我覺得可以以後再談談\n在正式進入環境之前我們仍然要過一下概念的部分，在網頁的世界中，尤其是後端的角度來看，URL(網址)的組成分為兩個\ndomain name path或者檔名之類的詳細的說明可以參考維基百科：https://zh.wikipedia.org/wiki/统一资源定位符 其實網頁上我們的任何一個動作的對象都可以被視為一種資源以樓上維基百科的網址為例，https://zh.wikipedia.org是domain name，也就是網頁的家，而wiki/统一资源定位符就是一種資源，翻成白話來說就是當你打上這串網址，就是告訴瀏覽器我要找一個在https://zh.wikipedia.org 底下有一個叫做wiki的地方，裡面有一個统一资源定位符的資源，請把它拿給我\n瀏覽器也是一種軟體，當他拿到统一资源定位符這個資源的時候，發現他是一個HTML文檔，就使用他的css引擎、讀取HTML的工具以及運行JS的東西去讀取這個資源給你看\n所以這樣你有比較理解我所講的是什麼嗎？我們一切在網路上所做的就是資源，而對於資源來說最常做的就是CRUD，也就是\nC-創建新資源 R-讀取資源 U-更新資源 D-刪除資源 於是RESTful 的概念因應而生，他建議了URL的形式以及溝通方法、架構，分別就是Get、Post、Put/Patch以及Delete\n如果想更了解RESTFul API的話請到這裡來：https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2 話不多說，Laravel 也對RESTFul 有一定程度上的支援，首先，讓我們先使用一個指令\n1$ php artisan make:controller ArticleController --resource 請記得加--resource喔 然後你看到ArticleController 在Controller這個資料夾裡面，讓我們來看看它\n1\u0026lt;?php 2 3namespace App\\Http\\Controllers; 4 5use Illuminate\\Http\\Request; 6 7class ArticleController extends Controller 8{ 9 /** 10 * Display a listing of the resource. 11 * 12 * @return \\Illuminate\\Http\\Response 13 */ 14 public function index() 15 { 16 // 17 } 18 19 /** 20 * Show the form for creating a new resource. 21 * 22 * @return \\Illuminate\\Http\\Response 23 */ 24 public function create() 25 { 26 // 27 } 28 29 /** 30 * Store a newly created resource in storage. 31 * 32 * @param \\Illuminate\\Http\\Request $request 33 * @return \\Illuminate\\Http\\Response 34 */ 35 public function store(Request $request) 36 { 37 // 38 } 39 40 /** 41 * Display the specified resource. 42 * 43 * @param int $id 44 * @return \\Illuminate\\Http\\Response 45 */ 46 public function show($id) 47 { 48 // 49 } 50 51 /** 52 * Show the form for editing the specified resource. 53 * 54 * @param int $id 55 * @return \\Illuminate\\Http\\Response 56 */ 57 public function edit($id) 58 { 59 // 60 } 61 62 /** 63 * Update the specified resource in storage. 64 * 65 * @param \\Illuminate\\Http\\Request $request 66 * @param int $id 67 * @return \\Illuminate\\Http\\Response 68 */ 69 public function update(Request $request, $id) 70 { 71 // 72 } 73 74 /** 75 * Remove the specified resource from storage. 76 * 77 * @param int $id 78 * @return \\Illuminate\\Http\\Response 79 */ 80 public function destroy($id) 81 { 82 // 83 } 84} 前幾天我們有對Controller做了一段簡單的敘述，這裡我就不多說，你看到有很多的方法，其實他們分別就是對應好關於RESTFul API的模式\u0026hellip;\n動詞 路徑 行為(對應到Controller的方法) 路由名稱（可以放在route()的參數，之後會詳解） GET /article index article.index GET /article/create create article.create POST /article store article.store GET /article/{article} show article.show GET /article/{article}/edit edit article.edit PUT/PATCH /article/{article} update article.update DELETE /article/{article} destroy article.destroy 然後我們該怎麼用Route去對應這些function呢？難道要一行一行打嗎？類似這樣\n1Route::get(\u0026#39;articles\u0026#39;, \u0026#39;ArticleController@index\u0026#39;); 2//...(略) 3Route::delete(\u0026#39;article\u0026#39;,\u0026#39;ArticleController@destroy\u0026#39;) 其實你可以不用這麼累，Laravel都幫你想到了！\n接下來請看仔細了，一行解決：\n1Route::resource(\u0026#39;articles\u0026#39;, \u0026#39;ArticleController\u0026#39;); 打完收工，明天我還是會從網站一開始(Laravel new)開始約有2~3天從頭到尾簡單實作，敬請期待！\n如果你想要更深入研究的話可以參考這裡：\nhttps://laravel.tw/docs/5.2/controllers#restful-resource-controllers https://laravel.com/docs/6.x/eloquent-resources#generating-resources ","date":"Sep 24, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%B6%9C%E5%90%88%E6%87%89%E7%94%A81%EF%BC%9Alaravel-restful-api/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"綜合應用(1)：Laravel RESTFul API"},{"categories":["鐵人賽"],"content":"接下來讓我們介紹MVC裡的V，也就是Larvel理resources/views這個資料夾的部分。作為一個先進的框架，總不可能只是傳送文字這麼簡單，也需要有美美的網頁才可以撐得上一個合格的框架， 當然更不可以像Jquery 一樣用「組字串」的方式那麼辛苦的把html內容捕進來(懂Jquery的人應該懂我在說什麼)\n所以Laravel 自帶使用所謂的blade，可以讓你用很方便的模板模式撰寫你要呈現的內容，我們用Laravel 附帶預設的Welcome.blade.php作為簡單的解說\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;{{ str_replace(\u0026#39;_\u0026#39;, \u0026#39;-\u0026#39;, app()-\u0026gt;getLocale()) }}\u0026#34;\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 6 7 \u0026lt;title\u0026gt;Laravel\u0026lt;/title\u0026gt; 8 9 \u0026lt;!-- Fonts --\u0026gt; 10 \u0026lt;link href=\u0026#34;https://fonts.googleapis.com/css?family=Nunito:200,600\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; 11 12 \u0026lt;!-- Styles --\u0026gt; 13 \u0026lt;style\u0026gt; 14 html, body { 15 background-color: #fff; 16 color: #636b6f; 17 font-family: \u0026#39;Nunito\u0026#39;, sans-serif; 18 font-weight: 200; 19 height: 100vh; 20 margin: 0; 21 } 22 23 .full-height { 24 height: 100vh; 25 } 26 27 .flex-center { 28 align-items: center; 29 display: flex; 30 justify-content: center; 31 } 32 33 .position-ref { 34 position: relative; 35 } 36 37 .top-right { 38 position: absolute; 39 right: 10px; 40 top: 18px; 41 } 42 43 .content { 44 text-align: center; 45 } 46 47 .title { 48 font-size: 84px; 49 } 50 51 .links \u0026gt; a { 52 color: #636b6f; 53 padding: 0 25px; 54 font-size: 13px; 55 font-weight: 600; 56 letter-spacing: .1rem; 57 text-decoration: none; 58 text-transform: uppercase; 59 } 60 61 .m-b-md { 62 margin-bottom: 30px; 63 } 64 \u0026lt;/style\u0026gt; 65 \u0026lt;/head\u0026gt; 66 \u0026lt;body\u0026gt; 67 \u0026lt;div class=\u0026#34;flex-center position-ref full-height\u0026#34;\u0026gt; 68 @if (Route::has(\u0026#39;login\u0026#39;)) 69 \u0026lt;div class=\u0026#34;top-right links\u0026#34;\u0026gt; 70 @auth 71 \u0026lt;a href=\u0026#34;{{ url(\u0026#39;/home\u0026#39;) }}\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; 72 @else 73 \u0026lt;a href=\u0026#34;{{ route(\u0026#39;login\u0026#39;) }}\u0026#34;\u0026gt;Login\u0026lt;/a\u0026gt; 74 75 @if (Route::has(\u0026#39;register\u0026#39;)) 76 \u0026lt;a href=\u0026#34;{{ route(\u0026#39;register\u0026#39;) }}\u0026#34;\u0026gt;Register\u0026lt;/a\u0026gt; 77 @endif 78 @endauth 79 \u0026lt;/div\u0026gt; 80 @endif 81 82 \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; 83 \u0026lt;div class=\u0026#34;title m-b-md\u0026#34;\u0026gt; 84 Laravel 85 \u0026lt;/div\u0026gt; 86 87 \u0026lt;div class=\u0026#34;links\u0026#34;\u0026gt; 88 \u0026lt;a href=\u0026#34;https://laravel.com/docs\u0026#34;\u0026gt;Docs\u0026lt;/a\u0026gt; 89 \u0026lt;a href=\u0026#34;https://laracasts.com\u0026#34;\u0026gt;Laracasts\u0026lt;/a\u0026gt; 90 \u0026lt;a href=\u0026#34;https://laravel-news.com\u0026#34;\u0026gt;News\u0026lt;/a\u0026gt; 91 \u0026lt;a href=\u0026#34;https://blog.laravel.com\u0026#34;\u0026gt;Blog\u0026lt;/a\u0026gt; 92 \u0026lt;a href=\u0026#34;https://nova.laravel.com\u0026#34;\u0026gt;Nova\u0026lt;/a\u0026gt; 93 \u0026lt;a href=\u0026#34;https://forge.laravel.com\u0026#34;\u0026gt;Forge\u0026lt;/a\u0026gt; 94 \u0026lt;a href=\u0026#34;https://vapor.laravel.com\u0026#34;\u0026gt;Vapor\u0026lt;/a\u0026gt; 95 \u0026lt;a href=\u0026#34;https://github.com/laravel/laravel\u0026#34;\u0026gt;GitHub\u0026lt;/a\u0026gt; 96 \u0026lt;/div\u0026gt; 97 \u0026lt;/div\u0026gt; 98 \u0026lt;/div\u0026gt; 99 \u0026lt;/body\u0026gt; 100\u0026lt;/html\u0026gt; 你感覺到了嗎？ 其實就像我們在寫HTML一樣。\n而Laravel使用Blade 更厲害的地方是說我們可以將頁面組成像現代前端使用Component(元件)的效果一樣。例如我們使用\n1@extends(\u0026#39;layouts.master\u0026#39;) 這個extends 就會找Laravel resources/Views資料夾裡面的Layouts子資料夾裡面的master.blade.php。\n注：其實我們在使用View()這個函式以及內部blade再引用其他的模板時，我們檔案名稱是需要使用.blade.php，但我們使用上不用加.blade.php，而且我們如果有子資料夾也不需要子資料夾/檔案名稱，就用.作為代替就好\n在master.blade.php我們更可以把內容做「挖空」，請使用\n1@yield(\u0026#39;content\u0026#39;) 之後在其他檔案就可以這樣使用，讓我們以結合前面使用layouts.master作為例子\n在layouts/master.blade.php當中 1\u0026lt;html\u0026gt; 2 \u0026lt;head\u0026gt; 3 \u0026lt;title\u0026gt;@yield(\u0026#39;title\u0026#39;)\u0026lt;/title\u0026gt; 4 \u0026lt;/head\u0026gt; 5 \u0026lt;body\u0026gt; 6 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 7 @yield(\u0026#39;content\u0026#39;) 8 \u0026lt;/div\u0026gt; 9 \u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; 在別的檔案當中，以page.blade.php為例子 1@extends(\u0026#39;layouts.master\u0026#39;) 2 3@section(\u0026#39;title\u0026#39;, \u0026#39;頁面標題\u0026#39;) 4 5@section(\u0026#39;content\u0026#39;) 6 \u0026lt;p\u0026gt;這是我的主要內容。\u0026lt;/p\u0026gt; 7@endsection 這樣是不是page上會比較簡潔乾淨多了呢？\n另外，Blade也允許我們使用運算式、條件式等，舉例來說\n@if、@elseif、@else、@endif:就是關於條件的部分 @for、@endfor、@foreach、@endforeach、@while、@endwhile：就是有關於迴圈的部分 最後再附上如果要在blade加入參數怎麼辦，使用{{}}就好拉，例如\n1{{ $name }} 其實還有很多不同的使用，這裏我附上參考資料，可以自行參考使用囉\nhttps://laravel.com/docs/5.8/blade https://laravel.tw/docs/5.2/blade 之後我們要開始一系列簡單的實作，如果覺得目前的概念簡介很模糊不清的話沒有關係，讓我們藉由實作當中直接面對面，學習怎麼將前面的東西一起用，希望到時可以讓你們更加清楚～～(這樣你大概就能算會使用Laravel的一半了呢)\n","date":"Sep 23, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-view/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel View"},{"categories":["鐵人賽"],"content":"接下來讓我們分享在 MVC 裡面的 Controller，不像 Laravel 沒有一個專門的 Model 資料夾，Controller 在 Laravel App 資料夾裡面有一個 app/Http 的子資料夾，在 Http 底下有個 Controllers 的資料夾 在 Controllers 這個資料夾裡面，就有各式各樣 Controller.php 的檔案。\n接下來，讓我們從新建一個 Controller 開始，首先讓我們使用指令\n1$ php artisan make:controller ArticleController 之後你會看到在 Http 資料夾底下會有一個 ArticleController 這個檔案, Laravel 為我們簡單寫了一段 1\u0026lt;?php 2 3namespace App\\Http\\Controllers; 4 5use Illuminate\\Http\\Request; 6 7class ArticleController extends Controller 8{ 9 // 10} 其實就是這麼簡單，他就只是繼承了 Controller 這個類別，而 Controller 這個類別在哪裡呢？他就是在 App\\Http\\Controllers 資料夾底下的 Controller.php 這個檔案，讓我們繼續接著看看裡面寫了什麼東西：\n1\u0026lt;?php 2 3namespace App\\Http\\Controllers; 4 5use Illuminate\\Foundation\\Bus\\DispatchesJobs; 6use Illuminate\\Routing\\Controller as BaseController; 7use Illuminate\\Foundation\\Validation\\ValidatesRequests; 8use Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests; 9 10class Controller extends BaseController 11{ 12 use AuthorizesRequests, DispatchesJobs, ValidatesRequests; 13} 在 BaseController 這個檔案裡，Illuminate就是 Laravel 的 namespace ，然後裡面用到了幾個簡單的 trait: AuthorizesRequests、DispatchesJobs和 ValidatesRequests，就這樣構成了我們 Controller 這個檔案。\n現在讓我們藉由 Route 來試玩一下 Controller 吧，首先到 routes/web.php 讓我們新增一行\n1Route::get(\u0026#39;articles\u0026#39;, \u0026#39;ArticleController@first\u0026#39;); 在之前 Route 那一篇說到 Route 的後面可以接 function\u0026hellip;\u0026hellip; 但是我們也可以接 Controller 然後使用@加上 function 名稱。而這樣就符合了一個 MVC 的標準流程，Controller 控制這整個應用程式的流程，並且分開了 Model 封裝商業與資料庫的邏輯以及 View 呈現的前端頁面。\n不好意思在這裡囉唆了一下，因為是想要講解一些概念。 總而言之既然我們宣告articles這個 url 會接到 articleController 裡有一個first的函式，那我們就真的要給他first這個 function 啦\n所以如底下範例，請在 ArticleController.php 裡面新增底下這一段\n1 public function first() 2 { 3 return \u0026#39;Hi 我們的第一個Controller\u0026#39;; 4 } 接下來在你的 laravel 環境底下接/articles 這個 url 之後，我們就看到結果如下圖囉！ 撒花～\n","date":"Sep 22, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-controller/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Controller"},{"categories":["鐵人賽"],"content":"前面我們已經把資料庫都已經準備好了，接下來我們要進入 MVC 之中的 M 了，就是與業務邏輯、資料庫溝通有關係的那一層，在這裏，我們以 Article 為例 (文章)\n讓我們用 artisan 來製作我們的 model 吧，使用指令\n1php artisan make:model Article 接下來你就會看到在 App 這個資料夾出現了Article.php，讓我們打開他看看 Laravel 為了我們寫了什麼，讓我們按 code 說故事\n1\u0026lt;?php 2 3namespace App; 4 5use Illuminate\\Database\\Eloquent\\Model; 6 7class Article extends Model 8{ 9 // 10} 對，其實就是這麼簡單，他只是繼承了 Eloquent\\Model 這個 Class，你可不要小看這個 Eloquent\\Model，他算是 Laravel 裡的 ORM，他其實裡面很多功能很多東西呢！\n註：ORM 就是指說我們可以使用物件導向的方法去與資料庫溝通，詳情可以看到最後\n讓我們看看文件： https://laravel.com/docs/5.8/eloquent 中文也可以通喔：https://laravel.tw/docs/5.3/eloquent 其實你可以看到，他在裡面可以使用類似這樣\n1protected $table = \u0026#39;\u0026lt;任何你想要宣告的table名稱\u0026gt;\u0026#39;; 假設 Article 這個 model 所要對應到的資料表不是 Articles，那麼你就可以使用這個屬性，將 Model 與 table 作出對應。不過你要知道框架之所以為框架，他就是可以有些「約定成俗」的事情所以如果你的資料表像前面所說的是 articles，那麼根本不用管這個$table 啦～\n如果你看文件大部分都告訴你了除了可以自訂$table 以外也可以自訂：\n$primaryKey $incrementing $keyType $timestamps 除了這些自訂屬性以外，你更可以優雅的索取你所要的資料呢，如文件所下\n1$flights = App\\Flight::where(\u0026#39;active\u0026#39;, 1) 2 -\u0026gt;orderBy(\u0026#39;name\u0026#39;, \u0026#39;desc\u0026#39;) 3 -\u0026gt;take(10) 4 -\u0026gt;get(); 按著 code 說故事就是說:搜尋Flight裡active為1的，按照名稱遞減，只取前面十個\nEloquent 本身有簡單的 CRUD 方法:\nall() create() find() update() delete() 夠優雅吧！我告訴你，礙於篇幅關係我在這裡不會多講，但在以後會專門找一章把這些東西整理一次給你～他也可以宣告 relationship、可以處理 attributes、可以允許別人大量的輸入資料等等附帶功能\n敬請期待未來我們 Make php great again 吧\n","date":"Sep 21, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-model/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Model"},{"categories":["鐵人賽"],"content":"俗話說：「兵馬未動，糧草先行」，接下來讓我們講講 Laravel 關於 database 的部分。目前 Laravel 接受底下類型\nMySQL PostgreSQL SQLite SQL Server 之後我們將以「Mysql」作為範例。首先，我們必須確保 資料庫 與 php 有所連結。讓我們打開 .env 這個檔案來看其中有一段關於 database 的敘述\n1DB_CONNECTION=mysql 2DB_HOST=127.0.0.1 3DB_PORT=3306 4DB_DATABASE=laravel 5DB_USERNAME=homestead 6DB_PASSWORD=homestead 我們以 Mysql 為範例，DB_Connection 保持不變。然後 DB_HOST 和 DB_PORT 填入你要連線的資訊，之後填入連線的資料庫 DB_DATABASE ，還有連線的 USERNAME 和 PASSWORD\n確保這些連線資訊正確之後開始我們準備 Database 裡面的資料啦，讓我們來看看 database 這個資料夾，裡面很簡單也只有三個資料夾\nfactories：他控制整個資料被填充的過程，例如：user 資料應該如何被產生？之後我們在 seeds 可以使用 factory()這個方法 migrations ：Laravel 很特別的地方就是讓我們資料庫有點感覺是版本控制 seeds: 裡面放置產生假資料的檔案，等等我們會用例子說明 factories 讓我們看看 Laravel 給我們預設的檔案，UserFactory.php 這個檔案，他裡面其實很簡單，程式碼如下：\n1$factory-\u0026gt;define(User::class, function (Faker $faker) { 2 return [ 3 \u0026#39;name\u0026#39; =\u0026gt; $faker-\u0026gt;name, 4 \u0026#39;email\u0026#39; =\u0026gt; $faker-\u0026gt;unique()-\u0026gt;safeEmail, 5 \u0026#39;email_verified_at\u0026#39; =\u0026gt; now(), 6 \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi\u0026#39;, // password 7 \u0026#39;remember_token\u0026#39; =\u0026gt; Str::random(10), 8 ]; 9}); 這段程式碼其實就展示如果要製作 User 這筆資料應該需要填入怎麼樣的過程，其中$faker 這個東西很好用，他可以很簡單地幫我們回傳一些「類似真實世界」的假資料，faker 的使用可以參考這裡:https://github.com/fzaninotto/Faker 因此當我們 User factory 建立好(其實也不是我們建立的是 laravel 給我們的)，我們就可以在 seed 資料夾裡面的檔案就可以這樣使用啦\n1factory(App\\User::class)-\u0026gt;create(); //這裡只會產生一筆 2factory(App\\User::class,10)-\u0026gt;create(); //這裏會一次產生10筆 接下來我們可以使用指令製作屬於自己的 factory，請使用\n1php artisan make:factory ArticleFactory -model=Article 之後你就在 return 裡面使用$facker 規劃資料的建置過程囉\nMigration migration 資料夾裡面就是我們正式在資料庫的那些資料表結構啦～ 初次踫到 Laravel 的時候真的覺得這個部分真的很好用，也讓常常與後端溝通的 database 不用兼任 DBA，然後苦寫 SQL(DML)那邊，可以用非常 artisan、優雅的方式宣告資料庫裡面該裝哪些資料表或架構。\n我們看到 Laravel 也很貼心的給我們一些檔案，我以2014_10_12_000000_create_users_table.php作為範例解說，其餘的檔案可以以此類推了解。\n我們很清楚的看到檔案繼承了Migration這個 class\n1class CreateUsersTable extends Migration 而檔案很簡單也只有 up()和 down()兩個 function。一個是在我們執行php artisan migrate會用到：up()另一個則是在我們執行php artisan migrate:rollback會用到：down()\nPS.當我們把 migration 和 seeder 裡面的資料寫完之後就可以執行一些命令把我們寫到的結構寫入資料庫當中，所以等等我會稍微說明 php artisan migrate 等等指令的效果\n好啦，廢話不多說 up()裡面寫道：\n1Schema::create(\u0026#39;users\u0026#39;, function (Blueprint $table) { 2 $table-\u0026gt;bigIncrements(\u0026#39;id\u0026#39;); 3 $table-\u0026gt;string(\u0026#39;name\u0026#39;); 4 $table-\u0026gt;string(\u0026#39;email\u0026#39;)-\u0026gt;unique(); 5 $table-\u0026gt;timestamp(\u0026#39;email_verified_at\u0026#39;)-\u0026gt;nullable(); 6 $table-\u0026gt;string(\u0026#39;password\u0026#39;); 7 $table-\u0026gt;rememberToken(); 8 $table-\u0026gt;timestamps(); 9}); 其實這段程式碼就很清楚的表示結構是什麼，首先是建立一個users表，然後裡面有一個 autoIncremest 結構的 id \\字串結構的 name 欄位\u0026hellip;.等等等不繼續贅述了，至於你要參考的話可以參考看看這個文件：https://laravel.com/docs/6.x/migrations#columns 我們可以使用一個指令建立新的 migration 檔案\n1$ php artisan make:migration \u0026lt;file name\u0026gt; --create=\u0026lt;table name\u0026gt; 2//我以我們要建立\u0026#34;articles\u0026#34;這個表為例，我們指令就這樣寫 3$ php artisan make:migration create_article_talbe --create=articles 然後咧，你就看到某個時間字串接_create_article_table.php 的檔案出現在 migrations 這個資料夾當中，然後很棒的是，他也給了我們 up()和 down()的方法，你可以參考一下剛剛給的文件 ，在 up()裡面宣告你要給的資料表結構。\n讓我們使用php artisan migrate，你就會看到你的資料庫有一些 table 了喔～如圖\nPS: 如果你發現資料表結構需要修改，但因為某些原因（例如已經半上線了），你不能直接重設 migration 的話，你可以使用php artisan make:migration modify_article_table --table=articles，然後你就可以繼續修改囉～～～\nseeds Laravel 預設給我們只有一個檔案:DatabaseSeeder.php其實這個檔案是 seeder 的總管，他會呼叫要把哪些資料填充(seed)，看到他註解的那一行，其實我們可以把它取消註解，變成\n1$this-\u0026gt;call(UsersTableSeeder::class); 好！ 讓我們填充 User 的資料表吧！使用這個指令\n1$ php artisan make:seeder \u0026lt;file\u0026gt; 2//以UsersTableSeeder為例，如下 3$ php artisan make:seeder UsersTableSeeder 然後我們就在 seeds 資料夾底下看到UsersTableSeeder.php囉其實裡面只有一個 function : run\n裡面你可以寫 native sql 或者 orm 或者前面我說到的 factory 都可以，反正他就是要拿來填充資料的。\n但記得 Laravel 是 Artisan 的框架，所以我們當然要把我們前面用到的 factory 來用一用囉\n在 run()裡面寫道\n1factory(\u0026#39;App\\User\u0026#39;, 10)-\u0026gt;create(); 然後你就會看到 users 表裡面有 10 筆假資料囉(如圖)，簡單吧 Artisan 相關指令 之後我們會常常使用到 command line 來產生檔案，這也是 laravel 讓人覺得很方便的地方，可以幫我們把一些檔案製造出來讓我們可以自由發揮，因此之後我會全部整理在這裡讓大家參考，如果之後有遺漏的可以在底下留言或者以後我也會自行補充修改：\n關於 migration 得指令整理如下，如果有遺漏我會在補充\nphp artisan make:seeder //產生seeder檔案 php artisan make:factory //產生factory 檔案 php artisan make:migration //產生migration 檔案 php artisan migrate //將這次的migration讀入資料庫建立架構 php artisan migrate:rollback //推回上一次的migration php artisan migrate:reset //推回全數的migration php artisan migrate:refresh //推回所有遷移並且再執行一次 php artisan migrate \u0026ndash;seed //將這次的migration讀入資料庫建立架構並且也跑seeder php artisan migrate:refresh \u0026ndash;seed //推回所有遷移並且再執行一次以及seeder php artisan db:seed //單純跑資料的seeder 填充資料 程式碼的部分你可以參考這裏：https://github.com/r567tw/Make-PHP-Great-Again/commit/6801bd151006bbc1cb1ae5d5165832daf640bff4 ","date":"Sep 20, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-database-migration-and-seeder/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Database: Migration and Seeder"},{"categories":["鐵人賽"],"content":"前一天我們稍微簡介一下資料夾的結構，談到 routes 這個資料夾放置所有和路由相關的檔案。打開 routes 資料夾，我們看到四個檔案\napi.php :在做前後端分離專案的時候，我們會用到這個檔案 channels.php：和 Broadcast 有關係，這是 laravel 的功能，我自己也很少用過。期待未來在寫這個系列的時候一起來學習。 console.php：和指令有關係，我們會常常打 php artisan xxx ，這個檔案就是和這個部分有關係。 web.php：就是我們在瀏覽器打上的 url，後面那個 domain name 之後接下的字串，在這個檔案我們可以定義哪些字串要導向到哪個流程與檔案之類的 web.php 讓我們可以先玩一下 web.php看到 laravel 為我們預設了一段\n1Route::get(\u0026#39;/\u0026#39;, function () { 2 return view(\u0026#39;welcome\u0026#39;); 3}); 讓我們按照 code 說一下故事：就是有一個 Route 的類別，他可以有一個 Get 的方法，/的意思就是不加任何東西，而 function 這一段就是指示當我們到/的時候應該要怎麼做，這個預設範例就是說我們可以return view('welcome') view()這個方法指向 resource 底下的 views 資料夾底下，傳入的字串是前綴詞，因此，他會把 welcome.blade.php 這個檔案傳給瀏覽器讀取。就是我們看到的那樣囉\n所以，我們可以如法炮製在 web.php 寫一個\n1Route::get(\u0026#39;hello\u0026#39;, function () { 2 return \u0026#39;Hello World\u0026#39; 3}); 然後在你的網址後面加入個/hello，就會看到 Hello World 的字串囉\n或許你會問到，我希望傳一些資料給 Laravel 可不可以，當然啦 當然可以囉，就像底下這樣寫\n1Route::get(\u0026#39;/hello/{name}\u0026#39;, function ($name) { 2 return \u0026#39;Hello \u0026#39; . $name; 3}); 神奇吧，在你的{}裡面填入你的名稱，記得後面的 function 也要帶上參數，你就可以帶資料進去了喔！\n關於 Route 的部分你可以更多深入參考文件https://laravel.com/docs/6.x/routing#route-parameters 之後我會講到 RESTFul API 的部分，到那個時候我會在更多的說明有關於這個部分\u0026hellip;..\napi.php api.php 你發現預設的也是 Route 嗎？\n1Route::middleware(\u0026#39;auth:api\u0026#39;)-\u0026gt;get(\u0026#39;/user\u0026#39;, function (Request $request) { 2 return $request-\u0026gt;user(); 3}); middleware 就是一種過濾、防火牆的概念，這個我們之後會再說明，在這裡你可以不用太多著墨，如同剛剛我們可以如法炮製寫一個小範例，如下\n1Route::get(\u0026#39;/hello\u0026#39;, function ($name) { 2 return \u0026#39;Hello World\u0026#39;; 3} api.php 的方式很簡單，就是在指定的字串前面多加一個 api 就好，如範例就會像是這樣的 url : {domain}/api/hello就會像第一個舉例回傳 hello world 的字樣囉\nconsole.php 我們看到 Laravel 幫我們寫道的預設是\n1Artisan::command(\u0026#39;inspire\u0026#39;, function () { 2 $this-\u0026gt;comment(Inspiring::quote()); 3})-\u0026gt;describe(\u0026#39;Display an inspiring quote\u0026#39;); 那麼讓我們在終端機並且移到這個資料夾目錄下使用\n1$ php artisan inspire 你就看到一句令人激勵的名言，有沒有覺得備感激勵呢？！\n然後你可以在下一個指令，在我們剛剛的指令加入 -help\n1$ php artisan inspire -help 有沒有發現後面 describe 裡面的字串出現在 description 裡面了呢～好了別光說不練，讓我們也像之前一樣如法炮製一番加入這段\n1Artisan::command(\u0026#39;helloworld\u0026#39;, function () { 2 $this-\u0026gt;comment(\u0026#39;Hello World\u0026#39;); 3})-\u0026gt;describe(\u0026#39;Display Hello World\u0026#39;); 然後存檔後執行\n1$ php artisan helloworld 然後你就看到Hello World的字樣囉，關於 command 的部分我們之後會再更多的說明囉～\nchannels.php 這個和 Broadcast 有關係，這個以後我們和 Broadcast 之後再一起討論吧，絕對不是說我沒寫過所以沒把握來寫哈哈\nArtisan 相關指令 之後我們會常常使用到 command line 來產生檔案，這也是 laravel 讓人覺得很方便的地方，可以幫我們把一些檔案製造出來讓我們可以自由發揮，因此之後我會全部整理在這裡讓大家參考，如果之後有遺漏的可以在底下留言或者以後我也會自行補充修改：\n關於 route 的指令如下，如果有遺漏我會在補充\nphp artisan route:list //列出目前所有的路由url~\n程式碼的部分你可以參考這裏：https://github.com/r567tw/Make-PHP-Great-Again/commit/83e076b690e938d549c29851bd37f8be9423fe3e ","date":"Sep 19, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-route%E8%B7%AF%E7%94%B1/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel Route(路由)"},{"categories":["鐵人賽"],"content":"其實 Laravel 作為 php 的框架，其實本質還是 php。當我們在第一天準備環境的時候，我們建立了一個 blog 的資料夾。裡面資料夾分別如下：\napp/ ：我們主要工作的資料夾之一 bootstrap/ ：Laravel 相關啟動的資料夾，基本上我們不會動這裡 config/ ：如果你有什麼固定的需要設定的，可以寫在這裡，有需要的話才會需要在這裡工作 database/ ：關於建立 table、建立假資料的都在這裡 public/ ：進入點，以及前端編譯後的資料都會放在這裡 resource/：blade、以及編譯前的 js 會放在這裡 routes/ ：定義路由的地方，主要工作的資料夾之一 storage/ ：檔案存放、log 的地方 test/ ：顧名思義就是測試的地方 vendor/ ：composer 的資料夾，地位有點像是 npm 的 node_modules/ ，基本上這裡連動都可以不用動 `其他檔案：.env、.env.example、artisan 等等等 你看到很多個資料夾不用太緊張，就如同我上面說明的一樣，你主要會工作的資料夾就那幾個，其他能不動就不動，真的有需要才會進去裡面。\n而在第一段的時候我們也說到 Laravel 的本質就是 php，所以其實我們可以試著打開進入點 public/index.php 來看看，你會發現大部分都是註解，真正重要的 code 只有幾行以下我就直接略過註解直接貼 code 給你們看\n1\u0026lt;?php 2define(\u0026#39;LARAVEL_START\u0026#39;, microtime(true)); 3require __DIR__.\u0026#39;/../vendor/autoload.php\u0026#39;; 4$app = require_once __DIR__.\u0026#39;/../bootstrap/app.php\u0026#39;; 5$kernel = $app-\u0026gt;make(Illuminate\\Contracts\\Http\\Kernel::class); 6$response = $kernel-\u0026gt;handle( 7 $request = Illuminate\\Http\\Request::capture() 8); 9$response-\u0026gt;send(); 10$kernel-\u0026gt;terminate($request, $response); 接下來請讓我看 code 說故事一樣\n定義了一個 Laravel_START 的常數 把 composer 的檔案引入進來 剛剛說到了，bootstrap 是 Laravel 很重要的啟動檔案，所以他把它引入並且賦予給$app 啟用了這個$app make的方法把http\\kernel這個class實例出來，賦予給$kernel $kernel handle 賦予的$request ，並交給 response $response-\u0026gt;send() $kernel terminate 這個 request 和 response\u0026hellip; 我果真很會看 code 說故事呢，自己都自己看不是很懂如果不懂也沒關係，但你跟著我這樣看程式碼就大概知道一下 laravel 的啟動到底是怎麼一回事。\n其實官方文件也有關於他週期的相關說明，礙於篇幅關係我也沒辦法寫得太多，只能這樣簡單帶過\u0026hellip;總之 Laravel 在被啟動的時候其實做了很多事情，分別就是走上面的流程，而在 bootstrap 和 kernal 裡面也定義了許多東西與方法，我這裡先點出一個 middleware，這在我們之後會更加詳細說明\n如果你希望更深入了解的話可以參考以下文章：\n英文文件：https://laravel.com/docs/6.x/lifecycle 你也可以看中文文件： https://laravel.tw/docs/5.2/lifecycle https://learnku.com/articles/10642/laravel-request-life-cycle 或者去年的鐵人賽也有一組主題在講 laravel 的原始碼，我自己是有訂閱的（不過我還沒看完）Laravel 原始碼分析: https://ithelp.ithome.com.tw/users/20102562/ironman/1684 另外最近看一篇文章對於Laravel的核心也講得很清楚：https://www.itread01.com/content/1549735233.html ","date":"Sep 18, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-%E5%B0%8E%E8%A6%BD%E8%88%87%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"Laravel 導覽與生命週期"},{"categories":["鐵人賽"],"content":"Laravel 在 wiki 裡面寫道他是一種 MVC framework關於 MVC，他有點複雜，我很怕自己會有所說錯，簡而言之，他是許多設計模式的結合是一種架構現代 Web application 的架構模式與概念。\nMVC 分別對應Ｍ odel、View 和 Controller。我們總是會希望我們在架構組織我們的程式碼是易讀、是好維護、是有意義的。有別於 PHP 常被人所詬病的 spaghetti 義大利麵式的程式碼，作為 MVC 的 Web framework:Laravel 無疑是解決了這個問題\n註：義大利麵式的程式碼就是將所有資料庫連結、業務邏輯、頁面渲染全部都混做堆\u0026hellip;.隨著業務成長與一天天過去、換手的人越來越多，就會難以維護、難以組織與更新\n當然 MVC 這個概念比 Laravel 的誕生還要早很多年，PHP 界也不只是只有 Laravel 這個框架獨有 MVC ，如果你搜尋 php mvc 的 web 框架還會有很多選項：例如 Symfony、Zend Framework 等等許多框架，你可以參考這個維基百科：https://zh.wikipedia.org/wiki/PHP%E6%A1%86%E6%9E%B6%E5%88%97%E8%A1%A8 作為 phper，如果有機會也學學其他框架也是一件好事的，（我是這麼期許自己的），不過我們此主題談的是 Laravel，所以當然是會繼續談 Laravel，而 Laravel 為什麼可以在 php 眾多框架中脫穎而出，其實就是如他官網所說的：「The PHP Framework for Web Artisans」，他的程式碼如果是高手的話真的可以寫得很「藝術」，我自己不是高手，但也在這個過程當中努力的成長成「Artisan」\nPS. 請記得Artisan這個關鍵字，之後在 Laravel 會很常用到。\n回到講解 MVC：\nModel 負責關於 database 溝通或者封裝相關業務邏輯 View 負責一切你所看到的東西，也就是網頁的畫面 Controller 負責協調 Model 和 view 之間的溝通，控制流程、用戶的行為與 Model 之間的改變 真的很怕自己會寫錯，或者有什麼內容上面不太理解，所以我也附上其他相關的資料，如果我有錯誤的話也請麻煩留言告知\n以下是我覺得解釋 MVC 更多的相關參考資源\n維基百科：https://zh.wikipedia.org/wiki/MVC MVC 是一個巨大誤會: http://blog.turn.tw/?p=1539 1但就像文章作者講的：「MVC有分很多種喔！網路上全部沒寫清楚，你一定看不懂。 2沒關係，你只要知道View可以抽出來就好。 3C跟M先別管，你先隨便瞎搞吧。」 跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR：https://medium.com/@hulitw/introduction-mvc-spa-and-ssr-545c941669e9 ","date":"Sep 16, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E4%BE%86%E8%AB%87%E4%BB%80%E9%BA%BC%E6%98%AF-mvc/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"來談什麼是 MVC"},{"categories":["鐵人賽"],"content":"參賽前言 說真的，這裡真的不知道該寫些什麼，我也不知道我能不能像上次一樣寫滿 30 天，總之這次努力看看。\n選擇一個自己最為擅長的語言：PHP，一個被所有工程師鄙視的語言哼，Laravel 的來到，無非是為這個已經被酸民酸到不行的語言注入一股強大的力量。\n看遍一些 Laravel 的書籍之後，我覺得那些書籍都寫得過於簡單，舉例來說，很多書籍都沒有講到 Laravel 附帶的 phpunit 測試、還有 Laravel 與 websocket或者他可以與哪些 package 搭配會更加強大？或者 API、Redis、middleware、notification 怎麼用之類的。\n希望我這個教學會是 Laravel 最詳盡的教學，也期許自己能把它寫完，順便探索與整理我的 Laravel 技能。PS. 原本我是想寫一些存檔在加入的，殊不知想著想著都已經 9/16 啦，完蛋啦，變成「時間驅動寫作」了哈哈哈\n讀前基礎 希望你有些 php 和網頁的基礎，至少知道 php 的物件導向是該怎麼寫怎麼運作的。雖然我會盡量寫的平易近人一點，但有些過於基本的難免會直接簡單帶過去，不過如果你有任何問題，歡迎在底下留言詢問，我會竭盡所能地回答啦\n環境預備 首先我們先來到官網，不得不說，英文對技術人真的有點重要（雖然作者我的英文還是很破），但有 google 翻譯以及一些英文的 sense 還是看得懂 Laravel 的文件啦，不得不說 Laravel 是我史上看過最棒的文件了～https://laravel.com/docs/6.x/installation 首先在安裝的部分他有說到了你要安裝一下 composer，假設你安裝好了 composer 之後你使用composer --version 這個指令就會看到有版本號\n1$ composer --version 2Composer version 1.6.3 因為篇幅的關係，如果你發現下指令之後的結果沒有像上述一樣請自行 stackoverflow 或者 google 一下，也可以在底下留言啦，但要附上一些操作步驟和資訊，我還沒有練就通靈的能力喔哈哈哈\n然後請用 composer 安裝一下 laravel 方便的安裝套件，使用底下的指令（我想文件已經告訴你們了）\n1composer global require laravel/installer 然後之後用\n1laravel new blog 如果之後你發現 Laravel 不是你可以使用的指令，那就請你把它加入你可以用的環境變數Mac 請服用：https://stackoverflow.com/questions/26376516/laravel-php-command-not-found Windows 請服用：https://stackoverflow.com/questions/34311668/laravel-command-not-found-while-using-laravel-command 然後呢！ 然後他就死掉了，我們就有一個blog資料夾了喔～\n或者如果你不想安裝這個東西也沒關係，只是以後你創建會比較麻煩一點，要打底下落落長的指令\n1composer create-project --prefer-dist laravel/laravel blog 忘了說，你的環境可以先安裝好 apache/nginx 還有 mysql，你可以使用 LARAVEL 台灣社群做的wagon，也可以用 XAMPP 或者 Mamp 這種懶人包，也可以用 docker 或者 laravel 的 homestead (使用 homestead 可以參考：https://laravel.com/docs/6.x/homestead )，如果功力強大的，可以直接裝 apache/nginx、mysql/mariadb 直接做一個環境起來\nPS. Docker 的部分你可以參考https://laradock.io/ PS. 使用 docker 也可以參考中文網站在這裡：https://medium.com/@yfancc20/laradock-%E8%BC%95%E9%87%8F-laravel-%E7%92%B0%E5%A2%83%E7%9A%84%E5%98%97%E8%A9%A6-%E5%B8%B8%E8%A6%8B%E9%8C%AF%E8%AA%A4-2fc6f0c21433 我是不資深不專業果迷，最近有點想買 iphone 11，所以我是使用 mac 專用的 valet 在本機啟動的我 laravel 專案開發啦。\n然後你至於開發你要使用 VS-Code 還是 subl 還是 atom 都可以啦，你也可以使用 vim 或記事本或者 notepad+ 開發也無所謂，這裡我就不歸票了，但我支持使用 vs-code 啦\n總之你把目錄指向 laravel 的 public 資料夾底下的 index.php看到這畫面，就 ok 囉！\n接下來，讓我們一起深入 laravel 的世界，讓 php 在此偉大吧！（如果你是使用 valet 或 homestead 或 docker 的方式你可以不用管這個指向 public 的 index.php 的步驟喔\u0026hellip;\u0026hellip;）\n對了，之後相關程式碼我會放在 github repo 這裏，如果有興趣可以 clone 下來玩一玩～https://github.com/r567tw/Make-PHP-Great-Again ","date":"Sep 16, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%8F%83%E8%B3%BD%E5%89%8D%E8%A8%80%E3%80%81%E8%AE%80%E5%89%8D%E5%9F%BA%E7%A4%8E%E3%80%81%E7%92%B0%E5%A2%83%E9%A0%90%E5%82%99/","series":["讓PHP再次偉大"],"smallImg":"","tags":["laravel"],"title":"參賽前言、讀前基礎、環境預備"},{"categories":["程式"],"content":"最近在整理自己的履歷和side projects\u0026hellip;\u0026hellip;，順便也買了一些線上課程學習，其中有一門課是教你演算法，舉Leetcode 裡面的題目為例，如果再工程師界久了都知道，Leetcode 是一個刷題網站，而我身為想要變強的工程師當然不可以忽略這個網站啊\u0026hellip;\u0026hellip; 因此在bitbucket 開了一個專案，放置一些藉由上課所學習的解題檔案（線上課程用的是JAVA），但我想要轉成Python ，藉此提升自己的Python實力~~\n如果有興趣可以來看看，但因為目前上課進度緩慢，其實也才幾題而已XD https://bitbucket.org/r567tw/leetcode/src/master/ 不過在本機跑的時候也想要自己就先在本機測試一下不要用leetcode 在那邊幫我測試\u0026hellip;但之前都是用類似以下的語法\n1test = Solution(); #先new 一個Solution 的class 2print(Solution.method(...)) #然後呼叫方法一個一個用肉眼檢查 這種方法超級土法煉鋼的\u0026hellip; 完全就不是工程師的style ~~\n而我是一個php工程師，之前花了一點時間了解phpunit , 然後也有在一些專案寫一些UnitTest\u0026hellip; 心想\u0026hellip;. 難道Python 沒有嗎？\n叮咚！ 原來就是Pytest 啊！ 我現在leetcode 刷題要在本機測試都會使用這個來玩玩看的！接下來我要介紹怎麼使用Pytest，以及我如何將這個導入到我這個leetcode 的練習專案。\n安裝Pytest 首先你要使用pytest 之前就一定要確認pytest 有沒有在你的電腦當中（廢話！），所以你可以參考[這個文件][1]來幫助你安裝pytest ,其實也就這麼簡單\n1$ pip install pytest 然後其實很簡單，就是使用pytest 這個指令或者pip freeze 確認pytest 在不在就好了啊\n使用Pytest 其實和phpunit 很像，其實也是用所謂“assert”的方式確認答案是否正確，以底下程式碼為例說明：\n1from solutions.atoi import Solution 2 3 4def test_myAtoi(): 5 test = Solution() 6 assert(test.myAtoi(\u0026#34;42\u0026#34;) == 42) 7 assert(test.myAtoi(\u0026#34; -42\u0026#34;) == -42) 8 assert(test.myAtoi(\u0026#34;4193 with words\u0026#34;) == 4193) 其實Pytest 的部分就是去偵測你的個函數名稱是否前綴有個`test` ，如果有的話就會跑底下的內容，於是一個完美個TDD流程完成！\n接下來就是跑個指令、然後看看結果就好了，以我目前很緩慢只有解Atoi\\Palindrome\\Pow 的狀況就像底下的情況一樣\nalindrome\n1$ pytest 2============================================= test session starts ============================================= 3platform darwin -- Python 3.6.4, pytest-3.3.1, py-1.5.2, pluggy-0.6.0 4rootdir: /Users/fang/playground/leetcode, inifile: 5collected 3 items 6 7tests/test_atoi.py . [ 33%] 8tests/test_palindrome.py . [ 66%] 9tests/test_pow.py . [100%] 10========================================== 3 passed in 0.05 seconds =========================================== 你寫幾個測試檔案，裡面就會有幾個items ，如果你最後沒看到什麼failed 的話就表示你都很順利喔～\n剩下的我就利用一些modulte 引入的概念，將資料夾很清楚分出tests 和 solutions ，之後我就在solutions 裡面放入leetcode 這題的解法，而tests 裡面放的就是要被驗證的結果，沒過pytest 就會告訴我沒過了\n小君曰：之後要參加鐵人賽了，就決定暫時不繼續努力週更了ＸＤ [1]: https://docs.pytest.org/en/latest/getting-started.html ","date":"Sep 8, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/pytest-%E7%B0%A1%E5%96%AE%E6%95%99%E5%AD%B8/","series":null,"smallImg":"","tags":["pytest"],"title":"Pytest 簡單教學"},{"categories":["讀書筆記"],"content":"Laravel 建置與執行 1.為甚麼要使用Laravel 為甚麼要使用框架 Laravel Lumen Slim 歷史 Ruby on rails CodeIgniter Laravel Laravel 的設計哲學 使用與光有關的字眼 illuminate 照亮 spark 火花 提升開發速度和開發者的幸福 Laravel 社群 2.設置Laravel 開發環境與介紹 系統需求 Composer 本地開發環境 Laravel Valet (mac) Laravel Homestead vagrant up vagrant suspend vagrant halt vagrant destroy vagrant provision laravel new \u0026amp; composer create-project Laravel 的目錄結構 3.路由與控制器 1Route::get(\u0026#39;/\u0026#39;,function(){ 2 return \u0026#39;Hello World\u0026#39;; 3 //return view(\u0026#39;welcome\u0026#39;); #resources/views/welcome.blade.php 4}) 5 6#可用正規表達式限制路由 7Route::get(\u0026#39;/{name}\u0026#39;,function(){ 8 return \u0026#39;Hello World\u0026#39;; 9})-\u0026gt;where(\u0026#39;name\u0026#39;,\u0026#39;[0-9]+\u0026#39;) 路由動詞 Get 觀看 Post 新增 Put/Patch 更新 Delete 刪除 any 1 Route::any(\u0026#39;/\u0026#39;,function(){}) match 1 Route::match([\u0026#39;get\u0026#39;,\u0026#39;post\u0026#39;],\u0026#39;/\u0026#39;,function(){}) 中介層 middleware 在進入controller 之前 過濾request 的條件和身分等 有controller construct 和 route 定義兩種方式宣告 使用視圖組件讓所有視圖共用變數 1 view()-\u0026gt;share(\u0026#39;variable\u0026#39;,\u0026#39;variable); Controller\n方法名稱 動詞 URL index get tasks show get tasks/{task} create get tasks/create store post tasks edit get tasks/{task}/edit update post (put or patch) tasks/{task} destroy post (delete) tasks/{task} 路由模型綁定\n定義一個特定的參數名稱 如{task} 來指示路由解析器，他應該用那個的id 來尋找而不是傳統將id 傳入\n顯式與隱式 路由快取\n壓榨載入時間的每毫秒 1php artisan route:cache 2php artisan route:clear 方法欺騙: method_field() 或者 input-name:_method CSRF 轉址 redirect 中止請求 abort(403) abort_if(condition,403) abort_unless(condition,403) 回應 response response()-\u0026gt;make() 建立一個http 回應 response()-\u0026gt;json() response()-\u0026gt;download() 4.Blade 模板 1 @if 和 @endif 2 {{ }} 3 @unless @endunless 4 @for @foreach @while 5 @forelse ==\u0026gt;@foreach 在迭代的物件是空的時可寫應變機制 6 @section/@show @yield 7 @include 8 @extends 自動blade 指令 全域共用變數 1# in App\\Providers\\AppServiceProvider.php 2public function boot() 3{ 4 ... 5 view()-\u0026gt;share(\u0026#39;posts\u0026#39;,Post::recent()); 6} 7 8view()-\u0026gt;composer(\u0026#39;partials.sidebar\u0026#39;,function($view){ 9 $view-\u0026gt;with(\u0026#39;posts\u0026#39;,Post::recent()); 10}) 11#自訂指令 12//AppServiceProvider 13public function boot() 14{ 15 Blade::directive(\u0026#39;ifGuest\u0026#39;,function(){ 16 return \u0026#34;\u0026lt;?php if (auth()-\u0026gt;guest()): ?\u0026gt;\u0026#34; 17 }); 18} 5.前端套件 laravel-mix 6.收集與處理用戶資料 Request all() except() or only() has() or exist() input() 提供第二個參數是預設值 json() 路由資料 segment() 上傳檔案 $request-\u0026gt;hasfile() and $request-\u0026gt;file() guessExtension getMimeType move() getClientOriginalName() getClientOriginalExtension() isValid() …..其他(p.102) 驗證 $this-\u0026gt;validate($request,[rules]); 表單請求 php artisan make:request Arequest authorize() rule / message withErrors 顯示錯誤訊息 規則可以看文件 Eloquent 模型的大量賦值 $fillable in model {{ … }} v.s {!! … !!} 7.Artisan 與 Tinker 1php artisan make:command {action} 可以同時生成model 和migration 和controller 1php artisan make:model [name] -m -r 8.資料庫與Eloquent Laravel 的 ActiveRecord ORM config/database.php migration 資料庫遷移 系統會依據日期執行他的up/down方法 定義 migration up() 作他的migration down() 恢復他 建立 migration php artisan make:migration create_users_table php artisan make:migration add_votes_to_users_table --table=users php artisan make:migration create_users_table --create=users 撰寫 migration \u0026lt;a href=\u0026quot;https://laravel.com/docs/5.5/migrations\u0026quot;\u0026gt;請參考文件\u0026lt;/a\u0026gt; seeder指令 php artisan migrate --seed php artisan migrate:refresh --seed php artisan db:seed php artisan db:seed --class=VotesTableSeeder #分別執行 php artisan make:seeder ContactsTableSeeder 撰寫seeder 請參考\u0026lt;a href=\u0026quot;https://laravel.com/docs/5.5/seeding\u0026quot;\u0026gt;文件\u0026lt;/a\u0026gt; 查詢產生器 任何一種資料庫的功能核心都是查詢產生器 原生DB 靜態介面寫法 php= DB::statement('drop table users') DB::select('select * from student where id=?',[1]) $users=DB::table('users')-\u0026gt;get() #....其他如join where insert 等 略 限制方法 select() where() orwhere() whereBetween() whereIn() whereNull() whereNotNull() whereRaw() whereExists() distinct 修改方法 orderBy groupbY having() havingRaw() skip() take() latest() oldest() inRandomOrder() 隨機排序結果 結束回傳方法 get() first() firstOrFail() value() 拉出某個欄位 count() min() max() sum() avg() 聯集與聯結 join() union() 增加 更新 刪除 insert() update() delete() json 的操作\n如果你的資料有json 格式可以這樣寫 1//查詢 2DB:table(\u0026#39;users\u0026#39;)-\u0026gt;where(\u0026#39;options-\u0026gt;isAdmin\u0026#39;,true)-\u0026gt;get() 3//更新 4DB:table(\u0026#39;users\u0026#39;)-\u0026gt;update([\u0026#39;options-\u0026gt;isAdmin\u0026#39;,true) Eloquent 模型請參考文件 Eloquent 雖有獨有all 方法，但本書建議不要使用~\nEloquent 模型序列化 將某種複雜的東西轉換成字串 toArray() toJson() https://laravel.com/docs/5.5/eloquent-serialization 9.用戶身分驗證與授權 php artisan make:auth https://laravel.com/docs/5.5/authentication 守衛 config/auth.php auth()-\u0026gt;guard(‘user\u0026rsquo;)-\u0026gt;user() 授權 ACL in blade: can cannot allows denies can gete policy 10.請求與回應 請求生命週期 每一個請求都會轉成 Illuminate Request 物件 經過middleware 過濾請求後進入controller 處理好後就產生 Illuminate Response request resonse middleware 每一個請求都會經過每一個middleware 最後進入應用程式，之後產生的回應會經過middleware回到用戶 11.容器 相依注入 每一個類別的相依關係都是從外面住入的 而不是在類別中實例化的 控制反轉 app() 全域輔助函式 將類別綁定容器 告知容器如果有人要求一個Logger 實例，則執行這段程式 12.測試 Laravel 內建 PHPUnit、Behat、Mockery、Faker 等 單元測試 測試對象是小型、相對獨立的單位，通常是一個類別或方法 整合測試 測試各個單位合作及傳遞訊息的方式 應用測試 驗收或功能測試，測試整個應用程式的行為 在根目錄執行 .\\vendor\\bin\\phpunit 文件 php artisan make:test GreetTest 在feature 資料夾裡面增加一個GreetTest.php 繼承TestCase phpunit 會跑feature 和unit 裡的每一個測試 $this-\u0026gt;visit(url) $this-\u0026gt;call(method,url,params,cookies,file,server,content) $this-\u0026gt;get/post/put/patch/delete $this-\u0026gt;json $this-\u0026gt;followRedirects 各種的asset 測試方法 文件 自我練習 Browser Tests (Laravel Dusk) 元件外掛 測試特徵 withoutMiddleware databasemigrations databasetransactions 13.編寫API 類REST JSON API 基礎 一種用來建構API 的架構格式 URL 可以獨特的表示一種資源 使用HTTP動詞來和資源互動 CRUD Laravel Passport 作 API 身分驗證 https://laravel.com/docs/5.5/passport composer require laravel/passport\n在config/app.php providers 加入 Laravel\\PassportServiceProvider::class\nphp artisan passport:install\n將HasApiTokens 的trait 加入 App\\user\nhttp://www.itread01.com/content/1496308818.html' http://codingweb.tw/2016/12/23/laravel-5-3-api-%E8%AA%8D%E8%AD%89-authentication-passport/ 14.儲存與取出 本地與雲端檔案管理器 config/filesystems.php storage_path() 輔助函式 1php artisan storage:link 使用Storage 靜態介面 Storage::disk(\u0026lsquo;s3\u0026rsquo;)-\u0026gt;get(\u0026lsquo;file.jpg\u0026rsquo;) get() put() putFile(\u0026lsquo;dir\u0026rsquo;,$file) exists() copy(old,new) move(old,new) prepend() 在前面加 append() 在後面加 delete() deleteDirectory() size() lastModified files(dir) allFiles(dir) +子目錄內的 directories() allDirectories() Session Laravel 的session 管理器支援：檔案、cookie、資料庫、Memcached、Redis 1#取出 2session()-\u0026gt;get(\u0026#39;key\u0026#39;) 3session(\u0026#39;key\u0026#39;) 4#放入 5session()-\u0026gt;put(\u0026#39;key\u0026#39;,\u0026#39;value\u0026#39;) 6session([\u0026#39;key\u0026#39;,\u0026#39;value\u0026#39;]) 7#session 是陣列時 8session-\u0026gt;push(key,value) 9#全部 10session()-\u0026gt;all() 11#移除 12session()-\u0026gt;forget(key) #移除一個 13session()-\u0026gt;flush() #移除每一個 Flash session 儲存 只想要在下一個網頁載入時抹除它 1session()-\u0026gt;flash(key,value) 2 3session()-\u0026gt;reflash() / session()-\u0026gt;keep(key) 4#讓前一個網頁的flash session 繼續使用 快取 快取中的資料是為每一個應用程式儲存的；而session 中的資料是為每一個用戶儲存的 config/cache.php https://laravel.com/docs/5.5/cache cache()-\u0026gt;get(key,fallbackvalue) cache()-\u0026gt;pull(key,fallbackvalue) cache()-\u0026gt;put(key,value,minutesOrExpiration) cache()-\u0026gt;add(key,value) cache()-\u0026gt;forever(key,value) cache()-\u0026gt;has() cache()-\u0026gt;remember(key,minutes,closure) / cache()-\u0026gt;rememberForever(key,closure) cache()-\u0026gt;increment(key,amount) / cache()-\u0026gt;decrement(key,amount) cache()-\u0026gt;forget() / cache()-\u0026gt;flush() Cookie https://laravel.com/docs/5.5/requests#cookies Laravel Scout 作全文搜尋 可為Eloquent 模型加入全文搜尋 Algolia預設驅動程式 要改成elasticsearch 請另外找辦法 15.郵件與通知 郵件 https://laravel.com/docs/5.5/mail config/mail.php classic mailable 傳統郵件 classic 1Mail::send(view,data,closure) 2# closure 裡面有寄件者 收件者 等等 Mailable 本地開發\nlog驅動程式\nMailtrap.io\nUniversal to\n通知 Notification\nphp artisan make:notification WorkoutAvailable\n16.佇列、工作、事件、廣播與排程器 佇列可以將昂貴或緩慢的程序移出任何同步呼叫 ex.傳送郵件\nconfig/queue.php\n事件\nevent()\n監聽事件\nphp artisan make:listener jobname \u0026ndash;event=UserSubscribed 將事件廣播到WebSocket 與 Laravel Echo\n排程器\ncron job in linux app\\console\\kernel.php $schedule 17.輔助函式與集合 https://laravel.com/docs/5.5/helpers https://laravel.com/docs/5.5/collections Laravel 的中大型專案架構 參考資料 laravel 優美架構 可用外掛 https://github.com/Mombuyish/Laravel-Oh-Generators 1.Model : 僅當成 Eloquent class。\n2.Repository : 輔助 model，處理資料庫邏輯，然後注入到 service。\n3.Service : 輔助 controller，處理商業邏輯，然後注入到 controller。\n4.Controller : 接收 HTTP request，調用其他 service。\n5.Presenter : 處理顯示邏輯，然後注入到 view。\n6.View : 使用 blade 將資料 binding 到 HTML。\n7.Transformer :轉換顯示欄位(API)\n8.Formatter: 格式的統一顯示格式(API)\n9.Foundation: 獨立掛載功能\n總結\n職責單一: 就是說每次修改都會有個地方變動而已，所以每個類別都只會有一種改變的理由 跟夥伴們取得一個共識：讓他們知道這樣的設計和方法可以帶來時麼樣的好處，建立一個良好的溝通 Laravel 外掛整理 Debug Laravel-tracy vscode-handler :使用vs-code一鍵開檔 laravel debugbar 開發相關 laravel-model-generator :生成laravel model laravel-oh-generators :生成優美laravel 架構 驗證 laravel-jsvalidation :Laravel 和前端的規則可以共用 權限 laravel-entrust :使用者權限劃分 管理後台 管理後台平台外掛 類似Django 自帶後台? http://labs.infyom.com/laravelgenerator/ LARAVEL-ADMIN http://www.ctolib.com/article/comments/21786 http://laravel-admin.org/ Ruby on rail Scaffold Laravel 類似Ruby on rail 的scaffole 指令 https://github.com/appzcoder/crud-generator/ Office laravel excel laravel word Notification 通知 laravel flash Log laravel5 log viewer 開發 laravelcollective HTML PDF laravel dom-pdf 資料庫備份 laravel-backup Datatable yajra datatables 其它 laravel dusk (瀏覽器測試) laravel-fractal (創建api) doctrine DBAL (更優的數據表操作) intervention image(用於修改及創造圖片) Laravel 寫log 的建議方法 https://laravel-china.org/topics/2530/the-highest-amount-of-downloads-of-the-100-laravel-extensions-recommended 每一個laravel 安裝的package 有哪些 Laravel 的Carbon 小技巧 1.本地化\n1# app/Providers/AppServiceProvider.php 2public function boot() 3{ 4 \\Carbon\\Carbon::setLocale(\u0026#39;zh\u0026#39;); 5} 6#$article-\u0026gt;created_at-\u0026gt;diffForHumans(); # 1 年前 2.七個小技巧\nhttps://9iphp.com/web/php/less-known-useful-carbon-functions.html isX :True/False 1\u0026lt;?php 2$dt-\u0026gt;isWeekday(); 3$dt-\u0026gt;isWeekend(); 4$dt-\u0026gt;isYesterday(); 5$dt-\u0026gt;isToday(); 6$dt-\u0026gt;isTomorrow(); 7$dt-\u0026gt;isFuture(); 8$dt-\u0026gt;isPast(); 9$dt-\u0026gt;isLeapYear(); 10$dt-\u0026gt;isSameDay(Carbon::now()); isBirthday 1\u0026lt;?php 2$born = Carbon::createFromDate(1987, 4, 23); 3$noCake = Carbon::createFromDate(2014, 9, 26); 4$yesCake = Carbon::createFromDate(2014, 4, 23); 5var_dump($born-\u0026gt;isBirthday($noCake)); // bool(false) 6var_dump($born-\u0026gt;isBirthday($yesCake)); StartOfX 和 EndOfX 列表 1\u0026lt;?php 2$dt = Carbon::create(2012, 1, 31, 12, 0, 0); 3echo $dt-\u0026gt;startOfDay(); // 2012-01-31 00:00:00 4echo $dt-\u0026gt;endOfDay(); // 2012-01-31 23:59:59 5echo $dt-\u0026gt;startOfMonth(); // 2012-01-01 00:00:00 6echo $dt-\u0026gt;endOfMonth(); // 2012-01-31 23:59:59 7echo $dt-\u0026gt;startOfYear(); // 2012-01-01 00:00:00 8echo $dt-\u0026gt;endOfYear(); // 2012-12-31 23:59:59 9echo $dt-\u0026gt;startOfDecade(); // 2010-01-01 00:00:00 10echo $dt-\u0026gt;endOfDecade(); // 2019-12-31 23:59:59 11echo $dt-\u0026gt;startOfCentury(); // 2000-01-01 00:00:00 12echo $dt-\u0026gt;endOfCentury(); // 2099-12-31 23:59:59 13echo $dt-\u0026gt;startOfWeek(); // 2012-01-30 00:00:00 14echo $dt-\u0026gt;endOfWeek(); // 2012-02-05 23:59:59 Today, Tomorrow, Yesterday 1\u0026lt;?php 2$today = Carbon::today(); // assuming 2016-06-24 3echo $today; // 2016-06-24 00:00:00 4$tomorrow = Carbon::tomorrow(); 5echo $tomorrow; // 2016-06-25 00:00:00 6$yesterday = Carbon::yesterday(); 7echo $yesterday; // 2016-06-23 00:00:00 DiffForHumans + 本地化 1\u0026lt;?php 2echo Carbon::now()-\u0026gt;subDays(5)-\u0026gt;diffForHumans()//5daysago 3Carbon::setLocale(\u0026#39;zh\u0026#39;); 4echo Carbon::now()-\u0026gt;addYear()-\u0026gt;diffForHumans(); //一年前 改变 now() 为任意你想要的时间 1\u0026lt;?php 2$knownDate = Carbon::create(2001, 5, 21, 12);//建测试日期 3Carbon::setTestNow($knownDate); // set the mock 4echo Carbon::now(); // 2001-05-21 12:00:00 星期常量 1\u0026lt;?php 2var_dump(Carbon::SUNDAY); // int(0) 3var_dump(Carbon::MONDAY); // int(1) 4var_dump(Carbon::TUESDAY); // int(2) 5var_dump(Carbon::WEDNESDAY); // int(3) 6var_dump(Carbon::THURSDAY); // int(4) 7var_dump(Carbon::FRIDAY); // int(5) 8var_dump(Carbon::SATURDAY); // int(6) 相關資源 理解laravel 核心概念 https://www.codecasts.com/series/peak-into-laravel-core-components https://laravel-china.org/topics/3057/the-core-concept-of-laravel 套件管理-軍火庫 Packagist 教程 Larvist https://www.codecasts.com/ sample code laravel 5.5 blog 更有效率的laravel 更深層的laravel phpconf筆記 使用 Laravel \u0026amp; Vue.js 打造即時資訊看板 laravel 優美架構 每一個laravel 安裝的package 有哪些 laravel小技巧 laravel 開源項目大全 Redis 應用 如何經營 Side Project 拿到 1K 顆星星 https://medium.com/@guitarbien ","date":"Aug 31, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-%E5%BB%BA%E7%BD%AE%E8%88%87%E5%9F%B7%E8%A1%8C%E5%8F%8A%E7%9B%B8%E9%97%9C%E7%AD%86%E8%A8%98/","series":null,"smallImg":"","tags":["laravel"],"title":"Laravel 建置與執行及相關筆記"},{"categories":["讀書筆記"],"content":"1.現代的php php 是一個直譯式的伺服器端腳本語言 php 引擎是一個可以解析、直譯和執行php 程式碼的程式 Zend Engine HipHop Virtual Machine Hack 程式語言：建立在PHP 之上的新程式語言 靜態型別 動態型別在程式執行時期檢查；靜態型別再編譯時期被檢查(第十二章) 2.特點 名稱空間 namespace php5.3.0 解決class 名稱的衝突 緊接\u0026lt;?php標籤之後 讓我們創造出程式碼並獨立運作於其他開發者的程式 Import and Alias 不用輸入完整的namespace 落落長的名稱 1#不利用import and alias 2$response = new \\Symfony\\Component\\HttpFoundation\\Response(\u0026#39;oops\u0026#39;,400); 3#利用import and alias 4use \\Symfony\\Component\\HttpFoundation\\Response as Res 5$r=Res(\u0026#39;oops\u0026#39;,400) 多重匯入(可以好幾個use) 單一檔案多重名稱空間 1\u0026lt;?php 2namespace foo{ 3 4} 5namespace bar{ 6 7} 全域名稱空間 有些程式碼沒有名稱空間，將存在於全域名稱空間，例如exception 1\u0026lt;?php 2namespace My\\App 3class foo{ 4 public function do(){ 5 $exception = new \\Exception() 6 } 7} 程式碼作為介面 一個介於兩個php 物件之中的合約，它讓一個物件瞭解另一個物件可以做甚麼，而不是另一個物件是甚麼 interface 的撰寫 特徵機制 trait from php5.4 模組化實作方式可以被插入到不相關的類別中 1\u0026lt;?php 2trait mytrait{ 3 4} 5#use trait 6class myclass{ 7 use mytrait; 8} 產生器 from php 5.5 簡單的迭代器 文章參考 如果一次把檔案讀入記憶體，會使用掉很大的資源，比較好的處理方式是用streaming的方式讀取，逐步處理讀取的內容。 不會要求你的類別實作Iterator 介面，產生器只在需要的時候計算並產生迭代的數值 1\u0026lt;?php 2function makeRange($length){ 3 for ($i=0; $i\u0026lt;$length; $i++){ 4 yield $i; 5 } 6} 7 8foreach (makeRange(10000000) as $i){ 9 echo $i,PHP_EOL; 10} 11#ｃｓｖ　產生器 12function getRows($file){ 13 $handle = fopen($file,\u0026#39;rb\u0026#39;); 14 if ($handle ==== false) 15 { 16 throw new Exception(); 17 } 18 while (feof($handle) === false){ 19 yield fgetcsv($handle); 20 } 21 fclose($handle); 22} 23 24foreach (getRows(\u0026#39;data.csv\u0026#39;) as $row){ 25 print_r($row); 26} 閉包 from php 5.3.0 1$closure = function ($name){ 2 return sprintf(\u0026#39;hello %s\u0026#39;,$name); 3} 4 5echo $closure(\u0026#39;josh\u0026#39;) # output=\u0026gt; \u0026#39;hello josh\u0026#39; 6 7$numberplusone=array_map(function ($number){ 8 return $number+1; 9},[1,2,3]); 10 11print_r($numberplusone); 12# output=\u0026gt;[2,3,4] 繫結狀態 閉包裡的閉包 closure in closure 參考文章 bindTo and invoke 參考文章 利用use 關鍵字傳入多個參數到closure 可以利用逗號區分變數，如同其他任何php函式或方法的參數 1\u0026lt;?php 2function enclosePerson($name){ 3 return function($doCommand) use ($name){ 4 return sprintf(\u0026#39;%s $s\u0026#39;,$name,$doCommand); 5 }; 6} 7 8$clay=enclosePerson(\u0026#39;Clay\u0026#39;); 9echo $clay(\u0026#39;get me sweet tea!\u0026#39;); 10# output=\u0026gt; \u0026#39;Clay get me sweet tea!\u0026#39; Zend OPcache 文章 內建http 伺服器 1php -S localhost:4000 3.標準 PHP-FIG 到 Rescue 框架互通性 介面 自動載入 風格 PSR PHP 標準協議 PHP standards recommendation PSR-0 已棄用，由PSR-4 取代 PSR-1:基本程式碼風格 PHP 標籤 你要用PHP 標籤 或 包覆PHP 程式碼 編碼：必須以沒有位元順序標記的utf-8字元編碼 目的：每個php檔案可以用來定義符號或執行一個有作用的動作 自動載入: 你的名稱空間和類別必須支援psr-4 自動載入器標準 類別:使用CamelCase 格式 ex. CoffeeGrinder 常數名稱:必須使用大寫，並且必要時使用底線 方法名稱:使用camelCase 格式，弟一個字要小寫，每個單字的第一個字元是大寫 PSR-2:嚴厲程式碼風格 實做PSR-1 縮排：建議表示四個空白字元縮排 檔案和行距：使用ＬＦ　做為每一行結尾，檔案最後應該保有最後一行並且不能包含?\u0026gt; 每一行不應超越80個字元，如果不得以，不能超越120個字元，每行結尾不能有空白字元 關鍵字:以小寫表示所有的關鍵字 名稱空間:每一個名稱空間的宣告都必須接上一行空白行，同樣的在USE 區塊之後要接上一行空白行 類別:建議表示起始括號在類別內容結束的下一行，extends 和implements 關鍵字必須和類別名稱同一行 方法:方法定義的起始括號必須要在方法名稱下一行的開頭，結尾在方法內容結束後的下一行開頭，第一個參數不用以空白結尾，而最後一個括號不用預留前置的空白，方法的每一個參數(除了最後一個)都緊接著一個逗號和一個空白 能見度:必須宣告能見度，public protected private，abstract 或finial 在能見度之前，static 在能見度之後 控制流程:所有控制流成關鍵字必須接上一個空白字元，起始括號和控制流成關鍵字同一行，結尾則在新的一行 PSR-3:記錄器介面 實做php 記錄器 PSR-4:自動載入器 4.元件 框架 Packagist 可以尋找合適的元件 composer 安裝 元件安裝 建立php 元件 src tests composer.json README.md CoONTRIBUTING.md LICENSE CHANGELOG.md 5.良好習慣 消毒、驗證和跳脫 日期時間與時區 6.寄存 共享伺服器 虛擬私有伺服器 VPS 獨佔伺服器 PaaS 7.服務開通 vps 的開通\nphp-fpm 8.調校 php.ini 記憶體 zend opcache 檔案上傳 最大運行時間 session 處理 輸出緩衝區 真實路徑快取 9.部屬 版本控制 自動化部屬 保持簡單 保持可預測 保持可反悔 工具 capistrano deployer magallanes rocketeer 10.測試 何時開始 開發前 開發當中 開發結束 如何測試 單元測試 PHPUnit 測試驅動開發TDD 行為驅動開發BDD 以Travis CI 持續測試 測試應當自動化進行 11.剖析 分析應用程式效能的一種方式 用於開發階段 用於產品階段 Xdebug XHProf New Relic 剖析器 Blackfire 剖析器 12.HHVM 和 HACK HHVM PHP 引擎 已經最佳化應用程式但是需要更高效能的開法者 HACK 語言 1\u0026lt;?hh 2echo \u0026#34;I\u0026#39;m Hack\u0026#34;; 靜態型別 編譯 動態型別 一直到執行階段才被檢查 HACK 同時實做了靜態與動態~ 13.社群 當地PUG http://php.ug 研討會 導師 http://phpmentoring.org 持續吸收新知 補充 PSR PHP標準建議 文章連結 PHP標準建議編號1(PSR-1)，基本編碼標準. 像是類別(Class)名稱必需宣告為StudlyCaps，方法(Method)的名稱需宣告為camelCase..等 PHP標準建議編號2(PSR-2)，則是PSR-1的擴充，規範了PHP編碼風格，像是extends或是implements必需與class名稱同一行…等。 PHP標準建議編號4(PSR-4)，則定義了自動載入(Autoloader標準) ","date":"Aug 25, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%8F%BE%E4%BB%A3php-%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/","series":null,"smallImg":"","tags":["現代php"],"title":"現代PHP 讀書筆記"},{"categories":["程式"],"content":"最近使用laravel ，發現遇到一行就退出的問題，發現原來是php 7.3 的問題\u0026hellip; 詳細資源請參考：https://learnku.com/laravel/t/21165 解決方案 建立 ~/.config/psysh/config.php 這個檔案\n然後在這個檔案裡面寫道\n1\u0026lt;?php 2return [ 3 \u0026#39;usePcntl\u0026#39; =\u0026gt; false, 4]; 之後就解決了這個一行就退出的問題囉～\n","date":"Aug 11, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-tinker-%E4%B8%80%E8%A1%8C%E5%B0%B1%E9%80%80%E5%87%BA%E7%9A%84%E5%95%8F%E9%A1%8C/","series":null,"smallImg":"","tags":["tinker","laravel"],"title":"Laravel Tinker 一行就退出的問題"},{"categories":["讀書筆記"],"content":"本月讀了一本技術相關的書，其實也有點和技術打不上八竿子著\u0026hellip;\u0026hellip;然後也順便該為我這個部落格除除草了\u0026hellip;..\n這本書的書名叫做軟技能，英文書名是：Soft Skills。沒有非常高的技術含量，但卻是作為技術人員可以被提醒的一本「生活指南」。在書中的一開始講到職涯的規劃、之後是如何面試、增加生產力、健身甚至是到理財\u0026hellip;. 總之你生活上想到的應該這本書都有談到\u0026hellip;..(包含愛情～不過也只有簡短的一章啦)\n軟技能的作者非常鼓勵技術人員、工程師寫部落格\u0026hellip;.. 我個人也是非常同意\u0026hellip;希望我也能好好維持這個寫部落格的習慣，將「自己行銷出去」！\n分享我個人對於這本書比較印象深刻的地方：\n我們必須將自己視為「企業」，好好規劃自己的職涯 面試簡單來說就是要獲得面試官的喜歡 關於職業倦怠：只要你能越過這道牆，到牆的另外一側，突然間事情都開始變得豁然開朗，又能重新拾回你的動機與興趣 LDLT學習法 ：Learn – Do – Learn – Teach 十步驟學習方法： 綜觀全貌 決定範圍 定義成功 尋找資源 建立學習計畫 篩選資源 學習恰到好處的基礎知識（Ｌ） 實作（Ｄ） 學習足夠學以致用的知識（Ｌ） 教導他人（Ｔ） 其中作者在寫理財篇的時候竟然最後談到「十一奉獻」\u0026hellip;繼上次我看過C#技術書籍有作者大力向讀者傳福音之後又一個談到信仰ＸＤ 但這本書信仰含量不高啦，畢竟他是寫給工程師們的～ 其實經歷一些歲月，這本書的內容都會認真的經歷與學習，我覺得並沒有說是很「值得收藏」的書，但或許是一本「當自己程式寫累的時候」翻翻看的書。我想重要的是：人生不能只有程式！\n而我前陣子才真的有所體會：我一直過於focus 在提升自身技術能力，但其實技術只是「工具」，程式設計本質上是個「解決問題的藝術」！ 願我之後能不斷的進步，能夠成為真正可以解決問題的工程師。\n小君曰：好好學習如何生活！\n","date":"May 19, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E8%AE%80%E8%BB%9F%E6%8A%80%E8%83%BD-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E8%A9%B2%E5%A6%82%E4%BD%95%E7%94%9F%E6%B4%BB/","series":null,"smallImg":"","tags":["軟技能"],"title":"讀軟技能-工程師該如何生活"},{"categories":["讀書心得"],"content":"最近看了一本書，真確\nYoutuber 啾啾鞋也有推薦了這一本書：https://www.youtube.com/watch?v=xzx5NFrNg1Q\n為什麼會買到這本書呢，是因為去年一時無聊去誠品逛著逛著，一時興起把這本書拿起來看，想到許多人之前在網路上的推薦，便帶走了他….結果不小心放到現在才看完ＸＤ 只能說我有時候真的很喜歡「堆書」呢，是一種自以為是的炫耀感嗎？ 哈，總之我在努力把這些堆書看完，不允許最近再出手買書了。\n心得 首先這本書一開始就有幾題的問答，而我的結果竟然13題當中只對了2題ＸＤ 整個超慘的啦～ 當然，看完這本書才發現我們真的充斥著各種的「偏誤」，這本書寫到總共有10種我們常常看待世界現況的錯誤，這裡就不特別爆雷了，請大家可以自行去看看呵呵(話說最近復仇者聯盟4正夯，竟然有人因為暴雷被痛毆哈哈)\n我們在學校學的知識往往趕不上現在走的速度，以至於當我們走出學校與研究的象牙塔之後，踏入這個社會、這個真實世界當中，往往自以為「是」，殊不知其實這世界的走向已經又是另一種樣貌。\n「十年河東，十年河西」，我這裡舉個例子，誰也沒想到台灣如今認同「台灣獨立」其實比例是越來越多，也有可能是因為我在「同溫層」當中，但也有可能這真是個事實，說實在我無法也沒有更多的資源加以驗證了。\n提醒 但這本書提醒我很重要的一件事就是：「永遠要能保持獨立思考的能力、保持懷疑的態度」，數據有可能造假、媒體會渲染、而你自己的大腦，也會騙人\u0026hellip;我們會相信我們想相信的、我們總是容易標籤化、二分化他人，我個人也常常干犯這樣的錯誤。\n我們總是喜歡標籤化他人，標籤他是基督徒：他是非基督徒，他是藍色政黨：他是綠色政黨，他是挺同的：他是反同的，他是文科的：他是理科的…….\n「標籤化」是一個能讓我們快速進入狀況、瞭解他人的方式。我們也不應該「不標籤化」。標籤化若能用得合宜，它可以幫助我們溝通。\n可是這個世界不是那麼容易被分類的，它不是這麼簡單的兩種極端，你說是吧？\n另外，兩種極端其實都不容易被說服的，因為兩種極端他們所持有的信念有時不僅只是理念，而是「執念」。看陸劇「花千骨」讓我知道：「過於執著於自己的執念是會讓人自我毀滅的，有時候是需要學習放下一點點的。花千骨與白子畫的執念、紫薰上仙對於白子畫的執念….這裡就不多做敘述了，自行去複習一下～」\n總結 總之，我覺得我個人也還在學習，如果我打臉上面自己寫的話，請告訴我。\n小君曰：「路加福音2:52 耶穌的智慧和身量，並神和人喜愛他的心，都一齊增長。」\n","date":"Apr 27, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%9C%8B%E8%A6%8B%E4%B8%96%E7%95%8C%E7%9C%9F%E5%AF%A6%E7%9A%84%E6%A8%A3%E8%B2%8C-%E8%AE%80%E7%9C%9F%E7%A2%BA/","series":null,"smallImg":"","tags":["真確"],"title":"看見世界真實的樣貌– 讀真確"},{"categories":["程式"],"content":"來寫個簡單的Python 教學好了，對了！ 去年我有挑戰it 幫鐵人賽，參加的是自我挑戰組，並且自己訂的主題就是Python 30天！ 歡迎大家去看看！\n連結於此 對於鐵人賽完賽的心得不必多說，我想已經都寫在最後一天了，總之就是覺得自己還有很大的成長空間，下次參加鐵人賽一定要有更充足的準備和題目。\n不得不說，這次鐵人賽的獎品\n我個人覺得好浮誇\u0026hellip;\u0026hellip;\n好了，簡單交代近況也夠了，進入主題來談談Python 好用的套件pytube 吧！\npytube 是用來可以抓youtube的影片，首先，你必須先安裝它\n1$ pip install pytube 接下來你可以確認一下pytube 是否正常運作？\n1$ pytube --version 2$ pytube 9.4.0 如果你是最新安裝pytube version 應該會是9.5.1 , 不過pytube 9.5.1 有些問題，可以參考此連結 解決問題\n接下來我們就可以開始寫下載youtube影片的程式啦！\n這裡我只是簡單呈現怎麼撰寫，詳細與延伸可以參考文件：https://Python-pytube.readthedocs.io/en/latest/# 小君曰：不知道為什麼文件的版本似乎落後了我目前寫的版本\u0026hellip;\n就是這麼簡單！！！！\n1from pytube import YouTube 2 3url =input(\u0026#39;請輸入你要下載的youtube網址： \u0026#39;) 4print(\u0026#39;下載 來自\u0026#39;+url+\u0026#39; 的youtube影片中...\u0026#39;) 5YouTube(url).streams.first().download() 像我自己想要更加炫技一下就會想知道我目前youtube影片的名字的話可以這樣寫\u0026hellip;.. 加入beautifulSoup 這個可以分析網頁的套件。\n1from pytube import YouTube 2import requests 3from bs4 import BeautifulSoup 4 5url =input(\u0026#39;請輸入你要下載的youtube網址： \u0026#39;) 6 7# 先去youtube 上看看這部影片的名字 8request=requests.get(url) 9context = request.content 10# 藉由BeautifulSoup 11soup=BeautifulSoup(context,\u0026#34;html.parser\u0026#34;) 12# 取得我要的資料 13video_name = soup.select(\u0026#39;h1.watch-title-container\u0026#39;)[0].get_text(); 14# 資料清理 15video_name = video_name.replace(\u0026#39;\\n\u0026#39;,\u0026#39;\u0026#39;) 16video_name = video_name.replace(\u0026#39; \u0026#39;,\u0026#39;\u0026#39;) 17# 準備下載啦 18print(\u0026#39;下載 來自\u0026#39;+video_name+\u0026#39; 的youtube影片中...\u0026#39;) 19YouTube(url).streams.first().download() 20print(\u0026#39;下載完成！\u0026#39;) ","date":"Mar 3, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/pytube-%E7%B0%A1%E5%96%AE%E6%95%99%E5%AD%B8/","series":null,"smallImg":"","tags":["python","pytube"],"title":"Pytube 簡單教學"},{"categories":["信仰"],"content":" 此篇為我個人對於畢業之後出社會的簡單心思歷程，被刊載於校園福音團契-校園畢業生同行電子報第044期，很榮幸也很開心能被校園畢業生負責同工邀請寫稿，也願上帝能使用這樣的文章，讓許多學子了解工程師這個職業。 對於工程師，你想到的印象是什麼？ 是整天待在電腦前面敲敲鍵盤然後寫出一次又一次的「魔術」嗎？還是常常窩在家裡整天聲喊著自己找不到男女朋友、自己是工具人的宅男宅女們？在維基百科當中，工程師被定義為：「那些在工程專業領域的人，他們使用科學知識來駕馭技術以解決實際問題，並以此為職業。」\n沒錯，我們其實是負責解決問題的，我是一名工程師，目前負責維護、開發、設計網頁系統或者是軟體的工程師，每天工作的一開始，就是開電腦、偶爾還會與其他工程師或專案經理溝通關於專案上面的事情，然後回去敲著一行行的程式碼到電腦裡面，提供能讓專案經理滿意、讓客戶滿意、讓公司滿意的「資訊式服務」。\n在這份工作當中常常面臨著與專案經理的角力、還有客戶時程要求的壓力、以及有時候技術能力卡關的無力。其實我覺得自己格外幸運，在這個產業當中，四處都需要工程師、四處都需要懂資訊的人，打開人力銀行或什麼徵才網頁，只要你不太在乎薪水或不怕新的事物，總是會有工作機會等著你的。甚至如果你是真高手，還會有許許多多的獵人頭顧問在後面追著你。但在這麼看似這麼好這麼爽的情況下，為何有時我覺得我是「被忘記」的人呢？\n我並不是很排斥寫程式，我也很享受在那個解決問題的當下，那個時刻所獲得的成就感、與滿足感。但好像解決了問題之後，又會有一個新的問題或者新的需求\u0026hellip;周而復始的循環，有時好像自己只是「生產網頁」的機器。而且隨著現代化資訊工作越來越進步、同時也越來越精細、越來越分工，資訊工作隱含的，不僅是一般的「資訊化服務」，而是小至辦公室電腦的管理、大至管理公司及支援決策的軟體系統建置，你不只是要不斷的充實自己的所學所能來面對這接踵而來的問題，還要面對自己的有限以及需要有其他專業人才的幫助與配合。在這樣的過程之中，我似乎漸漸迷惘或者迷失、甚至會懷疑自己在追求的到底是什麼：是客戶滿意的笑容？還是專案經理的肯定？抑或是公司能夠拿到源源不絕的業績與金錢？我真的是在追求聖經裡面所說的「標竿」嗎？我真的是在完成所謂上帝放在我生命當中的命定或呼召嗎？\n我的同事曾經說過：「他覺得工程師就像『衛生紙』，你沒有什麼需要的時候就放在旁邊，等你真正需要的時候又才會發現它的重要，我寧願用工程師的錢來多聘僱幾位業務來賺錢。」\n「做這種工作沒有掌聲啦！而且也沒人覺得你屬靈！更不用說你會出名還是變有錢！一天24小時還要on-call喔！」這是在2013年青年宣道大會中，講員在資訊科技宣道事奉工作坊的講堂講過的話。他提到資訊人在職場與教會服事的現場，人們往往都看到前面第一線的人，在教會外是那些業務、經理們，而在教會內則是台上的敬拜團、司會等等。\n回到當初在畢業以前，我也曾立志為上帝做「資訊服事」，可惜的是當時我並沒有對「資訊服事」做一個很明確的定義與清晰的目標，到了如今，我也不知道該怎麼定義所謂的資訊服事，是回到體制內服事那些福音機構或教會嗎？還是在體制外的職場為上帝大發熱心，傳福音與為主發光？\n但傳福音及為主發光從來都不是很容易的事情，你不可能叫工程師對著電腦傳福音吧，而在教會現場中，通常也只有在簡報放錯或者電子設備故障時才會注意到後面的音控和教會的資訊人員。「信仰與宗教」成為了私領域裡的事情，在天生不擅交際的工程師群體裡、面對「同事不是朋友」的職場現實下，信仰/教會生活與職場便產生了極大的張力，出社會兩年多以來，我總是在與這樣的張力戰鬥，總在某個時候，常常有這種「孤獨」及「被忘記」的感覺……。\n〈以賽亞書〉中有一段經文：「耶和華離棄了我；主忘記了我。婦人焉能忘記她吃奶的嬰孩，不憐恤她所生的兒子？即或有忘記的，我卻不忘記你。看哪，我將你銘刻在我掌上；你的牆垣常在我眼前。」\n是的，藉著當時舊約以色列民的故事，上帝一直沒有放棄我們，祂將我們銘刻在祂的掌上，我也知道除了這些資訊的工作，說實在我也不知道可以做什麼其他的（或許這樣說是奇怪的）…..，感謝上帝過去給我的恩典與帶領和堅固，讓我也知道耶穌也曾經在上十字架的那一刻，他也曾感受過孤獨與被忘記，但他仍然專心注目上帝，執行上帝要他做的心意。其實，專業事奉才不是什麼次等事奉呢，而是一次一次不斷與上帝同行的過程。\n各行各業都會有各種的酸甜苦辣，記得在一次與學長的對話當中，他提醒我的信仰怎麼一直處於這種「搖擺」的狀態，但後來在想，那什麼才是「搖擺」，什麼才是「穩定」呢？回想起之前看了一本書，叫做「寫給你心中尚未崩壞的地方」，作者之一的 Charis Hung 在序當中有句話是這樣寫道的：「我是問題少女，是想要問問題的信徒，但不代表我有問題。我不是在追求斬釘截鐵的答案，只是渴望有人可以和我同行、思考、探索、實踐。」\n在最後就讓我引用里爾克《給青年詩人的信》中的某句話作為總結吧：And the point is, to live everything. Live the questions now. Perhaps then, someday far in the future, you will gradually, without even noticing it, live your way into the answer.（重點在於：活出當下的一切，活在問題中，或許有一天，不知不覺地，你漸漸活進答案之中。）\n","date":"Jan 1, 2019","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E6%BC%B8%E6%BC%B8%E6%B4%BB%E9%80%B2%E7%AD%94%E6%A1%88%E8%A3%A1/","series":null,"smallImg":"","tags":null,"title":"漸漸活進答案裡"},{"categories":["讀書心得"],"content":"最近讀了一本書：「寫給你心中尚未崩壞的地方」\n這本書的有兩位作者，一位是洪麗芳(Charis Hung) ，另位一位和前一本書「關於基督徒，我們說的其實是……」是一樣的。如果要看我對於那本書的讀書心得可以到這裡 本文所談到的「離教者」並不是常見離開「基督教信仰」的人，而是那些喜歡思考、對教會有許多問題想問的一群“非典型基督徒”，其實，筆者我認為自己有點像這類人物，只是還沒有像Charis這麼果斷離開...... 放棄或不放棄教會 當初是在無意之間在滑FB的時候，看到這本書的訊息。當時看到這本書的目錄及大意，越來越覺得這本書有趣，事實上，它是一本離教者(Charis Hung )和神學院老師(陳韋安 )的一場對話錄，裡面從一開始談論穿著衣服問題到許多議題，包括自由、禱告、單身、召命、喜樂、相信、教會、地獄等等，甚至也談到最近沸沸揚揚的同性戀議題。\n我以為，在離教者與老師的一次次的對話當中，會讓離教者更接近上帝一點、進而願意回到教會，以一個“正確基督徒”的姿勢繼續邁向他日後的信仰之路。可是，到了對話的最後，卻為讀者留下了一些奧秘不可測的空間，就像這本書的標題：「寫給你心中尚未崩壞的地方」。離教者，最後仍然沒有回去教會。（抱歉這裡讓我劇透了一下XD）\n我以為，神學院老師會用“很犀利的眼光”或“符合聖經的話語”來和我們一一細數為何當代教會的罪狀、教會的問題、為什麼讓離教者想離教、好讓我們覺得：「對！是啊，就是如此\u0026hellip;\u0026hellip;.」的感同身受。但是，他卻以「美善的異化」帶過這些問題，談到教會有壞的地方卻也有好的地方，他寫道：「\u0026hellip;\u0026hellip;.或許，這是我作為『神職人員』的使命吧\u0026hellip;\u0026hellip;.為此，這幾年我不停得寫。寫了許多教會的不是，教會如何傷害了信徒，教會可以如何改善。其實我只是沒有放棄教會。我若放棄了，我就沈默了」\n再談召命 我很喜歡作者們對於「自由」、「召命」、「喜樂」等等的看法，每一個對我來說是種提醒或再思考。比起那種傳統的屬靈書籍說的，他們卻看見在這現實世界當中的「真實」，以至於在這兩者之間搭起連結\n我以本書的談到關於召命的某一段為例\n「因此，無論是召命還是理想，說到底，其實都是一種人活著的自我追尋與反省，人類是很特別的上帝創造，人類不只是活著，他還會同時思考自己的『活著』\u0026ndash; 為何而活？為誰而活？怎樣去活？生命從來都不只是漫無目的地活著」\n「\u0026hellip;\u0026hellip;.事實上，這正是華人教會這十多年所提倡的『聖俗不二分的職場神學』，強調信徒在俗世工作中可以尋見上帝的召命。\u0026hellip;\u0026hellip;我認為，這說法在當今資本主意越來越行不通。資本主義徹底扭曲了上帝的召命。從前『職業』的存在是為了服務他人\u0026hellip;\u0026hellip;不過，自從資本主義的興起，工作的本質就隨之改變了。工作淪為企業賺取營利的過程，人們的職業不在被視為天職了，服務失去了本來的神聖使命，他只是導致最大利潤的途徑。」\n書中簡單地闡明：「召命：就是為別人而活，而同時完滿自己的生命」\n離教者離的不是上帝，而是教會 在這本書的最後，老師寫道：「離開教會，某程度來說，是的，沒有很大分別。你不會因此而變好，或變差; 迷失，或釋放; 得益，或虧損;這些事情的邏輯並不是如你從前的想像。你不用想像自己離開教會後會變得墮落或沒有墮落。因為這全都不是教會存在的意義與目的。反之，對我來說，教會是使命。不是計較好處或不好處。教會不只是基督徒的聚集，而是基督徒們的使命。教會是基督的身體，因此它的存在沒有別的，就是在地上傳揚基督。教會是見證上帝的群體。因此，你離開了教會，你不會因此而受任何虧損。你離開了教會，只標誌著妳離開了以教會的形式去傳揚基督」\n而他以電影「沈默」為例，談到在那部電影裡面的「信仰」：「沈默成為信仰的另一種型態。沒有聖物做媒體，上帝似乎是沈默的\u0026hellip;\u0026hellip;沈默，卻存在著。不是『基督徒』，不是『教會』。上帝卻在這『不是』中存在」\n那天學長對我說的話\u0026hellip;\u0026hellip; 記得前幾個禮拜三，我跑去找了一位在讀神學院的學長敘舊。他質疑我怎麼出社會幾年來信仰一直都在搖擺的階段呢？\n是啊，出社會兩年多以來，又換了一間教會、如果從大學四年算起來，幾乎每一年就會換一間新的教會（筆者我大學四年換了三間教會\u0026hellip;\u0026hellip;.），我也想問問自己，**為什麼我的信仰在搖擺呢？**找不到可以委身的教會、也找不到可以穩定服事的機會或位置？\n後來想想，一定要有一間委身的教會才能成長嗎？一定要有服事的位置才可以更親近上帝一些嗎？就好像有一套「正確基督徒的生活姿勢」叫我們一定要遵守這個公式，就會到達幸福。\n說真的，我不信「委身教會」這一套。\n快樂是一種超越 這本書有趣的談到「快樂」這一件事情，談到快樂是一種超越，既然是一本神學院老師與離教者的對話錄，當然也談到「信仰」的部分，雙方幾乎定調信仰為一個「往前走的旅程」、是生命，老師更以「信仰，就是不斷的跳躍」來闡述信仰的連續性、過程。\n另外藉由這本書，我又認識了一個很厲害的作家，我蠻喜歡作者Charis，也就是作為離教者方的文筆，他每每敘述一些他所觀察到的問題與現象，總是可以打進我的內心：「這也是我想要問的！」\n如果大家有興趣可以看看他的medium ，如果想更多了解他的話可以參考這篇文章：我是仍在尋找信仰的基督徒 — 洪麗芳 Charis在這本書一開始談到：「我是問題少女，是想要問問題的信徒，但不代表我有問題。我不是在追求斬釘截鐵的答案，只是渴望有人可以和我同行、思考、探索、實踐。」\n小君：「me, too !」\n所以，離教還是留著？ 其實在看這本書的過程，同時多多少少也有點治癒我對於「上帝你為何要創立教會在這個世界中」的不滿。緩和了我和教會之間的分分合合的「張力」\u0026hellip;\u0026hellip;.. 因此原本想以「神學院老師」的角度切入，在這篇讀書心得最後想立下約定：「只是我不放棄教會」\n然而在現實生活中卻也發生了一些事情，那些事情的「對與錯」其實沒有那麼重要。站在另外一方的角度想：「沒錯，我是做錯了，應該被嚴厲的譴責、煞車」，我確實知道自己是錯的！但是以我自己的角度想：「何錯之有？」因此，雙方的認知點不同，自然就產生這中間極大的衝擊和張力，倘若又加入「個人化的情緒」和「未經修飾的口語或文字」，於是這樣的一個衝突事件誕生了。\n慢慢的兩三天以後，就會放下這事情和情緒\u0026hellip;\u0026hellip;.. 激動的文字、言語會褪去，慢慢的這樣的衝突事件反倒會給我個人的「神學思考」，我並不會完全討厭這個人或以敵人的姿態去看待他，我重新思考我在教會的存在和個人真實在教會的感受，以一個更高的角度來看待我和教會，而不是專注於事件本身，最後我覺得我想要離開，因為我確實與教會格格不入，我覺得自己不適合待在教會了，如同Charis ㄧ樣。\n或許某一天，你會看到我回去教會、也或許是看到我到別的教會了，或者，我就索性不回教會了吧（因為到哪間教會其實都是有著一樣的問題）？！\n作者陳韋安在書中有個蠻有趣的敘述\n「返教會」這三個字，其實已經暗示了基督徒的生命根源。我們不會「返」一個不屬於自己的地方，我們只會「返」一個本來屬於自己的地方\n或許改天我也來寫類似這種「暗黑系」的文章好了，只是不知道會不會在這偌大網路中遇見一位同樣粉色系的基督徒長輩級人物呢？哈哈\n小君曰：「信仰是一種旅程，對於離教者而言，僅僅是沒有名為『教會』的載體而已」\n","date":"Nov 16, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%AF%AB%E7%B5%A6%E6%88%91%E5%BF%83%E4%B8%AD%E5%B0%9A%E6%9C%AA%E5%B4%A9%E5%A3%9E%E7%9A%84%E5%9C%B0%E6%96%B9/","series":null,"smallImg":"","tags":["寫給你心中尚未崩壞的地方"],"title":"寫給我心中尚未崩壞的地方"},{"categories":["程式"],"content":"資料庫的設定 修改env 檔 1...(略) 2DB_CONNECTION={填入你的db 類型} 3DB_HOST= {填入你的db server} 4DB_PORT={填入你的db server port} 5DB_DATABASE={填入你的db name} 6DB_USERNAME={填入你的db user name} 7DB_PASSWORD={填入你的db password} 8...（略） 關於migration 的指令 1php artisan make:migration {name} (--create={table}/--table={table}) 2php artisan migrate # 執行migrate 3php artisan migrate:rollback #恢復上一版本得migration 4php artisan migrate:reset #重新reset 5php artisan migrate:refresh #重新建立 補充：除了make migrate 的指令其他都可以在加入 --seed 以順便一起跑seeder\n","date":"Nov 5, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-migration%E7%AD%86%E8%A8%98/","series":null,"smallImg":"","tags":["laravel","migration"],"title":"laravel-migration筆記"},{"categories":["讀書心得"],"content":"最近讀了一本書：「關於基督徒，我們說的其實是」\n其實，我原本最想看的是：「寫給你心中尚未崩壞的地方」，因為當時去校園書房，校園姊姊居然另外推了我另外一本粉紅色封面的書：關於基督徒，我們說的其實是\n說，這個作者也有寫了另外這一本書，看你要不要考慮買一下,呵 在沒有太多思考下就買了這本書。\n這本書唯一美中不足的地方是：有些香港的用語，其實讀起來並沒有那麼順。但其實只要google一下應該就可以查得到。\n其中我有幾個蠻喜歡的篇幅，節錄給大家：\n如何明白「如何明白神旨意」的意思 其實「如何明白神旨意」這八個字，某個程度上假定了一個認知程序：「一個人要先參透上帝的旨意，然後才按著被參透的旨意而行。」換句話說，就是先知而後行 問題是：「神的旨意，你是不能測度的」\n其實，上帝跟你計較的，不是明白的問題，而是活出來的問題。,可能會問：「不明白怎能活出來？」我們反而要問：「任何事情都要先參透才能行嗎？」信，豈不是未見之事的確據嗎？在我們的生命中，豈不是往往都要在無法完全參透未來的情況下才活出的未來嗎？你不是神，你豈能像上帝一樣預見前路才往前走呢？因此，重點不是明白神的旨意而是活出神的旨意。\n路，是要選擇的。但是，方法不一定是上帝指示你走哪一條，也不一定是上帝教導你如何選擇，而是祂必定會在「道路的分岔口」指引你，好讓你能夠自己做出選擇，沒錯，選擇的那一位，仍然是你\n其實不是叫你做鹽做光 耶穌只是簡單直接的說：「你們就是！」 怎麼可以使鹽不鹹呢？什麼樣的鹽是不鹹的？ 「沒有被人品嚐過的鹽，是不鹹的。 放在鹽瓶裡面的鹽，是不會鹹的。因為他沒有被品嚐」\n基督徒的存在，就是讓人嚐到耶穌基督的滋味\n成聖還是成長 成聖，其實是一個最遙不可及的詞,來就是上帝獨有的狀態 在「成聖」的事情上，我們只是西瓜，只是羽毛球，上帝才是成聖的主語，不是你成為了聖，而是上帝「成聖」了你,聖是耶穌基督為我們向父神的禱告 耶穌沒有立刻用神蹟把我們一個一個的「變成聖」，乃是要讓我們在人生裡面一步一步的體驗成聖。這個過程就是我們基督徒的「成長」 我們不是成聖的主語，但是我們卻是成長的主語。\n退無可退的退休會 不過，其實這經文並不是這個意思。「你們要休息，要知道我是上帝」。其實不是講休息，原文那個字不是解作「休息」，其實解作「收手、罷手、放低」。 安息日是一個確據，一個記號，一個sign，叫你們知道主是你的上帝 人們都在說恩典 恩典這個詞背後，其實是我們對上帝恩典的真實經歷。當我們真正體會基督在十架上的捨身，當我們體會到那份真實，那份震撼的時候，我們就大概要尋找一個「代名詞」來表述生命裡頭那份震撼。 寫給錦恩的信 感恩，就是發現自己在上帝面前的缺乏，發現原來自己只是一個得到麵包的乞丐，一個從來沒有打算當乞丐的人，一個只想利用上帝美化自己生命的人，他的感恩，只是一種炫耀。 聽從最難的地方是聽從 因此，信仰從來都不是玄妙的學問，或者應該說，任何更深奧的信仰知識，他的實踐永遠都是具體的。知識是實踐的方向。沒有了知識，我們的實踐就會走錯方向。然而單單只有知識，卻沒有實踐，他什麼都不是 我最近靈命不好 靈命不是「屬靈部分」的生活，而是整個與聖靈同行的生活,命就是在人的軟弱與無數順服的失敗中，看見上帝更無數恩典的過程 其實還有很多章節蠻有印象的。\n總之，是一本集合各種信仰心靈雞湯的書，可能是因為最近的信仰比較軟弱，所以讀起來有些收穫、或者更是提醒。\n其實，基督徒的生命就是每天每一時每一刻的學習與上帝同行，可能會高山、也可能會低谷的一連串過程。\n小君曰：終於可以看那本黑色封面的：寫給你心中尚未崩壞的地方！\n","date":"Nov 4, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%9F%BA%E7%9D%A3%E5%BE%92%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E8%AE%80%E9%97%9C%E6%96%BC%E5%9F%BA%E7%9D%A3%E5%BE%92/","series":null,"smallImg":"","tags":["基督徒"],"title":"基督徒是什麼？讀關於基督徒"},{"categories":["程式"],"content":"最近因為工作，嘗試使用Laravel 更新我目前手上的專案網站。恩\u0026hellip;\u0026hellip;這陣子使用心得有二\n(1) 真的好好用阿\n(2) laravel 真是博大精深，因為用一套framwork 就要跟隨那一套framework的規則走，有時候都覺得laravel 怎麼可以設計得這麼活!!! 原來還可以這樣寫XDDD\n關於小弟的PHP旅程 小弟一開始，是認識到CMS，從而知道當時算是CMS界的霸主(不知道現在還是不是XD)–WordPress! 當時使用著使用著，還蠻方便的!! 而不知道為甚麼，可能我真的很喜歡寫程式使然~ 記得一開始入坑是因為一支很屌的Yahoo 即時通整人程式(哈哈 超屌的!! 我都覺得厲害)，加上小弟讀資料處理科，當時學習的是Visual Basic，而且學的還不錯 ,基於被整就要整回去的「報復心態」，開始從整人程式起家\u0026hellip;\u0026hellip;.寫一些讓電腦關機、無限迴圈等等超無聊的小把戲\u0026hellip;.到了大學讀資管系，有一陣子荒廢了這部分\u0026hellip;..直到某個時候wordpress ，也不知道為甚麼的，居然開始撰寫wordpress 佈景主題，小弟寫了兩套，分別是 FangJRdesigner 和本站所使用的JimmyFDesginer 說真的，前面那一套我已經懶得更新了，或許後面這一套會持續在更新(畢竟是本站在使用的，小弟也不知道會不會有空XD) ，漸漸的，我學習及撰寫PHP 純Script 已經好一段時間，當然這段期間也因為CMS界打滾認識到Jommla 和Drupal 等用php 所寫的cms，但最後我還是選擇用Wordpress 架站。\n這幾年藉由認識到Hahow 這個募資課程網站，正好有人在教Laravel ，說來也巧小弟也存了一些錢，加上早以心儀framework已久(一直苦於沒有師傅領進門以及沒有恆心毅力學習)，後來就馬上買了那門課程，在上課的過程，發現Laravel 的好用之處以及為甚麼大家都這麼推framwork~~~\n但是聽得看得都比不上實際做的，說真的最近才有時間去用laravel 更新我的專案，藉由實做的過程中，漸漸得認識到底甚麼是MVC 到底甚麼樣的方式可以寫讓人看得懂得程式。 最近因為一些工作上的挫敗以及最近在學Laravel 漸漸體認到 雖然解決問題很重要，但要寫出一個讓人看得懂得程式碼及有藝術的程式碼也是很重要的!\n使用Laravel 做一個超級簡單的部落格 對我來說，如同前面我寫的文章(傳送門 )，不過建議大家還是要對於php 物件導向有個簡單基礎的認識，這樣才大概比較了解我所寫的(可能也不會?!)，這裡不做太難的東西，就單純對文章的CRUD而已，以及使用者的登入登出\u0026hellip;..兩個表：User 和 Post\nDB migration Laravel 的設計者真的很聰明，以前我從沒想到，原來db schema 是可以帶著走的，而且藉由env的設計，就算上傳了git 只要我不上傳真正的env(保護自己的資料)，藉由一些簡單的步驟 也可以無痛轉移! 真的超強!\n首先，我們必須先新增一個migration 檔\nphp artisan make:migration create_post_table --create=posts\n只要下了這個指令就可以做一個create db table schema，接下來你只要在database 資料夾下migrations 底下\n[日期時間戳記]_create_post_table.php 定義好你要的欄位，請參考以下網址 ，這樣，你就很簡單的下一條指令\nphp artisan migrate\n如果你在env 對db的連線夠正確的話，應該會很成功的在你的資料庫看到你定義的東西\n如果有噴錯的話請不要害怕(解決之道在此 )，google 和 stackoverflow會是你的好朋友，由於篇幅及小弟太懶就不在此贅述了\n再來，我們必須定義文章的db schema，在 up function 裡面定義\n我是寫這樣的\n1Schema::create(\u0026#39;posts\u0026#39;, function (Blueprint $table) { 2 $table-\u0026gt;increments(\u0026#39;id\u0026#39;); 3 $table-\u0026gt;string(\u0026#39;title\u0026#39;); //文章標題` 4 $table-\u0026gt;text(\u0026#39;content\u0026#39;); //文章內容` 5 $table-\u0026gt;timestamps(); 6} 接下來，在下php artisan migrate就可以了，你應該可以在你的database 看到post table\n使用者的登入登出 太沒想到了! Laravel 居然可以這麼輕鬆的做到使用者登入登出還加上了註冊!! 一條指令就能解決\nphp artisan make:auth\n接下來在你的controllers 和 view 及model 都會出現一些小變化哦~ 可以去看看\n如果想要擋有使用者的輸入輸出可以用middleware !!!\nMVC mvc 其實說明非常的複雜，我的理解是 Model 是對於資料庫的\u0026quot;連接層\u0026quot;；Controller 處理過程的邏輯；View 則是頁面上的呈現\nlaravel 製作mvc的指令分別如下\nphp artisan make:controller [controller_name]\n(\u0026ndash;resource)` 加上resource 可以將laravel 原生的資料庫CRUD function 都會幫你宣告進去，至於要製作model 指令為\nphp artisan make:model [model_name]\n最後 view 的部分 請在view 的資料夾 裡新增 [view_name].blade.php 吧! 你必須先學會一點blade 語法，可以幫助你撰寫laravel 的 view。\n關於資料的CRUD Laravel 對資料的CRUD 採用了ORM 的方式，我簡單來說就是使用物件的方式管理資料庫\n如同前面我寫有關於資料的CRUD ，用純PHP 的方式我們必須同時也要了解SQL語法，這還不打緊，一不小心寫錯了SQL語法\u0026hellip;.還會噴一堆錯誤Trace code trace了半天\n關於詳細得CRUD 我覺得Laravel 的文件 其實也寫的很清楚，歡迎去翻閱看看\n首先，前面我說過MVC的架構，在Laravel 就是使用這樣的架構，所以我們先建立與資料庫密切相關的Model\nphp artisan make:model Post\n接下來你就會看到在App 資料夾底下會有一個 Post.php。\nLaravel 很聰明，為了防止別人惡意的大量新增，所以我們必須先設計哪些欄位可以做大量賦值的動作。在Post.php class 裡增加這一句話：\n1protected $fillable= [\u0026#39;title\u0026#39;, \u0026#39;content\u0026#39;]; 之後，要建立controller 與model 串連\nphp artisan make:controller PostController --resource\n接下來你就會在app/Http/Controllers/ 看到PostController.php\nMVC 的架構讓我們在實做文章的增刪改查上會有點複雜和麻煩，但好處是可以分隔所謂的邏輯和頁面。\n在PostController.php最上面先宣告使用的ModelUse App\\Post;\n接下來就進入CRUD的邏輯世界了，我這裡簡單的寫一下，可以的話請直接參考這裏 並且還要注意REST_ful URL 的規則，REST_Ful URL就是將網址做為一個可以執行操作的工具，例如下url/$id，就會去索取id為$id的url實體，藉由URL的樣式我們可以做像database的操作感覺。(說的那麼爛，有請wiki 大神 救援)\n總而言之，在Laravel 裡有個Routes 的資料夾，分別有api.php web.php 等等檔案，有點類似說要定義laravel 這個程式該\u0026quot;怎麼走\u0026quot;，例如post/ 就會到post 的首頁，要把post 裡所有的資料都列出來。\n之後請在Routes/web.php裡面添加這一行:\n1Route::resource(\u0026#34;posts\u0026#34;,PostController); resource 的方法就是讓在這個地方底下，添加對於PostController 的CRUD 等功能。\n(這裡我就姑且不寫驗證了\u0026hellip;\u0026hellip;)\n新增 呈現頁面為create function ；真正寫入資料庫的邏輯為store function 1$post=Post::create($request-\u0026gt;all()); 2return redirect(\u0026#39;post\u0026#39;); 查詢 1return view(\u0026#39;show\u0026#39;)-\u0026gt;withPost(Post::find($id)); 修改 呈現頁面的為edit function ；真正更新的邏輯為update function 1$post=Post::find($id); 2$post-\u0026gt;update($request-\u0026gt;all()); 3return redirect(\u0026#39;post\u0026#39;); 刪除 在destroy function 中 1$post=Post::find($id); 2$post-\u0026gt;delete(); 3return redirect(\u0026#39;post\u0026#39;); 另外在頁面實作中，請在resource/view 資料夾當中新增 以.blade.php 為附檔名的檔案，注意REST_Ful URL 的規則。在form 裡面要記得呼叫 method_field(接PUT 或者 Delete) 以及 csrf_field()，這裡我就真的不繼續詳述了，因為都是HTML 和CSS 以及Blade 的用法\n總結 好吧! 我個人其實覺得我寫得很不像一個教學文章\u0026hellip;.我自己以後會好好學習寫一個教學文章的，只是對Laravel 的一個學習及筆記吧(可能只有我看得懂哈哈XDDDD)\n這裡是原始碼 ，請大家服用!\nLaravel 的世界很廣，真的有好多好多需要學習的喔，最後還是要詳看文件 看文件 看文件 很重要所以說三遍\n小君曰：Laravel也有一個很不錯的CMS 教做 October-CMS 超酷的!!! 或許改天我就跳坑了吧XD\n","date":"Nov 4, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/laravel-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E7%94%A8laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E8%B6%85%E7%B0%A1%E5%96%AE%E7%9A%84%E6%96%87%E7%AB%A0crud/","series":null,"smallImg":"","tags":["crud","laravel","php"],"title":"Laravel 使用心得:用laravel 做一個超簡單的文章CRUD"},{"categories":["Side Projects"],"content":"之前六角學院出了一堂課程：使用 gulp 進行網頁前端自動化 ，相當推薦!\n說真的，在畢業前我就大概知道gulp 的大名，自己的印象就是類似前端的工具\u0026hellip;\u0026hellip;但始終沒有特別著墨這一塊，直到我最近關注六角學院出了這門課，恰巧手上又有一些閒錢，就發憤買了這門課，藉此做為好好學習gulp的機會和理由。\nGulp 是甚麼? Gulp 在我目前的使用與理解上就是一個可以將前端工作流程(前端工程)給與\u0026quot;自動化\u0026quot;的一項工具，藉由\u0026quot;gulpfile.js\u0026quot; 定義出各式各樣的\u0026quot;工作任務\u0026quot;，加上gulp 的一些配合外掛與套件，可以進行壓縮js 和css 、scss 或搬移檔案的動作。詳情可以請問 wiki 大神甚麼是gulp 。\n話不多說，先做一個簡單的範例吧，這是一個可以把html copy 到指定地方的工作任務\nPS: 請先預備好工作環境，npm 還有souce 資料夾，(當然你也可以定義您的資料夾名稱)等，如果可以，再多裝個yarn (比npm還快的npm，但不是npm 請看介紹 阿 npm 只是拿來安裝yarn 的XD ) 先npm install 或者yarn install 之後在資料夾裡新增一個新檔案:gulpfile.js\n說明：\n接下來使用gulp 後面接你所定義的task name 即可執行，如上範例 就是在CMD Key \u0026ldquo;gulp copyHTML\u0026rdquo; ，就可以將source 資料夾裡所有.html 檔名的檔案搬到 public資料夾下(如果沒有public 他會幫你建一個!! )。\n如果你只想key gulp 就可以執行也可，只要在gulpfile.js 定義gulp.task(\u0026lsquo;default\u0026rsquo;, [/後面接task 陣列/]); 就可以，如上所示就是 gulp.task(\u0026lsquo;default\u0026rsquo;, [\u0026ldquo;copyHTML\u0026rdquo;]);\n當然啦，gulp 如果只能拿來做搬檔案，其實用Python 也可以阿! 幹嘛需要用gulp? gulp 真正的妙處是在可以利用各式各樣的外掛套件 多樣化並豐富前端工作，像是gulp-sass 可以將sass的檔案轉成css、用gulp-concat合併css 和js ,甚至也可以利用套件壓縮css 和js 的檔案大小、gulp-jade 更能將 jade 的檔案轉譯成.html，別在這裡問我jade 是甚麼? jade 就是 html 前置的樣板語言，和scss/sass 之於css 有點像，不知道jade 是甚麼請由此進 。 對了 如果你直接在google 搜尋打\u0026quot;jade\u0026quot; 會搜尋到\u0026quot;玉\u0026quot;，因為它改名為 \u0026ldquo;pug\u0026rdquo; 了阿XDDDD\n如果很認真沒錢的同學，歡迎去自行google 搜尋 \u0026ldquo;gulp 教學\u0026rdquo;，和我一同進入 gulp 的世界，如果有點閒錢，還不用1000元，歡迎來六角學院和我一起當同學喔! 老師教得都很詳細、而且每個禮拜有問答會，可以把你碰到的問題提出來(不過或許是工程師性格使然，我都沒有問甚麼問題，自行google 比較多\u0026hellip;\u0026hellip;)\n為甚麼用Gulp 來做履歷? a.工程師就應該要有不被104 和其他找工作網站所限制履歷的權利阿(誤?!\nb.工程師就應該要有自己的工程師履歷阿，像我很喜歡和崇拜的Robby Leonardi 大神的履歷 (大誤?!\n好啦，因為六角學院的老師在課程上有介紹了gulp-data 的套件，我個人相當喜歡，可以說是愛上這個東西，可以先將預先寫好的json 檔串接，傳到前端的jade 去渲染出html 。 這真得是很酷! 另外，近來在許多的研討會或課程中老師或講者很多都用所謂的json 來顯示自己是誰，於是讓我就有這個用gulp 來做履歷的project 和 idea。並且我有著後端工程師的一個基本素養，未來的作品和經歷是會越來越多的，如果使用寫死的\u0026quot;html\u0026quot;呈現自己的履歷實在是\u0026quot;太白癡\u0026quot;? 重複的html code 太多，為何不用jade 的each 呢?\n做法與想法： 我是個很懶的後端工程師，所以我並沒有想要像Robby 大神用畫圖阿、客製化強大的css 和js 去製作他的履歷(覺得他也很用心的花很多時間)，當然也是我目前還沒達成這樣的境界?!(希望未來可以達到 😎 ) ，所以我的頁面很簡單，就是一些自己寫的一些小js 和 scss 檔(用gulp 把scss 轉為css)， 然後用gulp-concat 和main-bower-files 這個可以將bower 和 gulp 對接的工具將bower 引入的\u0026quot;boostrap\u0026quot;、\u0026ldquo;jquery\u0026rdquo;、\u0026ldquo;animate.css\u0026rdquo;、\u0026ldquo;font-awesome\u0026rdquo;、\u0026ldquo;wow.js\u0026rdquo; 與我自己客製的包起來並壓縮。\n最後，用gulp-data 和jade 語法相互配合把自己的履歷網頁刻出來，在這裡，我只想示範 gulp-data 的那段code 而已\n接下來，就是jade 檔的事情了，想辦法將收到的data 整理出來寫在網頁上， 如果要看code 請至此 遇上gulp-ghPages 的雷 在 gulp 的課程中，講師有講到 gulp-ghPages 這個外掛，這讓我的眼睛為之一亮，因為我只要用gulp 就能簡單部屬我的履歷，就不用打一堆git 指令之類bla bla 的 讓開發與發布可以分得乾乾淨淨的，附帶一提，gh-page 就是github 可以提供給\u0026quot;靜態網頁\u0026quot;的空間。 可以做為一個簡單的預覽。\n然而，我卻遇上了\u0026quot;fatal: could not read Username for \u0026lsquo;https://github.com \u0026rsquo;: \u0026quot; ，或許是因為我不止開發了這個resume 的小專案，另外我還有開發了一些東西，我使用的是 vs code，在git global的設定上，好像我沒有設定github 的設定，記得每一次我在git-push 都會出現視窗問我github 的帳號與密碼\u0026hellip;\u0026hellip;。 呵呵 卡關了一陣子\u0026hellip;.最後Goolge 到這個解答 。雖然不是gulp-ghpage的關係，但其實狀況有點像，大概都是git 的設定上問題，看著他們的討論串，看到這一段\n1The detail step: 2 1. go to your local git project directory, open \u0026#34;.git/config\u0026#34; file and delete the \u0026#34;[remote \u0026#34;origin\u0026#34;]\u0026#34; section. 3 2. go to git bash and input \u0026#34;git remote add origin https://{username}:{password}@github.com/{username}/project.git\u0026#34; 4 3. input git push to check if it works. 意思是說，\n首先第一步，將.git/config檔案裡有關於 [remote \u0026ldquo;origin\u0026rdquo;] 的區塊砍掉(windows 用戶請將資料夾選項-\u0026gt;顯示隱藏的資料夾、檔案和磁碟機，你就會看到.git 資料夾了 )\n第二步 key 上 \u0026ldquo;git remote add origin https://{username}:{password}@github.com/{username}/project.git\u0026rdquo; (username和password 是你的github 的username 和password 以及project 是你目前所做的project name )\n當然啦，我也是可以去修改git 的設定，只是小弟搜尋了很久都找不太到怎麼修改(有點忘了)，所以就換了這個奇怪解法。\n心得與收穫 終於，歷經了快一個月(含學習時間)?! 將這個夢想中我想做的side project \u0026ldquo;工程師履歷\u0026quot;做出來，之後除非是要新增甚麼區塊，總之我只要修改 我設計的 json 檔 and gulp 和 gulp deploy 就可以自動化我的履歷拉(尤其對於作品和經歷、專長等大大有幫助 )! 這大大方便以後的履歷更新。 如果各位有關於此類相關更好的建議或做法歡迎再下面與我討論XD\n小君曰：人生中能做出多少個 side project 呢?\n","date":"Nov 4, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E5%88%A9%E7%94%A8gulp-%E8%A3%BD%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B1%A5%E6%AD%B7/","series":null,"smallImg":"","tags":["gulp"],"title":"利用Gulp 製作自己的履歷"},{"categories":["鐵人賽"],"content":"最後一天，終於寫到這裡\n第一次參加鐵人賽，很幸運的可以連續30天完成。甚至有些時候差點要超過時間完成不了鐵人賽看了之前鐵人賽的文章，似乎過了一段時間在完成30天就會把挑戰第幾天凍結。（我也想要有鐵人煉成的成就啊～～\n說真的這次給了我一個經驗，就是下次可能也要預先存幾個草稿好讓我可以之後準時發布我覺得也感謝我這次參加鐵人賽的經驗，讓我有機會好好整理Python的學習\n總之，我來談談這次Python鐵人賽沒談到的遺珠之憾吧同時也是我之後會繼續專研的方向\n基本與物件導向 多執行緒的議題 更深入的 Django和Flask 更深入的Pandas 關於機器學習/人工智慧：TensorFlow+Keras 其他爬蟲的框架：scrapy MapReduce 和 Spark 或Handoop 個人自己有看過的書籍而且覺得不錯\nPython初學特訓班 Python 自動化的樂趣：搞定重複瑣碎\u0026amp;單調無聊的工作 Python新手使用Django架站的16堂課：活用Django Web Framework快速建構動態網站不過這本架站的16堂課已經是舊版，如果要新版的請至此（Python新手使用Django架站技術實作：活用Django 2.0 Web Framework建構動態網站的16堂課）https://www.books.com.tw/products/0010790747 個人推薦相關線上課程\nhttps://morvanzhou.github.io/ Youtube Hahow 也有相關Python的課程，我自己在上的有：「Python 網頁爬蟲入門實戰」和「用 Python 理財：打造小資族選股策略」 ","date":"Oct 30, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E9%90%B5%E4%BA%BA%E8%B3%BD%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 鐵人賽：遺珠之憾"},{"categories":["鐵人賽"],"content":"今天來說說資料分析的Python modules — pandas\n首先我們來安裝他\n1pip install pandas 接下來我要介紹在pandas兩個資料結構 Series 和 DataFrame他們的宣告很簡單，而且樣式也是很簡單，首先是series\n1import pandas as pd 2 3l = [1,2,3,56,7,7,73,3,3,2] 4 5date = pd.date_range(\u0026#39;20180731\u0026#39;,periods=10) 6s = pd.Series(l,index= date) 7print(s) print(s)接下來你就會看到\n12018-07-31 1 22018-08-01 2 32018-08-02 3 42018-08-03 56 52018-08-04 7 62018-08-05 7 72018-08-06 73 82018-08-07 3 92018-08-08 3 102018-08-09 2 11Freq: D, dtype: int64 所以series 很簡單，你可以想像成一個關係數列，然後之後我們可以藉由呼叫這個series的各種方法，如下\n1print(s.loc[\u0026#39;20180731\u0026#39;]) #因為index 是時間可以這樣呼叫=\u0026gt;1 2print(s.loc[\u0026#39;20180731\u0026#39;:\u0026#39;20180802\u0026#39;]) #因為index從2018-07-31到2018-08-02 的值 3\u0026#39;\u0026#39;\u0026#39; 42018-07-31 1 52018-08-01 2 62018-08-02 3 7Freq: D, dtype: int64 8\u0026#39;\u0026#39;\u0026#39; 9print(s.iloc[6]) #也可以用index喔（從0開始）--\u0026gt;73 10print(s.iloc[5:7]) #iloc 最後一筆不算，所以會從5-6 11\u0026#39;\u0026#39;\u0026#39; 122018-08-05 7 132018-08-06 73 14Freq: D, dtype: int64 15\u0026#39;\u0026#39;\u0026#39; 16print(s.max()) #最大值 --\u0026gt;73 17print(s.min()) #最小值 --\u0026gt;1 18print(s.mean()) #平均值 --\u0026gt;15.7 19print(s.std()) #標準差 --\u0026gt;26.106831800635376 還有其他的方法，請大家可以自行參考這裡。https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.Series.html 再來，我要介紹關於dataframe的部分，dataframe簡單來說就是許多series組成的\n1import pandas as pd 2 3date = pd.date_range(\u0026#39;20181029\u0026#39;,periods=3) 4s1 = pd.Series([1,2,3],index=date) 5s2 = pd.Series([4,5,6],index=date) 6s3 = pd.Series([7,8,9],index=date) 7df = pd.DataFrame() #empty dataframe 8df = pd.DataFrame({\u0026#39;c1\u0026#39;:s1,\u0026#39;c2\u0026#39;:s2,\u0026#39;c3\u0026#39;:s3}) 9print(df) print df就會長得像這樣\n1 c1 c2 c3 22018-10-29 1 4 7 32018-10-30 2 5 8 42018-10-31 3 6 9 同樣的，他也和series支援很多方法\n1df.loc[\u0026#39;2018-01-05\u0026#39;] 2\u0026#39;\u0026#39;\u0026#39; 3c1 2 4c2 5 5c3 8 6\u0026#39;\u0026#39;\u0026#39; 7df.loc[\u0026#39;2018-01-01\u0026#39;:\u0026#39;2018-01-02\u0026#39;,[\u0026#39;c1\u0026#39;,\u0026#39;c2\u0026#39;]] 8\u0026#39;\u0026#39;\u0026#39; 9 c1 c2 102018-01-01 1 4 112018-01-02 2 5 12\u0026#39;\u0026#39;\u0026#39; 13df.iloc[1:3,[2,1]] 14\u0026#39;\u0026#39;\u0026#39; 15 c3 c2 162018-01-02 8 5 172018-01-03 9 6 18\u0026#39;\u0026#39;\u0026#39; ","date":"Oct 29, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B3%87%E6%96%99%E7%A7%91%E5%AD%B8%EF%BC%9Apandas/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 資料科學：Pandas"},{"categories":["鐵人賽"],"content":"寫到這裡真的覺得自己下次要參加鐵人賽要想清楚。 要規劃好內容，也可能自己要寫一些存擋備份（不知道那些完成鐵人賽的是不是都是這樣？）\n不然有時候寫到後面，真的不是很想繼續寫下去、也覺得自己寫的內容有點爛ＸＤ\n也或許自己寫的這個技術並不是自己最在行的，而是自己下班的閒暇之餘所寫的，所以如果有錯或者有什麼提供建議再精進的方向給我！\n今天要介紹Flask首先，就是要先安裝flask啊！\n1pip install flask 接下來建立我們的檔案 index.py\n1from flask import Flask 2app = Flask(__name__) 3@app.route(\u0026#34;/\u0026#34;) 4def hello(): 5 return \u0026#34;Hello World!\u0026#34; 6if __name__ == \u0026#34;__main__\u0026#34;: 7 app.run() 最後我們執行index.py就會看到類似底下的訊息\n1 * Serving Flask app \u0026#34;index\u0026#34; (lazy loading) 2 * Environment: production 3 WARNING: Do not use the development server in a production environment. 4 Use a production WSGI server instead. 5 * Debug mode: off 6 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) 接下來輸入http://127.0.0.1:5000/ 到瀏覽器裏就會看到Hello World 囉\n","date":"Oct 28, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Aflask/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 網頁：Flask"},{"categories":["鐵人賽"],"content":"今天，想把Django篇先結束ＸD\n昨天，我們已經將post這個表註冊到後台並且已經migrate它現在，我們要開始做前端的畫面並且能夠顯示。 這非常的陽春，如果需要更加深研的請歡迎自行搜尋\n首先你會好奇為什麼在後台儲存資料卻是post object，原因是你沒有設定要顯示的什麼東西\n所以在這裡請編輯models.py\n1from django.db import models 2from django.utils import timezone 3 4# Create your models here. 5class Post(models.Model): 6 title = models.CharField(max_length=200) 7 slug = models.CharField(max_length=200) 8 content = models.TextField() 9 pub_date = models.DateTimeField(default=timezone.now) 10 11 def __str__(self): 12 return self.title 加入 ＿str__ 方法並回傳他要回傳的名稱這樣就可以在後台看到標題了\n然後請編輯一下blog/urls.py\n1# ...（略） 2from django.contrib import admin 3from django.urls import path 4from mblog import views 5 6urlpatterns = [ 7 path(\u0026#39;\u0026#39;, views.homepage, name=\u0026#39;homepage\u0026#39;), 8 path(\u0026#39;admin/\u0026#39;, admin.site.urls), 9 10] 將mblog/view.py引入，然後宣告首頁指向他\n接下來編輯views.py\n1from django.shortcuts import render 2from .models import Post 3 4# Create your views here. 5def homepage(request): 6 posts = Post.objects.all() 7 context = { 8 \u0026#39;posts_list\u0026#39;: posts 9 } 10 return render(request, \u0026#39;homepage.html\u0026#39;, context) 定義一個hombepage 方法，然後宣告他要傳的template 為homepage.html\n最後請在mblog 裡面新建一個資料夾:templates，裡面有一個新檔案加入homepage.html\n1{% if posts_list %} 2 \u0026lt;ul\u0026gt; 3 {% for post in posts_list %} 4 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt; 5 {{ post.title }}\u0026lt;/a\u0026gt; 6 \u0026lt;/li\u0026gt; 7 {% endfor %} 8 \u0026lt;/ul\u0026gt; 9{% else %} 10 沒有文章可以顯示 11{% endif %} 這樣一個簡單的文章列表就會產生\n此時我們的資料夾結構\n1├── blog 2│ ├── __init__.py 3│ ├── __pycache__ 4│ │ ├── __init__.cPython-36.pyc 5│ │ ├── settings.cPython-36.pyc 6│ │ ├── urls.cPython-36.pyc 7│ │ └── wsgi.cPython-36.pyc 8│ ├── settings.py 9│ ├── urls.py 10│ └── wsgi.py 11├── db.sqlite3 12├── manage.py 13└── mblog 14 ├── __init__.py 15 ├── __pycache__ 16 │ ├── __init__.cPython-36.pyc 17 │ ├── admin.cPython-36.pyc 18 │ ├── apps.cPython-36.pyc 19 │ ├── models.cPython-36.pyc 20 │ └── views.cPython-36.pyc 21 ├── admin.py 22 ├── apps.py 23 ├── migrations 24 │ ├── 0001_initial.py 25 │ ├── __init__.py 26 │ └── __pycache__ 27 │ ├── 0001_initial.cPython-36.pyc 28 │ └── __init__.cPython-36.pyc 29 ├── models.py 30 ├── templates 31 │ └── homepage.html 32 ├── tests.py 33 └── views.py ","date":"Oct 27, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC2/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 網頁：Django- 來做一個部落格(2)"},{"categories":["鐵人賽"],"content":"昨天我們已經建立好部落格的大概專案結構，如下\n1├── blog 2│ ├── __init__.py 3│ ├── __pycache__ 4│ │ ├── __init__.cPython-36.pyc 5│ │ ├── settings.cPython-36.pyc 6│ │ ├── urls.cPython-36.pyc 7│ │ └── wsgi.cPython-36.pyc 8│ ├── settings.py 9│ ├── urls.py 10│ └── wsgi.py 11├── db.sqlite3 12├── manage.py 13└── mblog 14 ├── __init__.py 15 ├── admin.py 16 ├── apps.py 17 ├── migrations 18 │ └── __init__.py 19 ├── models.py 20 ├── tests.py 21 └── views.py 接下來我們就來快速建立一個部落格吧\n首先，我們主要work的資料夾都會在我們藉由startapp為起始的mblog資料夾內在models.py裡面做編輯，加入一個posts的表\n1from django.db import models 2from django.utils import timezone 3 4# Create your models here. 5class Post(models.Model): 6 title = models.CharField(max_length=200) 7 slug = models.CharField(max_length=200) 8 content = models.TextField() 9 pub_date = models.DateTimeField(default=timezone.now) 然後請記得***在blog全站設定的資料夾裡面的setting.py加入一行\u0026rsquo;mblog.apps.MblogConfig\u0026rsquo;***如下所示\n1# (略)... 2INSTALLED_APPS = [ 3 \u0026#39;mblog.apps.MblogConfig\u0026#39;, #加入這一行，將mblog的設定加入 4 \u0026#39;django.contrib.admin\u0026#39;, 5 \u0026#39;django.contrib.auth\u0026#39;, 6 \u0026#39;django.contrib.contenttypes\u0026#39;, 7 \u0026#39;django.contrib.sessions\u0026#39;, 8 \u0026#39;django.contrib.messages\u0026#39;, 9 \u0026#39;django.contrib.staticfiles\u0026#39;, 10] 11# (略)... 然後就是\n1python manage.py makemigrations 2python manage.py migrate django預設的資料庫就是他底下的db.sqlite3用資料庫的工具打開它你就會看到你的post表(mblog_post)在裡面了。\n另外，Django厲害方便的地方是自帶後台，請在mblog資料夾下的admin.py編輯\n1from django.contrib import admin 2# Register your models here. 3from .models import Post 4 5admin.site.register(Post) 將post 表註冊進入admin中，然後利用\n1python manage.py createsuperuser 這個指令創建後台使用者，然後\n1python manage.py runserver 就可以進後台(記得在網址後面加入admin)無痛開箱使用post表囉\n明天來講講怎麼使用前端的部分還有引入markdown的部分 就結束django這個旅程吧\n","date":"Oct 26, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E7%B6%B2%E9%A0%81%EF%BC%9Adjango-%E4%BE%86%E5%81%9A%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC1/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 網頁：Django- 來做一個部落格(1)"},{"categories":["鐵人賽"],"content":"今天講點關於django概念上的東西\n首先Django 的MVC不是傳統上的MVC ，而是MTVM- model.pyT- templatesV- View\n詳細介紹可以參考此網址：http://mropengate.blogspot.com/2015/08/mvcdjangomtv.html 而今天要架一個blog的網站，首先django有趣的是他有一個初始專案開啟的資料夾以外，還有一個專門放網站設定網站程式的資料夾。所以我們要撰寫用django 架設 blog時還要再下一個指令\n1Python manage.py startapp mblog 2#mblog 你可以用任何的名稱，只要不要和你本身目錄衝到 這時我們來看看目前程式資料夾的架構\n1├── blog 2│ ├── __init__.py 3│ ├── __pycache__ 4│ │ ├── __init__.cPython-36.pyc 5│ │ ├── settings.cPython-36.pyc 6│ │ ├── urls.cPython-36.pyc 7│ │ └── wsgi.cPython-36.pyc 8│ ├── settings.py 9│ ├── urls.py 10│ └── wsgi.py 11├── db.sqlite3 12├── manage.py 13└── mblog 14 ├── __init__.py 15 ├── admin.py 16 ├── apps.py 17 ├── migrations 18 │ └── __init__.py 19 ├── models.py 20 ├── tests.py 21 └── views.py 覺得很多嗎？ 不用擔心，其實我們改動的很少\u0026hellip;.大概很快我們就能用Django寫出一個部落格了\n","date":"Oct 25, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E7%B0%A1%E4%BB%8B/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python網頁篇：Django- 簡介"},{"categories":["鐵人賽"],"content":"現在開始來講用Python開發網頁，這一篇到後面幾篇來講講用Django 架設一個用markdown寫作的部落格。\n也藉著這個範例來說明一下django.\n首先，當然是要先安裝好django啦！\n1pip install django 然後要創建一個django的專案請使用\n1django-admin startproject {專案名稱} 2#我這裡就是專案名稱為blog 3django-admin startproject blog 你的資料夾結構如下\n1blog 2├── blog 3│ ├── __init__.py 4│ ├── settings.py 5│ ├── urls.py 6│ └── wsgi.py 7└── manage.py 接下來到blog的資料夾（或者你專案的資料夾下），使用\n1python manage.py runserver 接下來會出現一個網址，像我的訊息就是\n1Performing system checks... 2 3System check identified no issues (0 silenced). 4 5You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. 6Run \u0026#39;Python manage.py migrate\u0026#39; to apply them. 7 8October 24, 2018 - 14:12:00 9Django version 2.1.2, using settings \u0026#39;blog.settings\u0026#39; 10Starting development server at http://127.0.0.1:8000/ 11Quit the server with CONTROL-C. 接下來你只要在瀏覽器key上http://127.0.0.1:8000 就看到django的初始頁啦接下來我們一起好好研究Django吧！\n","date":"Oct 24, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python%E7%B6%B2%E9%A0%81%E7%AF%87%EF%BC%9Adjango-%E5%88%9D%E5%A7%8B%E7%92%B0%E5%A2%83/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python網頁篇：Django- 初始環境"},{"categories":["鐵人賽"],"content":"今天來講怎麼用Python怎麼讀取json.\njson 是一個資料表示的型式。以範例來看：\n1import json 2 3# json 的資料形式字串 4x = \u0026#39;{ \u0026#34;name\u0026#34;:\u0026#34;jim\u0026#34;, \u0026#34;age\u0026#34;:25, \u0026#34;city\u0026#34;:\u0026#34;Taiwan\u0026#34;}\u0026#39; 5 6# 轉換json 7person = json.loads(x) 8 9print(type(person)) #\u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; 10print(person){\u0026#39;name\u0026#39;: \u0026#39;jim\u0026#39;, \u0026#39;age\u0026#39;: 25, \u0026#39;city\u0026#39;: \u0026#39;Taiwan\u0026#39;} 11print(person[\u0026#39;age\u0026#39;]) #25 要讀取json非常簡單，import json這個module然後經由loads這個方法轉出，會產生一個dictionary型態資料\n接下來，是反過來～把Python的物件轉換成json，則使用dumps方法\n1import json 2 3person = {\u0026#39;name\u0026#39;: \u0026#39;jim\u0026#39;, \u0026#39;age\u0026#39;: 25, \u0026#39;city\u0026#39;: \u0026#39;Taiwan\u0026#39;} 4 5data = json.dumps(person) 6 7print(type(data)) #\u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 8print(data) #{\u0026#34;name\u0026#34;: \u0026#34;jim\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;city\u0026#34;: \u0026#34;Taiwan\u0026#34;} ","date":"Oct 23, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Ajson/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：json"},{"categories":["鐵人賽"],"content":"昨天介紹了selenium 這個module今天來加強版，讓selenium 和beautifulSoup結合為一\n1from selenium import webdriver 2from selenium.webdriver.support.ui import WebDriverWait 3from selenium.webdriver.support import expected_conditions 4from selenium.webdriver.common.by import By 5from bs4 import BeautifulSoup 6 7url =\u0026#39;https://tw.yahoo.com/\u0026#39; 8 9#今天講個特別的，我們可以不讓瀏覽器執行在前景，而是在背景執行（不讓我們肉眼看得見） 10#如以下宣告 options 11options = webdriver.ChromeOptions() 12options.add_argument(\u0026#39;--headless\u0026#39;) 13 14#打開瀏覽器,確保你已經有chromedriver在你的目錄下 15# 然後將options加入Chrome方法裡面，至於driver請用executable_path宣告進入 16browser=webdriver.Chrome(chrome_options=options, executable_path=\u0026#39;./chromedriver\u0026#39;) 17#在瀏覽器打上網址連入 18browser.get(url) 19 20#這時候就可以分析網頁裡面的元素 21element = browser.find_element_by_id(\u0026#39;UHSearchBox\u0026#39;) 22element.send_keys(\u0026#39;Hello World\u0026#39;) 23 24sumbit = browser.find_element_by_id(\u0026#39;UHSearchWeb\u0026#39;).click() 25 26# 等待目標表格\u0026#39;id 為 web\u0026#39;的div出現 27element = WebDriverWait(browser, 5).until( 28 expected_conditions.presence_of_element_located((By.ID, \u0026#39;web\u0026#39;)) 29) 30 31#然後就是beautifulsoup的範疇了，將browser.page_source放進去分析 32soup=BeautifulSoup(browser.page_source,\u0026#34;html.parser\u0026#34;) 33links = soup.select(\u0026#39;div#web h3\u0026#39;) 34 35for link in links: 36 print(link.get_text()) 37 38browser.quit() 接下來就會印出 yahoo搜尋 hello world的搜尋結果標題們了，撒花～～\n","date":"Oct 22, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium%E7%88%AC%E8%9F%B2/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：selenium+爬蟲"},{"categories":["鐵人賽"],"content":"今天來介紹一個特別的module: selenium他是一個可以控制瀏覽器的module.\n但如果你要控制瀏覽器載入這個module以外也要在下載相對應瀏覽器的driver還有相對應作業系統的版本，\n我這裡以我自己作業系統為mac os 還有 瀏覽器的driver設定為我個人最常用的‘chrome’為例如果你是其他os或者要弄其他的瀏覽器，請造訪https://selenium-Python.readthedocs.io/installation.html 啊如果還是看不懂歡迎在底下留言討論。\n先上範例程式碼：這裏我是用yahoo的網址然後在搜尋框打上hello world 並且做搜尋\n1from selenium import webdriver 2 3url =\u0026#39;https://tw.yahoo.com/\u0026#39; 4 5#打開瀏覽器,確保你已經有chromedriver在你的目錄下 6browser=webdriver.Chrome(\u0026#39;./chromedriver\u0026#39;) 7#在瀏覽器打上網址連入 8browser.get(url) 9 10#這時候就可以分析網頁裡面的元素 11element = browser.find_element_by_id(\u0026#39;UHSearchBox\u0026#39;) 12element.send_keys(\u0026#39;Hello World\u0026#39;) 13 14sumbit = browser.find_element_by_id(\u0026#39;UHSearchWeb\u0026#39;).click() 關於selenium 你可以更多看文件：https://selenium-Python.readthedocs.io/index.html 接下來執行你就會很清楚的發現電腦另立一個新的chrome，然後坐著我們想要做的事\u0026hellip;\n這樣的工作可以做什麼？可以延伸什麼？1.表單填寫：例如如果電子連署我可以大量搞死人連署（大誤ＸＤ2.軟體工程師的網頁測試3.可以和beautifulsoup搭配，天底下已沒有你爬不到的資料XD4.其他你覺得用瀏覽器很麻煩的動作\n","date":"Oct 21, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9Aselenium/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：selenium"},{"categories":["鐵人賽"],"content":"昨天看到一個大大po 鐵人賽的文章。終於解決了如何提取圖片的問題，原來，request也是可以讀到圖片檔的資訊的\n來吧！ 我們來學習如何爬圖片！其實網頁要呈現圖片有幾個方向\nimg 標籤 css image 相關的屬性 用js 放進去（但不太可能有人做這種事情\u0026hellip;除非是互動性太高需要換圖片的那種） img 標籤要爬最簡單，看看src標籤就可以囉～ css的話就會比較麻煩一點總之，爬蟲前是要做一些功課的，他是一種極客製化的一種功能\n這時就要說一下自己的切身之痛我很久以前也在下班時間玩Python的時候寫關於爬蟲的東西，結果不知道最近是不是網頁改版抑或是Python函式庫的問題，總之這個在去年還是前年寫的馬上出錯,怎麼debug都不對\u0026hellip;..怎麼google解法都解決不了\n這時候你要去想辦法尋找解法，\n是繼續在這個錯誤當中繞圈，跟他死嗑到底（想辦法正面和這個錯誤衝突）？ 尋找替代方案？ （和小學生一樣抄隔壁的作弊XD) 如果是接案或者那種有客戶你還有第三種選擇：說服他不要做這個功能（逃避隨可恥但有用？！！！！！！） 因為網路上其實很多人都有在寫Python抓圖片的程式或api ，你要相信一句話：你不是第一個發生這個問題的人\n我和這個錯誤正面處理已經很久了，所以顯然第一個解法是不適合的，又或者等等寫完這篇鐵人賽或鐵人賽結束我會繼續想辦法解決這個錯誤，所以最後我來參考其他人的程式碼來看看他們怎麼抓圖片。\n這時候，你有看懂Python程式的功力很重要，如何將他人的程式碼擷取或者看懂邏輯進而應用到自己的程式碼是一門藝術，我自己也還在摸索學習。\n話不多說，上菜了，以爬https://www.inside.com.tw/ 為例如果你要爬其他網站，可以自行分析，或者歡迎在底下留言和我討論XD 我做不到我會google哈哈哈\n分析一下inside的網頁，在他上方的slider 程式碼有段敘述如果你頑皮一點將url 裡面的網址貼上瀏覽器， yo 圖片get!\n1\u0026lt;ul class=\u0026#34;hero_slides\u0026#34;\u0026gt; 2 \u0026lt;li class=\u0026#34;hero_slide js-hero_slide\u0026#34; style=\u0026#34;background-image: url(https://www.inside.com.tw/wp-content/uploads/2018/10/RTX2Z7S8.jpg)\u0026#34;\u0026gt; 所以接下來爬蟲囉！ 不知道inside 會不會吉我？哎呦 別這樣 你們如果改版的恐怕我底下的程式碼直接廢掉XD「同是工程師，相煎何太急」\n這裏也要呼籲，爬蟲請務必遵守法律規範，因為網頁上的圖片是公開的，而且基本上我也沒要拿來幹嘛。所以我是合法使用（應該吧？？？！）\n以下程式碼我是來抓inside 最上面slider 的幾張圖片，並且為了整齊將這些圖片都放到images這個資料夾裡\n1import requests 2from bs4 import BeautifulSoup 3import os 4import re 5 6url=\u0026#34;https://www.inside.com.tw/\u0026#34; 7 8request=requests.get(url) 9content=request.content 10soup=BeautifulSoup(content,\u0026#34;html.parser\u0026#34;) 11 12container = soup.select(\u0026#34;li.hero_slide\u0026#34;) 13 14# print(container) 15dirname = \u0026#39;images\u0026#39; 16\u0026#39;\u0026#39;\u0026#39; 17這裡介紹一個module 是os ，如果要學習更多歡迎到這裡：https://kaiching.org/pydoing/py/Python-library-ospath.html 18\u0026#39;\u0026#39;\u0026#39; 19# 如果沒有images 資料夾會出錯，所以這裡我會判斷有沒有這個資料夾如果沒有就建立 20# 請注意是\u0026#39;not\u0026#39; os.path.isdir 是判斷這個資料存在回傳true ：不存在是false ，如果不存在就要建立資料夾，為了要讓條件成立你必須加上not，not false 就是true ，就會進入到os.mkdir的環節 21if not os.path.isdir(dirname): 22 os.mkdir(dirname) 23 24for item in container: 25 if item: 26 # print(type(item)) #debug 用，來看看到底輸出是否是預期的結果 27 value = item[\u0026#39;style\u0026#39;] 28 # 這裏我用之前的正規表達式提取文字 29 # item[\u0026#39;style\u0026#39;] =\u0026gt; background-image: url(https://www.inside.com.tw/wp-content/uploads/2018/10/RTX2Z7S8.jpg) 30 # 但我只要url括弧內的網址。 31 img_url = re.findall(r\u0026#34;\\((.+?)\\)\u0026#34;,value) 32 # 藉由re.findall出來的是list 所以這裏我宣告找第一個，也就是只有一個 33 img_url = img_url[0] 34 # print(img_url) #debug 用，來看看到底輸出是否是預期的結果 35 # 這裏的檔案名稱你可以選擇其他命名方式，我這裡是選擇擷取他在網頁上的檔名 36 # example: 如果是https://www.inside.com.tw/wp-content/uploads/2018/10/RTX2Z7S8.jpg 我就擷取到RTX2Z7S8.jpg 為檔名 37 filename = img_url.split(\u0026#39;/\u0026#39;)[-1] 38 39 #再發出一個request，然後建立檔案把編碼寫入檔案中 40 pic=requests.get(img_url) 41 imgcontent = pic.content 42 #這裏os.path.join 其實你也可以改成 dirname+\u0026#39;/\u0026#39;+filename 啦 43 image = open(os.path.join(dirname,filename),\u0026#39;wb\u0026#39;) 44 image.write(imgcontent) 45 image.close() 46 # break #debug 用，來看看到底輸出是否是預期的結果 ","date":"Oct 20, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A73/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：來爬蟲吧(3)"},{"categories":["鐵人賽"],"content":"哈！ 結果到現在十點多才回到家沒有研究到多媒體資源到底該如何提取爬蟲過來，抱歉！ 趁著週末時間來好好研究，希望可以明天和大家分享一下怎麼爬多媒體資源（又或者鐵人賽之前吧？！趕不上的話\u0026hellip;.我不會學世堅跳海，只會和大家說聲抱歉啦哈）\n這裏再用圖形化介面幫我代打啊哈這裏我使用的圖形化介面module是tkinter。\n你會發現，原來Python這麼簡單！！！\n1import tkinter as tk #哎這也是一種遺珠之憾，module也可以用別名，使用as加入你想改的名字也可以喔 2 3root = tk.Tk() 4root.title(\u0026#39;Hello World Application\u0026#39;) #介面的標題是\u0026#39;Hello World Application\u0026#39; 5 6root.mainloop() 只要import tkinter這個module, 接下來請呼叫他的Tk()方法記得，最後的mainloop方法也要，這樣你就呼叫出一個圖形化介面囉！\n當然啦，只是這樣我這篇也太偷懶了XD昨天都這麼偷懶今天怎麼可以還這樣呢（昨天偷懶真的不是故意的啊！差點要熬夜隔天爬不起來上班啊）\n所以，我來做一個可以按下按鈕，呼叫‘Hello World’訊息框的應用範例吧！\n1import tkinter as tk 2import tkinter.messagebox as messagebox 3 4def HelloWorldMsgBox(): 5 print(\u0026#39;hello world\u0026#39;) 6 messagebox.showinfo(\u0026#34;Hello World Application\u0026#34;, \u0026#34;Hello World!\u0026#34;) #呼叫hello world的訊息框 7 8root = tk.Tk() 9root.title(\u0026#39;Hello World Application\u0026#39;) 10 11buttonHelloWorld = tk.Button(root, text=\u0026#39;SayHello\u0026#39;, width=25, command=HelloWorldMsgBox) 12buttonHelloWorld.pack() #按下去啟動上面定義好的HelloWorldMsgBox方法 13 14buttonClose = tk.Button(root, text=\u0026#39;Close\u0026#39;, width=25, command=root.destroy) 15buttonClose.pack() #按下去啟動root.destroy，也就是關閉視窗 16root.mainloop() 其實你只要會google，把tkinter的元件叫出來就好，所以這裡我宣告了兩個button，一個是跳出提示窗hello world，另外一個則是關閉視窗。\n然後每個元件記得也要加入pack方法喔～就像最後的mainloop一樣\n如果要出現提示窗請引入tkinter的messagebox，然後就可以調用了，當我們在button裡面command屬性宣告等於我們某個方法名稱，你就可以使用囉！\n若要學習更多tkinter請到此：\nhttps://www.Python-course.eu/Python_tkinter.php https://Pythonspot.com/tk-window-and-button/ ","date":"Oct 19, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E5%9C%96%E5%BD%A2%E5%8C%96%E4%BB%8B%E9%9D%A2/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：圖形化介面"},{"categories":["鐵人賽"],"content":"不好意思發現要爬蟲多媒體資源時發現一些問題，目前還在debug中哈哈\u0026hellip;\n以後再來試試看怎麼取獲取多媒體資源，我承諾在鐵人賽結束前一定會想辦法生出來，今天為了能夠完成這一天先以正規表達式代打真是不好意思了。\n在Python中用正規表達式非常簡單，就是用\u0026rsquo;re\u0026rsquo;這個module\n1import re 2 3string = \u0026#39;Hello World\u0026#39; 4relist = re.findall(r\u0026#34;[a-z]*\u0026#34;,string) 5print(relist) 這樣你就會求出a-z 的文字喔。\n正規表達式對於我們在搜尋或者分析資料非常好用\n提供一些可以參考的資料：\nhttps://regex101.com/ http://ju.outofmemory.cn/entry/71121 ","date":"Oct 18, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：正規表達式"},{"categories":["鐵人賽"],"content":"前一天我們談到如何使用Python發出類似瀏覽器的request，把所要的HTML+CSS+JS都給他抓過來。但是如果只是這樣那爬蟲又有什麼多厲害呢？ 爬蟲的厲害之處就是能把抓回來的東西，拿出來好好的分析，藉此獲得我們想要的資訊或者有用的資訊\n因此，讓我接下來為他介紹收到request之後的事情吧！\nBeautifulSoup 其實Python有許多的爬蟲套件，我之前個人下班在玩的時候都是用這個套件，當然也有其他可以爬的套件。這裏我介紹某位youtuber的資源：https://www.youtube.com/watch?v=T2xNeWutlcA 厲害吧！他居然用Python爬蟲去抓成人影片！呵呵 不過他用的是另外一種module 叫做pyquery\n好啦，確定你有安裝好beautifulSoup之後就來開始吧這裡就不抓成人影片了，我們先開始抓取‘文字內容’，明天再來講我們怎麼抓取非文字內容的資料。我們來抓youtube今天熱門影片的標題們XD\n大家都知道：youtube的熱門影片網址是：https://www.youtube.com/feed/trending 1import requests; 2from bs4 import BeautifulSoup; 3 4url=\u0026#34;https://www.youtube.com/feed/trending/\u0026#34; 5 6request=requests.get(url) 7content=request.content 8soup=BeautifulSoup(content,\u0026#34;html.parser\u0026#34;) 9 10container = soup.select(\u0026#34;h3 a\u0026#34;) 11 12# print(type(container)) 13# print(container) 14# 接下來只是寫入result.txt檔案的事情 15file = open(\u0026#39;result.text\u0026#39;,\u0026#39;w\u0026#39;) 16 17for item in container: 18 if item: 19 #print(type(item)) 20 value = item.get_text() 21 print(value) 22 file.write(value+\u0026#39;\\n\u0026#39;) 23 #break #這裡也提一個起手式的遺珠之憾，就是你可以用continue和break來處理 迴圈敘述，這裏為了我之前debug方便，使用break來讓我先只看一個的結果。 24 25 26file.close() 用範例講解：首先先把兩個module beautifulsoup ＆request引入接下來你會看到我使用request.get 取得熱門影片的youtube網頁的內容。再來你就用soup=BeautifulSoup(content,\u0026quot;html.parser\u0026quot;)把content 丟入beautifulSoup解析，後面參數記得加上‘html.parser’\n然後回去用瀏覽器打開https://www.youtube.com/feed/trending/ 這個網頁，可能希望你會有一些基礎的html+css基礎，總之你可以仔細看看每個標題的地方，上面都會有h3 以及我們最想要的標題文字正好都被包在a這裡面。\n所以我們可以使用container = soup.select(\u0026quot;h3 a\u0026quot;)來把所有的標題提出來。接下來只是寫入result.txt檔案的事情了\n你可以先print(container)和print(type(container)) : 你會發現他是\u0026lt;class 'list'\u0026gt; ，所以你知道了吧！他就是個 list，所以後面我用迴圈把他一一提取出來。2.進入迴圈後如果你還是很好奇，可以用print(type(item))看看：他是\u0026lt;class 'bs4.element.Tag'\u0026gt;，所以後面我可以用get_text()這個方法取出他的標題文字。 關於beautifulsoup還有很多可以在教學或更多運用的，這裏我附上我debug參考的一些網址\n更多BeautifulSoup教學： https://www.dataquest.io/blog/web-scraping-tutorial-Python/ 明天我將試看看爬多媒體資源看看！敬請期待！\n","date":"Oct 17, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A72/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：來爬蟲吧(2)"},{"categories":["鐵人賽"],"content":"剛剛在想今天要寫什麼的時候\u0026hellip;.突然想到之前其實就有點想寫爬蟲的主題ＸＤ所以就來寫一波！\n淺談網路與網頁 其實我們藉由瀏覽器打入網址看到的“網頁”，獲得的都是一種“資源”，而這個資源他所回傳的是HTML+CSS＋JS(當然對於‘api’來說，他有可能回傳的是\u0026rsquo;json\u0026rsquo;、’xml‘或者其他類型)。其實說穿了網頁前端說難不難說雜不雜，就是基於這三大天王。當然你會問，那麼我們常說的後端語言：php、ruby、或者是現在我們在談的Python呢？我們總不可能拿前端來連資料庫吧（安全緣故）？沒錯！ 對於開發者的角度來說，我們是用這些後端語言，但如果你發現，其實後端語言都是會由CGI或者後端渲染的引擎，當你試著對網頁開啟右鍵檢查時，他還是HTML+CSS+JS啊！\n這裏還只是淺談，如果要繼續深入的話可以說非常非常多，預計30天鐵人賽都寫不完，這裏我極力推薦某個部落客寫的有關於http的文章以及一些我個人覺得可以更加深入的參考資料，淺顯明瞭、而且我也是讀過了對於網路、瀏覽器有更多的認識呢！\nNotFalse 技術客所寫的http教學系列 來做個網路瀏覽器吧！Let\u0026rsquo;s build a web browser! 系列 ：去年某大大寫的鐵人賽系列，看不懂沒關係，我也看不是太懂XD 但前面幾篇文章多少對於瀏覽器如何運作或者網路如何操作會有更多的了解 維基 或者google: 當然你也可以用wiki或自行google來幫助自己更加了解 總之，我們可以知道我們爬回來的東西就是一連串的文字，就是HTML+CSS+JS/除非你是對API 當然就獲得其他類型的資料\n環境建置 如果你不喜歡自己的環境太過髒亂，你想要有‘virtual’ 環境，那非常好，Python3自己有內建，另外我自己或網路上也推薦‘virtualenv’這個modules\n總之，時間不多 let\u0026rsquo;s start!我就先假設大家想要有一個不受污染的環境吧先確定安裝好pip之後請執行\n1pip install virtualenv #安裝virtualenv這個環境 2virtualenv crawler #建立一個名字叫做crawler的虛擬環境 3source crawler/bin/activate #啟動這個crawler 這個環境(for mac) 4\\crawler\\Scripts\\activate.bat #或者也可以執行這個指令 (for windows) [參考](https://programwithus.com/learn-to-code/Pip-and-virtualenv-on-Windows/) 你的環境如果有啟動的話應該可以看到你們前面會有個類似(crawler)的字樣。要離開的話就使用\u0026rsquo;deactivate\u0026rsquo;這個指令吧！在虛擬環境之下/或者直接本機請安裝幾個會需要用到爬蟲的module吧！\n1pip install requests #安裝一個可以發出網路request的module 2pip install BeautifulSoup4 #可以用這個module分析回傳回來的html+css+js 牛刀小試一下 在想要不要一口氣談完爬蟲的同時我發現時間很晚了，所以就只好分個幾天慢慢說明好了。前面說到我們的爬蟲通常會拿回來HTML+CSS+JS，那我們就來驗證一下吧！建立crawler.py\n1import requests; 2from bs4 import BeautifulSoup; 3 4url=\u0026#34;https://tw.yahoo.com/\u0026#34; 5 6request=requests.get(url) 7content=request.content 8 9print(content) 執行後你看到了什麼呢？是不是html+css+js呢？ 或者你也可以使用\n1print(type(content)) 回傳了\u0026lt;class 'bytes'\u0026gt;bytes就是檔案的最小單位。\n如果還是很好奇我說的回傳的html+css+js （因為print出來有什麼x開頭的亂碼）那麼我們試著把回傳回來的bytes 轉成string 寫入檔案中，我們可以這樣改寫：\n1import requests; 2from bs4 import BeautifulSoup; 3 4url=\u0026#34;https://tw.yahoo.com/\u0026#34; 5 6request=requests.get(url) 7content=request.content 8 9file = open(\u0026#39;result.txt\u0026#39;,\u0026#39;w\u0026#39;) 10file.write(content.decode(\u0026#39;utf-8\u0026#39;)) 執行後看看result.txt是不是就是網站的html+css+js呢？\n如果你今天頑皮一點把result.txt改為result.html呢？哈哈！ 打開result.html就是\u0026quot;很像\u0026quot;的yahoo首頁啦～～ XD 但應該是不能work的首頁啦，畢竟你只是copy前端，yahoo的背後還有很多眉眉角角呢（我們剛剛談到的後端開發語言或資料庫或圖片等等）\n","date":"Oct 16, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E4%BE%86%E7%88%AC%E8%9F%B2%E5%90%A71/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：來爬蟲吧(1)"},{"categories":["鐵人賽"],"content":"恩\u0026hellip;想不到什麼更好聽的標題名稱了哈哈，總之接下來要介紹一些可以在實際操作的內容。今天來講講怎麼做一個檔案以及怎麼去讀檔好了。\n首先，讀檔的範例如下：\n1f = open(\u0026#34;hello.txt\u0026#34;,\u0026#34;r\u0026#34;) #open 的第二個參數至關重要，之後我會再繼續說明，r這個參數就是檔案是唯讀的 2print(f.read()) #這是讀全部內容的 3print(f.read(10)) #讀前面幾個文字 請注意你執行這個Python檔案的目錄，然後確認這個目錄底下使否有hello.txt的檔案。這樣就會把資料讀出來。\n另外，寫檔或者建檔的程式範例如下\n1f = open(\u0026#34;demo.txt\u0026#34;, \u0026#34;a\u0026#34;) #a 這個參數就是附加檔案內容，檔案不管存在不存在 2f.write(\u0026#34;Now the file has one more line!\u0026#34;) 之後你就會在目錄下找到demo.txt這個檔案，然後就會看到這個內容。除了“a” 以外也可以用“x”或“w”， 前者是file“必須不存在”，加入x這個參數就會幫你建立這個檔案。而w這個參數就會不管這個檔案存不存在，就會把原本的內容全部重洗掉然後加入。\n","date":"Oct 15, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B0%E5%85%A5%E7%8F%BE%E5%AF%A6%EF%BC%9A%E6%AA%94%E6%A1%88/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 走入現實：檔案"},{"categories":["鐵人賽"],"content":"我覺得起手式有些還未講完的。不過我覺得還是希望可以先結束這一塊！然後開始寫一些爬蟲或file io、爬蟲之類的。\n來吧！所以來開始撰寫一些“遺珠之憾”，希望給大家一些資源好好學習。讓大家知道其實還有很多沒有說到的部分。\n多重listlist不只是可以單維，也可以多維。例如像是底下這個樣子 1list = [[1,2,3],[4,5,6]] 2\u0026gt;\u0026gt;\u0026gt; list[0][1] 32 4\u0026gt;\u0026gt;\u0026gt; list[1][2] 56 turpleturple 不是可以只有用括弧包一、二個值而已，也可以包很多，另外兩個turple也可以相加，不過兩者的相加不過就是兩個的串連。 1\u0026gt;\u0026gt;\u0026gt; x = (1,2,\u0026#39;abc\u0026#39;,\u0026#39;def\u0026#39;,6) 2\u0026gt;\u0026gt;\u0026gt; y = (3,4,\u0026#39;ghi\u0026#39;) 3\u0026gt;\u0026gt;\u0026gt; x+y 4(1, 2, \u0026#39;abc\u0026#39;, \u0026#39;def\u0026#39;, 6, 3, 4, \u0026#39;ghi\u0026#39;) 5(1, 2, \u0026#39;abc\u0026#39;, \u0026#39;def\u0026#39;, 6, 3, 4, \u0026#39;ghi\u0026#39;) 6\u0026gt;\u0026gt;\u0026gt; y = (6,2,\u0026#39;ghi\u0026#39;) 7\u0026gt;\u0026gt;\u0026gt; x+y 8(1, 2, \u0026#39;abc\u0026#39;, \u0026#39;def\u0026#39;, 6, 6, 2, \u0026#39;ghi\u0026#39;) lambda我們一般來說會這樣寫def 函式 1 return a+b if m \u0026gt; n else n 2#result 3\u0026gt;\u0026gt;\u0026gt; add(5,6) 411 但是我今天研究還有lambda的寫法。\n1add = lambda a, b: a+b 2#result 3\u0026gt;\u0026gt;\u0026gt; add(5,6) 411 ","date":"Oct 14, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E9%81%BA%E7%8F%A0%E4%B9%8B%E6%86%BE/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：遺珠之憾"},{"categories":["鐵人賽"],"content":"這將會是起手式的最後一篇文章，之後將會寫關於爬蟲、File IO 或者其他像是Django 與Flask的淺談。這裏我要來給大家介紹一個蠻有趣的東西，通常我們寫程式不會都是一個檔案寫到底的，所以這裏我們要展示一下如果多個檔案的話，Python要如何運用\u0026hellip;同時也教教大家我們是怎麼使用module的\n要把module用在自己的Python檔案要怎麼用呢？ 其實很簡單：就是用\u0026rsquo;import\u0026rsquo;這個關鍵字就好。\n所以你可以看到之前數字遊戲當中以及之後有許多的範例程式碼會看到import或者from這些關鍵字\u0026hellip;那些大部分是Python內建的modules,或者透過pip安裝後的modules\u0026hellip;\n以下我展示我們如果要引入別的檔案該怎麼辦？來假設目前的目錄有x.py 和y.py\n1#x.py 2class Aclass: 3 def sayHello(self): 4 print(\u0026#39;Hello World\u0026#39;) 如果y.py要用x.py裡面的x.py的Aclass怎麼辦呢？你可以用from或import這些關鍵字啦，有兩種寫法\n1#y.py 寫法一 2import x #將x.py所有內容引入 3 4test = x.Aclass() 5test.sayHello() #Hello World 6 7#y.py 寫法二 8from x import Aclass #將x.py引入裡面的Aclass 9 10test = Aclass() 11test.sayHello() #Hello World 這樣就大概完成啦，說真的因為Python都是目前下班的玩具語言，好少這樣玩也好少這樣寫，可能還有很多東西可以值得探究，所以就留待明天繼續寫吧～ 起手式：遺珠之憾！\n","date":"Oct 13, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Amodule/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：module"},{"categories":["鐵人賽"],"content":"其實物件導向的世界很大，有空可以去翻翻設計模式（design pattern)(大誤？！或許我只是新手，只是寫給for 新手或者我自己寫來看，所以就沒太多的專研，但物件導向確實是個值得探討很久的議題，預計可以多寫幾天的鐵人賽（誒～ 好啦，我還是配合自己的步調好了，我還是希望後面我可以寫到爬蟲啊、Django或者flask等等的。\n經過研究發現，我們其實不知不覺就已經使用到繼承，我以昨天寫的person 類別為例。\n1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayToPersonHello(self,name): 6 print(\u0026#39;Hello \u0026#39;+ name) 7 8print(type(Person)) #\u0026lt;class \u0026#39;type\u0026#39;\u0026gt; 9print(type(John)) #\u0026lt;class \u0026#39;__main__.Person\u0026#39;\u0026gt; 10print(Person.__bases__) #(\u0026lt;class \u0026#39;object\u0026#39;\u0026gt;,) 其實我們在寫person這個類別的時候，其實就繼承了object這個類別\u0026hellip;\n所以接下來，我們可以宣告women這個類別繼承Person, 在Python好簡單，只要類別名稱旁邊加入（）即可，然後括弧內加入類別的名稱。\n1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayToPersonHello(self,name): 6 print(\u0026#39;Hello \u0026#39;+ name) 7 8class Women(Person): 9 def __init__(self,height,weight): 10 super().__init__(height,weight) 11 12 def period(self): 13 print(\u0026#39;women has period!\u0026#39;) 14 15Jennifer = Women(5, 40) 16print(type(Women)) #\u0026lt;class \u0026#39;type\u0026#39;\u0026gt; 17print(type(Jennifer)) #\u0026lt;class \u0026#39;__main__.Women\u0026#39;\u0026gt; 18print(Women.__bases__) #(\u0026lt;class \u0026#39;__main__.Person\u0026#39;\u0026gt;,) 19Jennifer.sayToPersonHello(\u0026#39;Jim\u0026#39;) #Hello Jim ##子類別也可以呼叫父類別的方法 20Jennifer.period() #women has period ! 後記：(更)發現物件導向一研究起來真的不得了，Python可以允許多重繼承，以及他沒有interface等等\u0026hellip;好多好多，看來還是日後有更多研究後在繼續寫下去吧\u0026hellip;\n例如多重繼承的程式碼範例，將Women 同時繼承Person和Animal等類別\u0026hellip;居然可以通過！\n1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayToPersonHello(self,name): 6 print(\u0026#39;Hello \u0026#39;+ name) 7 8class Animal: 9 def __init__(self,name): 10 self.name = name 11 def spark(self): 12 print(\u0026#39;spark!\u0026#39;) 13 14class Women(Person,Animal): 15 def __init__(self,height,weight): 16 super().__init__(height,weight) 17 18 def period(self): 19 print(\u0026#39;women has period !\u0026#39;) 20 21print(type(Women))#(\u0026lt;class \u0026#39;__main__.Person\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Animal\u0026#39;\u0026gt;) 22print(type(Jennifer)) #\u0026lt;class \u0026#39;__main__.Women\u0026#39;\u0026gt; 23Jennifer = Women(5, 40) 24Jennifer.spark() #spark! 然後關於物件導向的部分先在這裡告一個小小段落，發現真的好多東西，為了我自己的良心，我還是慢慢研究慢慢的將成果與大家分享，如果有高手的話歡迎來指教一下！\u0026hellip;.\n附上我的參考資料：\nhttps://openhome.cc/Gossip/Python/index.html https://stackoverflow.com/questions/15526858/how-to-extend-a-class-in-Python https://stackoverflow.com/questions/372042/difference-between-abstract-class-and-interface-in-Python https://stackoverflow.com/questions/2124190/how-do-i-implement-interfaces-in-Python https://stackoverflow.com/questions/12179271/meaning-of-classmethod-and-staticmethod-for-beginner ","date":"Oct 12, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B9%BC%E6%89%BF/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：繼承"},{"categories":["鐵人賽"],"content":"嗚，到第11天了！今天來談談物件導向的部分，物件導向簡單來說就是一種“物件”的資料型態。這種資料型態比較特別的就是在物件裡，有“屬性”和“方法”，不像之前所介紹的資料型態比較單向，數字就是數字;文字就是文字。\nPython的物件表示非常簡單，只要使用\u0026rsquo;class\u0026rsquo;這個關鍵字就好，然後記得要“縮排”，在Python當中，縮排可以視為一種區塊。而要使用物件這種資料型態只要用你所宣告的class新名稱，然後加入‘()’就好了。如下所示：\n1class Person: 2 height=5 3 weight=40 4 5John = Person() 6print(John.height) #5 然後在上面的例子中，我們的height和weight都被寫死了，在現實世界我們的height和weight都不太一樣，在物件導向的世界有construct這個方法可以使用，php、ruby都是這樣，那Python呢？請看底下示範\n1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 6John = Person(5, 40) 7print(John.height) #5 Python厲害的地方是不用特別宣告屬性，直接在init 這個方法做出宣告即可。請記得，self是必要的，然後記得縮排，Python的construct就完成了\n而物件導向除了屬性，也有方法，在這裡我用程式帶過：\n1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayHello(self): 6 print(\u0026#39;Hello\u0026#39;) 7 8John = Person(5, 40) 9John.sayHello() #Hello 所以呢，Python的方法就是用def這個關鍵字，然後請記得加入self，記得縮排就可以啦！當然，也可以試試看加入外部的參數\n1class Person: 2 def __init__(self, height, weight): 3 self.height = height 4 self.weight = weight 5 def sayToPersonHello(self,name): 6 print(\u0026#39;Hello \u0026#39;+ name) 7 8John = Person(5, 40) 9John.sayToPersonHello(\u0026#39;Jim\u0026#39;) #Hello Jim ","date":"Oct 11, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E8%AB%87%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：談物件導向"},{"categories":["鐵人賽"],"content":"前幾天總算把變數的部分有點寫得差不多了，但我知道根據我自己研究起來的資料還有很多很多可以探討的，但我也不想拿來騙鐵人賽的天數XD 所以算是寫了一個段落就告別一個階段。這是一個新的階段，就是來講講關於程式的函式，又可能稱為功能之類的，總之php是這樣寫的：\n1\u0026lt;?php 2function sayHello($name){ 3 echo \u0026#39;hello, \u0026#39;.$name; 4} 5 6sayHello(\u0026#39;Jim\u0026#39;); #output: hello, Jim function 有點像是物件導向裡面的封裝，把你要跑的流程或者要使用的變數等等寫在一個區塊中，並且為這個區塊取一個名稱，而你只要呼叫這個名稱而且給予這個區塊可以處理的input就可以輸出經過這個區塊處理好的output或者要做的作為，在這個區塊中，你可以return也可以不return （但似乎有return會比較好）\nfunction就是現實世界中我們遇到的數學函式，例如三角函數或者什麼幾元幾次方程式之類的，你代入某個數，就會出來一個結果。\nPython的function也超簡單的\n1def functionname( parameters ): 2 # ...statement... 請注意喔，Python的\u0026rsquo;:\u0026lsquo;及縮排都極為重要，要放入statement 請縮排。在這裡我就做一個簡單示例吧！\n1def sayHello(name): 2 print(\u0026#39;Hello ,\u0026#39;+name) 3 4sayHello(\u0026#39;Jim\u0026#39;) #Hello ,Jim ","date":"Oct 10, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Afunctions/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：Functions"},{"categories":["鐵人賽"],"content":"寫到這裡，真的覺得可以寫滿30天持續不間斷的真的超級強大的，我覺得自己快撐不住了。不過為了能夠學會Python，我仍然願意忍受工作的辛苦想耍廢之後，還是要繼續寫下去\u0026hellip;\u0026hellip; 同時，原本是想自己慢慢寫慢慢自己看的，沒想到居然有這麼多人訂閱這篇文。真是讓我受寵若驚，這也是我必須要繼續寫下去的理由。\nPython 中也有一個資料型態，叫做“Dictionary”，有點像是php的 associative arraysphp 是這樣表示的：\n1$age = array(\u0026#34;Peter\u0026#34;=\u0026gt;\u0026#34;35\u0026#34;, \u0026#34;Ben\u0026#34;=\u0026gt;\u0026#34;37\u0026#34;, \u0026#34;Joe\u0026#34;=\u0026gt;\u0026#34;43\u0026#34;); 而在Python當中，dictionary是這樣表示的\n1age = {\u0026#39;Peter\u0026#39;: 35, \u0026#39;Ben\u0026#39;: 37, \u0026#39;Joe\u0026#39;: 43} 2age[\u0026#39;Peter\u0026#39;] # 35 而dictionary 和 list一樣可以修改\n1age[\u0026#39;Ben\u0026#39;]=38 2age # {\u0026#39;Peter\u0026#39;: 35, \u0026#39;Ben\u0026#39;: 38, \u0026#39;Joe\u0026#39;: 43} 至於dictionary的刪除或清空則需要這樣\n1age = {\u0026#39;Peter\u0026#39;: 35, \u0026#39;Ben\u0026#39;: 37, \u0026#39;Joe\u0026#39;: 43} 2del age[\u0026#39;Joe\u0026#39;] 3age # {\u0026#39;Peter\u0026#39;: 35, \u0026#39;Ben\u0026#39;: 37} 4age.clear() 5age # {} 比較特別的是，dictionary可以轉換成string\n1age = {\u0026#39;Peter\u0026#39;: 35, \u0026#39;Ben\u0026#39;: 37, \u0026#39;Joe\u0026#39;: 43} 2len(age) # 3 3str(age) # \u0026#34;{\u0026#39;Peter\u0026#39;: 35, \u0026#39;Ben\u0026#39;: 37, \u0026#39;Joe\u0026#39;: 43}\u0026#34; 4type(str(age)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 5type(age) # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; 其他操作\n1age = {\u0026#39;Peter\u0026#39;: 35, \u0026#39;Ben\u0026#39;: 37, \u0026#39;Joe\u0026#39;: 43} 2age.get(\u0026#39;Ben\u0026#39;) # 37 3age.items() # dict_items([(\u0026#39;Peter\u0026#39;, 35), (\u0026#39;Ben\u0026#39;, 37), (\u0026#39;Joe\u0026#39;, 43)]) 4type(age.items()) # \u0026lt;class \u0026#39;dict_items\u0026#39;\u0026gt; 5age.keys() # dict_keys([\u0026#39;Peter\u0026#39;, \u0026#39;Ben\u0026#39;, \u0026#39;Joe\u0026#39;]) 6age.values() # dict_values([35, 37, 43]) 同場加映\n1age = {\u0026#39;Peter\u0026#39;: 35, \u0026#39;Ben\u0026#39;: 37, \u0026#39;Joe\u0026#39;: 43} 2list(age.keys()) #可以只取dictionary 的key的list 3# [\u0026#39;Peter\u0026#39;, \u0026#39;Ben\u0026#39;, \u0026#39;Joe\u0026#39;] 4list(age.values()) #可以只取dictionary 的value的list 5# [35, 37, 43] 參考資料：\nhttps://www.tutorialspoint.com/Python/Python_dictionary.htm ","date":"Oct 9, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Adictionary/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：dictionary"},{"categories":["鐵人賽"],"content":"tuples 也是Python的資料型態之一，同屬於“列表”的一種。宣告方式如下\n1\u0026gt;\u0026gt;\u0026gt; tuple =(\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;); 2\u0026gt;\u0026gt;\u0026gt; tuple 3(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;) tuple 同樣與list一樣可以放置不同的資料型態，唯一不同的是兩者的宣告方式一個是用小括弧;另一個則是使用中括弧。兩者最大不同之處就是tuple不能修改、新增，而list可以。\n1\u0026gt;\u0026gt;\u0026gt; list = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;] 2\u0026gt;\u0026gt;\u0026gt; list[0]=\u0026#39;c\u0026#39; 3\u0026gt;\u0026gt;\u0026gt; list 4[\u0026#39;c\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;] 5\u0026gt;\u0026gt;\u0026gt; tuple=(\u0026#39;a\u0026#39;,0,2,\u0026#39;c\u0026#39;) 6\u0026gt;\u0026gt;\u0026gt; tuple 7(\u0026#39;a\u0026#39;, 0, 2, \u0026#39;c\u0026#39;) 8\u0026gt;\u0026gt;\u0026gt; tuple[0]=\u0026#39;b\u0026#39; 9Traceback (most recent call last): 10 File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; 11TypeError: \u0026#39;tuple\u0026#39; object does not support item assignment 參考資料：\nhttps://www.w3schools.com/Python/Python_tuples.asp http://itman2266.blogspot.com/2013/05/Python-tuple.html https://ithelp.ithome.com.tw/articles/10185010 ","date":"Oct 8, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87tuples/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：淺談tuples"},{"categories":["鐵人賽"],"content":"前面談到資料結構numbers 數字。今天來講講在程式語言當中很重要的list（我發現之前用collection 形容有點不太恰當，我會修改之前寫的文章！事實上在Python中有一個collection的module 誒～我鐵人賽又可以多一天來寫啦XD）\n關於collection 可以參考：https://docs.Python.org/2/library/collections.html 我想以後再找一天為這個部分做個小專題好了！\n另外本篇文章我也是參考：https://www.tutorialspoint.com/Python/Python_lists.htm 在現實中，我們也是有這種list的概念。像是班級的學生名冊、或者成績風雲榜、排名等等，就是那種以“串”為單位的資料型態。在php當中，就是array ,也是程式語言中常稱呼的「Array」(陣列)注意：Python 沒有 array\n在Python中，list宣告很簡單\n1\u0026gt;\u0026gt;\u0026gt; list = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;] 2\u0026gt;\u0026gt;\u0026gt; print(list) 3[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] 用[]作為宣告的符號，包住你想要包的資料，資料與資料以,作為區隔 而list 可以變化他的值，其中有 insert 、append、或者index等等方法\u0026hellip;.你可以任意運用以下我謹以程式碼帶過操作：\n1\u0026gt;\u0026gt;\u0026gt; list= [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;] 2\u0026gt;\u0026gt;\u0026gt; list 3[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;] 4\u0026gt;\u0026gt;\u0026gt; type(list) 5\u0026lt;class \u0026#39;list\u0026#39;\u0026gt; 6\u0026gt;\u0026gt;\u0026gt; list.append(\u0026#39;e\u0026#39;) #將元素放到list的最後 7\u0026gt;\u0026gt;\u0026gt; list 8[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;] 9\u0026gt;\u0026gt;\u0026gt; list.count(\u0026#39;a\u0026#39;) #這個元素在list有幾個 101 11##值得一提的是如果要知道list裡面有幾個元素不可以用count(),count裡面一定要有參數，你可以使用len(list) 12\u0026gt;\u0026gt;\u0026gt; len(list) 135 14\u0026gt;\u0026gt;\u0026gt; list.insert(0,\u0026#39;a\u0026#39;) #你也可以宣告index(list index以0為開頭)，然後插入元素，不過在那個index之後的元素將會都往後移。 15\u0026gt;\u0026gt;\u0026gt; list 16[\u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;] 17\u0026gt;\u0026gt;\u0026gt; list.remove(\u0026#39;d\u0026#39;) 18\u0026gt;\u0026gt;\u0026gt; list 19[\u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;e\u0026#39;] 20\u0026gt;\u0026gt;\u0026gt; list.append(5) #list裡面可以允許不同的形態 21\u0026gt;\u0026gt;\u0026gt; list 22[\u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;e\u0026#39;, 5] 23\u0026gt;\u0026gt;\u0026gt; list.reverse() #把list倒轉 24\u0026gt;\u0026gt;\u0026gt; list 25[5, \u0026#39;e\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;] 好啦，之後我會陸續介紹tuples 和dictionary 這兩個資料型態，藉此告別Python的資料型態之旅\n","date":"Oct 7, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%8E%A2%E8%A8%8Elists/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python起手式：探討lists"},{"categories":["鐵人賽"],"content":"原本想說變數與型態得部分一天寫完就好，但昨天整理了一下發現原來Python 的型態博大精深，有發現到另外自己以前在玩轉Python沒有注意的細節。（說真的有時候寫Python也很少會注意到這些細節，反正就是要寫什麼查什麼，出了錯自己debug\u0026hellip;）\n鐵人賽的好處就是為了要給別人看，所以你必須要好好整理、你寫的文章說的話都要是True，不可以隨便唬弄人，也藉著這個機會也是好好為自己學習的Python做出整理。\n放心，Python的變數不會拖太久，我預計就特別在拉出來講numbers以及collections 就好，文字與boolean因為是蠻簡單的型態，上網查的時候也沒有發現什麼特別的點，所以就不繼續著墨這裏。(20181007更：我發現用collections 稱呼非常不恰當，所以我決定直接以list、tuple和dictionary 稱呼並逐天深入了解介紹)\nNumbers 有三種 numbers就是我們現實生活中常用到的數字，舉凡整數、正整數、負數以及小數等等\u0026hellip; 為了確保自己在numbers的理解沒有問題，我特別參考了官網對於numbers的教學：https://docs.Python.org/3/tutorial/introduction.html#numbers numbers 有三種\nint float complex 簡單來說，Python的numbers 就是可以加減乘除的，同時也支援我們現實的四則運算。\n1\u0026gt;\u0026gt;\u0026gt; 1+1 22 3\u0026gt;\u0026gt;\u0026gt; 1+5*6 431 5\u0026gt;\u0026gt;\u0026gt; (1+5)*6 636 7\u0026gt;\u0026gt;\u0026gt; type(1+1) 8\u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 9\u0026gt;\u0026gt;\u0026gt; type(1+5*6) 10\u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 11\u0026gt;\u0026gt;\u0026gt; type((1+5)*6) 12\u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 整數 int 這個型態最簡單了，就是1到9和0，現實世界中的正整數、負整數和0要宣告負整數很簡單，像現實世界當中加個-就好\n1\u0026gt;\u0026gt;\u0026gt; -1 2-1 3\u0026gt;\u0026gt;\u0026gt; type(-1) 4\u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 5\u0026gt;\u0026gt;\u0026gt; type(0) 6\u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 7\u0026gt;\u0026gt;\u0026gt; type(15) 8\u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 小數/浮點數 float float就是現實遇到的小數，只要你用.符號就可以囉\n1\u0026gt;\u0026gt;\u0026gt; 1.5 21.5 3\u0026gt;\u0026gt;\u0026gt; type(1.5) 4\u0026lt;class \u0026#39;float\u0026#39;\u0026gt; complex 這東西有點複雜，我自己也不是很能理解，由於工作的關係也鮮少使用到這個型態。意思是除了純數字及符號以外你還可以加入一些虛數，參考網址：http://www.runoob.com/Python/Python-numbers.html 這裏complex就定義為複數有實數和虛數構成。\n1\u0026gt;\u0026gt;\u0026gt; 5j 25j 3\u0026gt;\u0026gt;\u0026gt; type(5j) 4\u0026lt;class \u0026#39;complex\u0026#39;\u0026gt; 5\u0026gt;\u0026gt;\u0026gt; 6+5j 6(6+5j) 7\u0026gt;\u0026gt;\u0026gt; type(6+5j) 8\u0026lt;class \u0026#39;complex\u0026#39;\u0026gt; 9\u0026gt;\u0026gt;\u0026gt; -3j 10(-0-3j) 11\u0026gt;\u0026gt;\u0026gt; type(-3j) 12\u0026lt;class \u0026#39;complex\u0026#39;\u0026gt; 13\u0026gt;\u0026gt;\u0026gt; 3-3j 14(3-3j) 15\u0026gt;\u0026gt;\u0026gt; type(3-3j) 16\u0026lt;class \u0026#39;complex\u0026#39;\u0026gt; ","date":"Oct 6, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E6%B7%BA%E8%AB%87-numbers/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：淺談 numbers"},{"categories":["鐵人賽"],"content":"有許多人說，程式＝資料結構＋演算法，這句話確實沒有錯，前面我們說到演算法的部分、現在來談談“資料結構”的部分\n一般來說我也不會特別去整理他，是因為今天要寫鐵人賽所以特別花時間整理一下。以免自己有漏掉或寫錯的部分（其實前面幾天也是邊查邊寫啦！不知道有沒有人也是這樣子？會不會很不專業哈哈，每支程式片段還是會花一段時間確認執行過程與執行結果。以免自己有說錯的地方）我參考自：https://www.w3schools.com/Python/Python_variables.asp 前面談到程式語言的控制流程，也就是control flow，以及如果再control flow中出錯需要做的Error Handling. 我想我應該是少數幾位把control flow和exception 放在前面寫的作者吧ＸＤ 其實正常來說，綜觀程式教學書都先是變數與型態先教再說\u0026hellip;\n變數 變數其實就放放置的名稱\u0026hellip; 恩\u0026hellip;用一行程式說明比較快\n1a=6 說明：這裏的‘a’ 就是我說的變數啦！Python的變數宣告很簡單，只要是文字就好（然後意外試過中文也可以喔\u0026hellip;但非常不建議這樣做）\n1變數=5 2print(變數) #Output 是5 然後根據上面我提供的參考網址Ｗ3C 有提供很清楚明確的命名變數規則：\n變數必須以字母或者文字或者_作為開頭及組成變數名稱的元素而已，不可以用其他的例如數字為開頭(ex. 1a, 2b 這種都是不會通過的變數名稱) 不可以使用Python原本有的保留字或關鍵字 (ex. class之類) 變數的名稱大小寫敏感(ex.CLASS雖然是保留字卻可以當變數、a 和Ａ是不一樣的啊) 關於Python保留字的部分不想上網查的話就直接用程式查一下吧(我也是剛剛才知道的呢ＸＤ)\n1import keyword 2print(keyword.kwlist) 3\u0026#39;\u0026#39;\u0026#39; 4[\u0026#39;False\u0026#39;, \u0026#39;None\u0026#39;, \u0026#39;True\u0026#39;, \u0026#39;and\u0026#39;, \u0026#39;as\u0026#39;, \u0026#39;assert\u0026#39;, \u0026#39;break\u0026#39;, \u0026#39;class\u0026#39;, \u0026#39;continue\u0026#39;, \u0026#39;def\u0026#39;, \u0026#39;del\u0026#39;, \u0026#39;elif\u0026#39;, \u0026#39;else\u0026#39;, \u0026#39;except\u0026#39;, \u0026#39;finally\u0026#39;, \u0026#39;for\u0026#39;, \u0026#39;from\u0026#39;, \u0026#39;global\u0026#39;, \u0026#39;if\u0026#39;, \u0026#39;import\u0026#39;, \u0026#39;in\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;lambda\u0026#39;, \u0026#39;nonlocal\u0026#39;, \u0026#39;not\u0026#39;, \u0026#39;or\u0026#39;, \u0026#39;pass\u0026#39;, \u0026#39;raise\u0026#39;, \u0026#39;return\u0026#39;, \u0026#39;try\u0026#39;, \u0026#39;while\u0026#39;, \u0026#39;with\u0026#39;, \u0026#39;yield\u0026#39;] 5\u0026#39;\u0026#39;\u0026#39; 相較於php變數宣告要用\u0026rsquo;$\u0026lsquo;字開頭（自然就沒有保留字和大小寫敏感問題啦ＸＤ），這點應該php就勝過了吧?!\n型態 變數的命名與組合最好是要有意義的，這樣日後在維護程式或撰寫程式會比較好。而變數總要有可以放的東西，而這些東西是什麼呢？有點像是現實的東西，舉凡文字、數字與列表等\u0026hellip;Tips:你可以使用type()函數來查詢這個東西的型態\n文字 String :很簡單，你可以用\u0026quot;或者“”包住你要包的東西就是文字型態囉 數字 numbers:數字就是數字，就是1～9 和0還有小數都是。如果再細分的話可以分為幾種 布林 boolean: 請記得，如果你要宣告對或錯的話第一個字請大寫，這型態很間單，就兩個：True 和False list、turples、dictionary 我發現網路上各種查的資源都不盡相同，或許有可能有疏忽的地方，總之我決定在後面的鐵人賽一一說明（同時自己也好好理解一下）\n","date":"Oct 5, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E4%BE%86%E8%AB%87%E8%AB%87%E8%AE%8A%E6%95%B8%E8%88%87%E5%9E%8B%E6%85%8B/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：來談談變數與型態"},{"categories":["工作筆記"],"content":"緣起 我們公司最近要徵募新人，說到要給新人出怎麼樣的題目\u0026hellip;.談到出個簡單的部落格實做(包含登入登出)\u0026hellip;.說真的這個題目的範圍可大可小\u0026hellip;.對我來說就只是要考所謂CRUD的操作-就是新增-查詢-更新-刪除。於是就問我這個非常菜的菜鳥能不能在這短時間內做出來\u0026hellip;..說真的我是有點躍躍欲試\u0026hellip;於是便開啟這樣的練習\u0026hellip;.\n所有程式碼都在這裡：https://github.com/r567tw/easy_blog_practice 這裡我應用了PDO的技術，並且也記錄一些筆記\u0026hellip;\u0026hellip;\nInitial 1$db = new PDO($dsn, $user,$password ); Create 1$insert=$db-\u0026gt;prepare(\u0026#34;insert into posts (title,post) values (:title,:post)\u0026#34;); 2$insert-\u0026gt;bindParam(\u0026#34;:title\u0026#34;,$_POST[\u0026#39;title\u0026#39;]); 3$insert-\u0026gt;bindParam(\u0026#34;:post\u0026#34;,$_POST[\u0026#39;posts\u0026#39;]); 4$insert-\u0026gt;execute(); Review 1$sql=\u0026#34;select * from posts\u0026#34;; 2$posts=$db-\u0026gt;query($sql); 3$posts=$posts-\u0026gt;fetchAll(); Update 1$update=$db-\u0026gt;prepare(\u0026#34;update posts set title=:title,post=:post,update_time=:update where id=:id\u0026#34;); 2$update-\u0026gt;bindParam(\u0026#34;:title\u0026#34;,$_POST[\u0026#39;title\u0026#39;]); 3$update-\u0026gt;bindParam(\u0026#34;:post\u0026#34;,$_POST[\u0026#39;posts\u0026#39;]); 4$update-\u0026gt;bindParam(\u0026#34;:update\u0026#34;,date(\u0026#34;Y:m:d H:i:s\u0026#34;)); 5$update-\u0026gt;bindParam(\u0026#34;:id\u0026#34;,$_POST[\u0026#39;id\u0026#39;]); 6$update-\u0026gt;execute(); Delete 1$delete=$db-\u0026gt;prepare(\u0026#34;delete from posts where id=:id\u0026#34;); 2$delete-\u0026gt;bindParam(\u0026#34;:id\u0026#34;,$_GET[\u0026#39;id\u0026#39;]); 3$delete-\u0026gt;execute(); 判斷是否有成功執行\n1$delete-\u0026gt;rowCount()\u0026gt;0 登入登出 首先必須先開啟Session\n1session_start(); 當登入時必須宣告一個session的參數\n1$_SESSION[index]=Value 之後就判斷這個session實數就能時做出登入登出啦\n這麼簡單的東西我花了一個半小時做完~ 是不是有點久阿哈哈?\n工作上學習到的小技巧 1簡單輸出成Excel的程式碼\n1header(\u0026#34;Content-type:application/vnd.ms-excel\u0026#34;); header(\u0026#34;Content-Disposition:filename=filename.xls\u0026#34;); 接下來只要在此段程式碼底下宣告HTML的Table，只要打開這個網頁就會輸出Excel檔案\n2.MySQL 應用CASE 子句\n1SELECT count(CASE (\u0026#34;欄位名\u0026#34;) WHEN \u0026#34;條件1\u0026#34; THEN 1 ELSE NULL END) FROM \u0026#34;表格名\u0026#34;; 可以在同一條SQL查詢出來這個欄位在這個條件下所出來的個數\u0026hellip;\n這樣如果要計算另外一個條件就不用再用另外的SQL查詢這麼蠢的操作了\n未來展望 說真的! 這些都是很多Native php的東西，做多了就是一直在重複造輪子\u0026hellip;.這種叫做練功哈哈，這網路上有很多人做了很多東西，就像是框架，一下子東西就出來了! 這都是我應該要學習的地方~~\n小君曰：為自己加油，希望可以越來越強！！\n","date":"Oct 4, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E7%B0%A1%E5%96%AE%E7%9A%84crud-%E6%93%8D%E4%BD%9C/","series":null,"smallImg":"","tags":["crud","php"],"title":"簡單的CRUD 操作"},{"categories":["鐵人賽"],"content":"Python同樣與其他語言一樣，也有他的Error Handling, 什麼是Error Handling呢？程式有輸入也有輸出，還有控制的過程，但萬一在過程當中出錯了怎麼辦？就像郵局從寄信方收到信件、最後要經過處理、透過郵差送信給收信方，在這樣繁複的過程中，有可能會出現一些問題而導致收信方收不到信件。\n對於程式本身，有哪些地方會出錯呢？這裡我以短短幾年工程師生涯所遇到的雷來談談～ 程式本身沒有錯，錯的是撰寫程式的人XD（好悲催～） 好啦！這也就是我們工程師存在的價值啦！沒有人能夠一定保證程式永遠都不會出錯～ Garbage in Garbage out，使用者習慣與環境千千百百種，都會有可能有當初撰寫程式者沒有預期到的輸入，況且，在軟體工程界當中：「沒有不變的需求」，可能這一段時間他可以完全無誤地跑，但有可能以後時間長了或者增加了新需求後，就不能跑了\u0026hellip;\n還有啊，有時候也不見得是程式撰寫者及程式本身的錯誤，在寫程式的過程當中，有時會呼叫外部的函式庫或外部的API，這有時也不是你的錯，但就這麼剛好他回傳或者你送出的就不是你所期待的，那麼就會噴錯了。\n為了解決當程式面對這些error可以仍持續地執行下去。你就一定要有error handling，以確保使用者不會“驚嚇”到\n關於Python的error handling 敘述如下\n1try: 2 {statement area} 3catch (error type),(value): 4 {error handing} 5else: 6 { statement area continue...} 7finally: 8 {finally area} 說明：\n在Python界當中，縮排和:很重要！請務必注意！ 而catch後面的 error type和value 不一定要加，你也可以單純的’catch:‘這樣一行帶過\n至於error type你可以參考這個網址 else 則是當try所包的statement無誤的時候會執行的。\n最後finally子句就是無論try或有沒有取得exception,都會執行的區域，php同樣也有類似finally的敘述。\n以昨天寫的猜數字小遊戲為例子，可能出錯的就是input那一塊，因為input是由使用者輸入的，萬一使用者輸入的不是數字怎麼辦呢？同時，我們也加入可以計算你猜數字的次數需求。\n所以會改成底下這個樣子：\n1import random 2ans = random.randint(0,10) #取從1到10的亂數 3times = 0 4print(\u0026#39;請猜一個0~10的數字\u0026#39;) 5play = True 6 7while(play): 8 try: 9 guess = int(input(\u0026#39;來隨便猜一個數字吧: \u0026#39;)) #input出來預設為str，轉型為int 10 except: 11 print(\u0026#39;程式出現非預期的錯誤，遊戲結束，答案是\u0026#39;+str(ans)) 12 #str()是將數字轉文字，\u0026#39;+\u0026#39;串接的必須是同樣的型態。 13 play = False 14 else: 15 times = times+1 #每猜一次就要+1 16 if (guess \u0026gt; ans): 17 print(\u0026#39;喔你猜得太大囉\u0026#39;) 18 elif (guess \u0026lt; ans): 19 print(\u0026#39;喔你猜得太小囉\u0026#39;) 20 else: 21 print(\u0026#39;恭喜你猜對了！\u0026#39;) 22 play = False 23 finally: 24 print(\u0026#39;你猜了\u0026#39;+str(times)+\u0026#39;次\u0026#39;) 說真的，我寫程式也很少寫error handling，我也是邊查資料邊寫邊做的。如果有錯誤或者要補充的歡迎來指教及提醒。 參考網址 ","date":"Oct 4, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9Aerror-handling-%E4%BB%A5%E7%8C%9C%E6%95%B8%E5%AD%97%E9%81%8A%E6%88%B2%E7%82%BA%E4%BE%8B/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：Error Handling-以猜數字遊戲為例"},{"categories":["鐵人賽"],"content":"前言 昨天展示了超簡單input和output的小程式，如果程式只是in and out ,那麼有什麼好繼續學的呢？當然啦，garbage in ,garbage out，如果丟程式非預期的輸入，當然程式輸出就是各種error或垃圾啦！程式的厲害之處及關鍵就是在於他的演算法，演算法你可以理解為“做事情的方法”，做事情、總是會有一套流程與一連串的動作，而在這樣的流程與動作中，我們可以分類一些路徑，在這裡我們稱之為「control flow」(控制流)\ncontrol flow 分為兩個：條件和迴圈\nPython的註解方法 ㄧ開始，我應該要先介紹註解，哈 昨天就應該先寫的～\n註解是一個程式撰寫上的說明，你可以使用它向下次要看你程式的人（或者也可能也是你自己）說明你這段要寫的內容、可能怎麼運用、或者提醒什麼注意事項。\n1//這是單行註解用法 2\u0026#39;\u0026#39;\u0026#39; 3這是多行註解用法 4\u0026#39;\u0026#39;\u0026#39; Python的條件敘述 Python的條件敘述表示如下（此為虛擬碼-一個不是正式程式碼的表示法）\n1if (boolean exp1): 2 #statementsA... 3elif (boolean exp2): 4 #statementsB... 5else: 6 #statementsC... 說明：\n在Python 中，縮排是一件非常重要的事情，有點像是php的{} ，所以Python就是一種強迫你排版的程式語言（誤！\nexp 是運算式，在if 和elif 用括弧把它包起來，而exp將會輸出true 或false ,就是現實中的對還是錯，如上面虛擬碼所示，如果exp1 是對的就會走statementsA;exp2是對的就會走statementsB;兩個都錯的話就走statementsC，對了 如果只有一個條件的話只要寫if\u0026hellip;else 就好，elif的區塊可以省略。還有，else 是代表前面的敘述式都沒有對的話，最後才走的流程。\n關於條件敘述你可以參考這個維基資料 注意if、elif、else 後面要加上： Python 沒有switch\u0026hellip;case的敘述喔，相關資料以及要實現的可以參考此網址 Python的迴圈敘述 1# 1) 2for i in range(start,stop,step): 3 #statements 4# 2) 5while (exp): 6 #statements 說明:\nPython的迴圈很簡單，就是for 和while敘述，然後如果只是單純的數字迴圈就用range(start,stop) 這樣i就會從start跌代到stop(不包含B)(沒有宣告step就預設為1)，舉例來說range(1,5)，i就會從1,2,3到4\n如果，你想要從5迭代到1呢？ 你可以用range(5,0,-1) ，這樣i就會 5,4,3,2,1\n當然，“：”很重要、縮排也很重要！\n注意，Python沒有foreach喔，如果要foreach 可以把range替換成你要的array物件，這樣就可以使用了\n相關資料請參考此網址 總結：寫個猜數字小遊戲 好了，就別只光說不練，來個簡單的猜數字小遊戲，希望你們可以更加理解條件和迴圈敘述，請在你所在的目錄增加一個“game.py”，然後請參考以下這段程式碼\n1import random 2 3ans = random.randint(0,10) #取從1到10的亂數 4 5print(\u0026#39;請猜一個0~10的數字\u0026#39;) 6play = True 7while(play): 8 guess = int(input(\u0026#39;來隨便猜一個數字吧: \u0026#39;)) #input出來預設為str，轉型為int 9 if (guess \u0026gt; ans): 10 print(\u0026#39;喔你猜得太大囉\u0026#39;) 11 elif (guess \u0026lt; ans): 12 print(\u0026#39;喔你猜得太小囉\u0026#39;) 13 else: 14 print(\u0026#39;恭喜你猜對了！\u0026#39;) 15 play = False 接下來執行python3 game.py就可以玩個簡單的猜數字遊戲囉！ 這個簡單的猜數字小遊戲我就不說明了，如果還是有不懂或錯誤，歡迎留言指教喔！\n","date":"Oct 3, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E7%B8%BD%E6%98%AF%E8%A6%81%E6%9C%89control-flow%EF%BC%81/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：總是要有control flow！"},{"categories":["鐵人賽"],"content":"安裝Python 工欲善其事，必先利其器！ 要學習寫Python，當然就是要先安裝Python啦！\n首先，你要先安裝Python，這裡我就不贅述了，你首先要去[https://www.Python.org/] 找到可以downloads 這裏找到你目前用的作業系統適合的安裝檔，下載後執行它，按照畫面的提示一一去安裝～ 這樣就可以囉！\n然後請打開你任何一種的command line，無論是windows 的命令提示字元還是mac os 的terminal 或者zsh (我個人是使用zsh 啦)，key 上\n1python3 --version 接下來如果你看到有個Python 的字樣後面接版本號，那就表示：我們可以開始寫Python囉！\n使用文字編輯器和Python的IDLE 你可以選擇vs-code、或是subl 甚至是記事本也可以，來撰寫你的Python程式。\n我這裏通常用的都是vs-code, 而這裡，你也可以在command line 裡打上Python3，進入Python的Shell，有點像是下圖：\n有點像是laravel 的artisan tinker 或者 php -a 或者ruby 的irb呢！Tips:如何離開這個IDLE呢？ 打上exit()就可以!\nHelloWorld 程式 好了，我們可以開始寫Python程式了，請再任意一個目錄之下，創造一個名為helloworld.py的檔案（Python的執行副檔名基本上都是以py為結尾），然後放入\n1print(\u0026#39;hello world\u0026#39;) 然後，回到你放helloworld.py的目錄之下，使用\n1python3 helloworld.py 一下子，你就會看到這個hello world這個字樣了\n當然爾，你也可以使用Python的Shell，那更為簡單，就是直接打下print(\u0026quot;helloworld\u0026quot;)就可以直接看到hello world啦！\n寫個問答小遊戲 如果只是一個hello world 真的還不是很夠味，所以就來寫個簡單的小問答，程式之所以叫做程式就是有input，也有output，所以，我們來寫個可以輸入些東西，然後也會輸出點東西的小程式\n1ans = input(\u0026#39;what is your favorite programming language? \u0026#39;) 2print(\u0026#39;your favorite programming language is \u0026#39;+ ans) 說明：\nInput 是一個小函數，他可以接受從command line輸入的任何文字，ans 這個變數接下input所收到的輸入，最後用print 把它印出來，在Python中，文字串接就只要用\u0026rsquo;+\u0026lsquo;就可以了！ 執行結果如下圖\n","date":"Oct 2, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E8%B5%B7%E6%89%8B%E5%BC%8F%EF%BC%9A%E5%AF%AB%E5%80%8Bhello-world%E5%90%A7%EF%BC%81/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 起手式：寫個Hello World吧！"},{"categories":["鐵人賽"],"content":"人生總會有第一次，人生第一次參加鐵人賽！不知道最後是否可以完賽哈哈\n我是一個php方面的偏後端工程師，資歷大概也才短短的兩三年，在工作時偶爾也會碰到javascript、HTML和小小討厭的css，所以能夠和Python有個連結，真的是純屬意外！ 而目前很可惜在工作中也鮮少使用Python，關於Python的更深學習與體會都是日後自己在以前學生＆下班業餘時間自學以及拿來玩樂的語言。\n雖然現在有這麼多對手出來，尤其是“Go”，但不知道為什麼我還是對Python情有獨鍾，甚至有時會想，到底可以將Python練到怎麼樣的程度可以去應徵Python相關職業呢？Python 可以涵括網頁、爬蟲、機器學習與大數據，幾乎能包的都可以包，或許是這樣，我選擇Python作為主題，當作一個正式學習的起點\n當初遇到這個語言是因為，我那時候打了一個關鍵字「如何當駭客」，後來有文章指出當駭客有個前提就是要學會Python!於是就邊玩邊做、邊學邊玩的馬馬虎虎學習這份程式語言。結果駭客沒當成，倒作了一位網頁工程師？！就是主要寫php，但“偶爾”也會被要求要看一下mysql、弄弄html\\css\\js的“假全端”工程師\n工作後，在空閒之餘，發現有些工作的需求實在沒有必要常常重複在做，於是將有些簡單的小動作程式化，自行開始一個小小side project：office ，這專案全部都適用Python撰寫，可能有些在現在還可以用、有些可能工作沒用到也隨之廢棄了，但這確實帶給我對於Python有著更深的認識與操作，也驚訝於它的強大\n我是超新手，如果你是高高手的話而且也看到我文章的錯誤，請不用客氣，盡情地指出我的錯誤吧！ 希望未來在Python工作界，我們可以有機會相互切磋！\n","date":"Oct 1, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/Python-%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%9A%E5%BB%A2%E8%A9%B1%E7%9A%84%E5%89%8D%E8%A8%80/","series":["PythonX30"],"smallImg":"","tags":["python"],"title":"Python 第一天：廢話的前言"},{"categories":["旅行"],"content":" 這是我二月初的日本出遊心得，雖然是舊文章，但值得拿出來分享 日本四天三夜之旅 在一月中參加校園團契舉辦的畢業生靈修班，至於參加的心得我就不說了，因為沒心得啊啊啊，對我來說，那就是新的空間休息，從新更新與主的關係XD\n而新的一份工作是三月才開始工作….呵呵 真是不知道這段時間可以做什麼…於是在我老爸的催促加上教會小組的鼓勵（慫 恿）下，展開這個日本之行，買了機票(香草航空)、上了agoda訂了一個青年旅館（個人頗推，oak hostel fuji ,費用低廉，品質也不錯！)、另外也和朋友買了個簡單的旅遊險（特別感謝這位好朋友！）\noak hostel fuji櫃檯check in之後左邊的第一道牆，很多旅人再這裡合照呢！而在每次他們旅客check out時，他們就會邀請你拍照，而這張照片你可以選擇帶走留念或者貼在這面牆當中，有lunch room(這裡有簡單的廚房工具，你可以買食物回來自助自理烹煮XD )，而這兩天晚上我都在這裡隨機找人聊天:一位就讀台灣東海大學的馬來西亞同學＆大阪來東京讀書的日本學生以及從台灣高雄來的大姐姐\n從五天四夜變成了四天三夜 不過，很不恰巧我訂的1/23 早班剛好遇到日本大雪，就這樣被取消了，而我在這當中也周旋了太久了，班機取消只有兩件事情，一是退款，二是延後，而在考慮下退款對於此行的損失太大了，於是最後選擇了延後，同時也怪我不夠當機立斷，要訂的時候已經只剩第二天1/24 晚上的飛機哈哈，於是，1/24的晚上飛過去之後，花了點時間熟悉地鐵和找住的地方，整個原本規劃的5天4夜變成了4天3夜啦，只能說這次增加了許多經驗值，下次如果再遇到一樣的情形想必會有更好的處理方式。\n想當然了，前一個禮拜針對的五天行程就要大大的調整，而且更是因為是第二天的晚上班機，嚴格來說能玩的有限，就剩下了兩天qq(因為我為了降低機票的費用選擇最後一天早上的班機……同時也是考慮到晚上有團契時間呵呵)\n第一天-輕井澤、高原教會、石之教堂 在整個權衡之下，我選擇我原本的第一天行程仍然照舊！要去我原定第一天要去的 石之教堂和高原教會 ，而上午居然迷路而且在沒有作太多功課之下（沒有很研究日本的交通系統，只知道要買日本suica 卡 ,但suica 卡不能搭新幹線，而新幹線的票有基本票＋座位票，這樣的設計完全不熟啊,卡了一點時間,但到了還是又小迷路，因為輕井澤根本偏僻），到了下午才到目的地，但在迷路的過程中也看到很不錯的風景而且走在當中非常靜謐且學習與一個人獨處的功課。另外高原教會的可逛性對我來說並沒有很高，同樣也是很美且與石之教堂一樣作為專門給結婚的教堂，整體以木頭打造，前身是日本基督徒思想家內村鑑三與其他日本文人聚集的“星野遊學堂”，所以這這一塊我沒有太多的想法(花極短時間逛完草草結束)，所以這裡我的重點擺在石之教堂。\n雖然迷路中…卻走出一條靜謐的秘境之旅\n石之教堂如前述所說它是一個專門用來結婚的教堂，擁有者是在那裡的星野集團，同時石之教堂也是內村鑑三紀念堂，裡面有許多介紹內村鑑三的思想與一生的事蹟，內村鑑三是日本基督徒思想家，其思想的重點就是“無教會主義”，而他的學生影響日本（其中一位還做東京大學的校長），另外他的思想也影響韓國和台灣，台灣長老教會前總幹事高俊明先生就是讀到內村鑑三所寫的“望安錄”，從而踏上基督徒信仰之路。另外，石之教堂的建立是因為星野集團的創辦人與內村是好朋友，而在內村鑑三過世多年之後，星野集團為了紀念這位創辦人的好朋友，邀請美國著名建築師Kendrick Kellogg在這裡建立，而建築師進而採納內村鑑三的思想：「只有在大自然中才是真正的祈禱的地方」，從而以石頭、木頭、流水、花草等多為大自然的材料所砌成。\n內村的墓誌銘寫道：『I for Japan, Japan for the World, The World for Christ, And All for God. 』\n高原教堂前身是星野遊學堂，是由內村等文化名人聚集，其核心思想為「透過遊玩學習」！好像是還有聚會 的？！\n高原教堂是日本第一座讓新人可以披婚紗的教堂，所以很多日本新人得照片在這兒\n在一整天的輕井澤簡單之旅，就速速搭日本的新幹線回去（這次回去就比較有經驗了呵呵），開始了逛街模式，就去新宿打發時間看看吧！\n第二天-晴空塔與水族館 第二天睡到十點多才起床，然後因著昨天和同樣住oak 的馬來西亞新同學聊天聊到在我住的地方附近，有一家一蘭拉麵的分店，自從一蘭拉麵來台灣開分店後，到了年底都還在大排長龍(個人不喜歡排隊但想吃)，真的很誇張，然而，既然去到了日本，就來吃吃看這家吧？！ 不用排隊的感覺真好啊～\n在沒有規劃四處亂逛的情況，意外走入了雷門和淺草寺、淺草神社，逛了許久走出來看到人力車的體驗，剛好遇到會中文的接待人員，聊了一下並且在可允許的預算裡面，體驗了一次人力車的感覺，而且接待人員也很親切的介紹淺草附近的歷史文化，真是知識get !\n45分鐘導覽淺草只要10000日幣！還可以體驗人力車（當皇帝的感覺？！）呵呵，導覽員（車伕）貼心帶著我去看看認識淺草附近的文化與導覽（橘街、狸貓街、日本的古鐘以及好吃好玩）\n聽幫我拉人力車的導覽員說，淺草寺前後被燒過17次，每次燒掉之後就募款在蓋比之前更大間，於是就這麼大間啦（狂！\n其實雷門就是一道門，全名是風雷神門，好像是有什麼風神雷神之類的，聽說也被燒過很多次\n隨後到達晴空塔已經是12:00了，呵呵，只能說我規劃的行程都和我實際的行程不一樣啊！ 各種花錢買門票各種拍照留念，花了許多的時間（想說打算去東京鐵塔的….於是就作罷….），當我出來的時候恰巧看到溜冰場，不知道為什麼我這個運動神經極不發達的我竟然跑去體驗！真是不容易！ 走了一圈，就草草結束體驗哈！ 最後，就去到了晴空塔底下的水族館，看了許多的魚讓身心放鬆XD 最後回到宿舍沈澱了整個日本行的所思所想,與同樣從台灣來的大姐姐聊關於去日本自助旅行的概念，天那！她給我超多相關資訊的，尤其是吃的（她超愛吃），也說到下次可以辦JR-Pass ,還推我一個日本自助旅行的社團和網站！！看來這對我第二次的規劃會有非常大的幫助（非常感謝她）……最後聊到lunch room要關起來了XD，好啦為這次日本行畫下一個不錯的句點，之後明天一早搭著回台灣的班機啦,,.\n覺得無論何時的晴空塔都有不同的美感，不過上去是種奢侈的享受，哈哈! 不只是入場要錢(一開始只能到350樓，如果要去更高的450樓還要再加錢～)，各種拍照留念也要錢（可是用他們的專業相機，他們會提供一個很不錯的紀念框啦），一次1300日幣!然後不知道是不是剛好是時間特展就是這些？總之上去各種動漫鋼彈XDDDDD (根本動漫之塔)\n花了1600日幣體驗人生第一次溜冰，呵呵各種矬XD 只能說還好只有我一個人去，頂多被那些日本人笑～要出去時還跌了一個大跤，沒關係，跌倒後就再站起來麻\n晴空塔底下有座水族館，進去要2050日幣，覺得還算不錯，但如果不是我這種文青型的可能不適合，以後想帶女朋友去水族館啦！\n結論 第一次一個人出國（去大陸那不算出國啦，而且是跟學長們一起去…）,剛開始有點挫挫的，但後來到了當地，順利搭上飛機、順利check in，反倒開始慢慢可以享受旅程了…\n其實這樣看來，我算成功的放鬆了一些心情，而我覺得日本和台灣其實都一樣，很喜歡“抄”，只是不同的是日本會想辦法內化成自己的東西，而台灣則是原封不動的搬過來…..台灣號稱多元文化共存，但僅做到共存，卻無融合，間接導致了台灣文化其實就是無文化，說到台灣，你的頭腦會瞬間閃過哪些東西呢？而這些東西，真是台灣獨有的嗎？可怕了，我們的台獨最終只有法理台獨，卻沒有文化台獨，我認為，這不是件好事情……相較於日本，同樣的也是多元文化共存，但他們卻做到了融合！說到日本，你的腦袋會閃過哪些東西呢？而這些東西，是不是日本獨有的呢？另外，不得不說台灣在各方面都有很多可以向日本學習的地方…..\n而看到內村鑑三與石之教會之後，同時也觸發自己對於呼召的再次思考，想起過去自己在青宣所寫下的禱告詞,突然覺得我應該會和內村鑑三一樣，也會被視為我們各自國家教會的異類吧？！ 我傳福音的策略是“願者上鉤”，說真的如果你想聽，我願講; 但我從不，也不願“刻意”向他人尤其陌生人去傳福音，因為福音在我的認為是一種“生活方式”，或許吧？！ 在許多長輩或台灣基督教界、外界的眼光看來，我會是個不傳福音的人，然而，一定要那種刻意的傳福音就是傳福音嗎？學習著以基督徒的思想回應當代的議題、試著搭起與各學科連結的橋樑，難道就不算是大使命？！我覺得，要讓人決志非常簡單，但要讓人一生當中持續相信主卻很難，而這兩者，同樣都需要上帝的強力介入，總之，我只能說自己所看重的和許多人所看重的不同，失落的基督徒需要陪伴！失落的基督徒同樣也需要「神學性的轉向」！目前最需要的是個可被傳承的信仰，而不單單是個速食的宗教\n後記：花費 說真的這樣算下來，我這一趟日本花不到三萬元呢！(以下均為新台幣)\n旅遊保險 472\n機票 11,125\n住宿 1,725\n在日本的網路 599\n其他 12,881 (在日本的交通、吃、門票、紀念品、伴手禮)\n總共才 26,802 元\n而老實說，這些費用都是可以更省的！第一次去比較沒經驗說…\n小君曰：下次還想再去日本玩！只是不會想在這麼冷的冬天出去啦XD 真的好冷！\n","date":"Jun 9, 2018","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E6%97%A5%E6%9C%AC%E5%9B%9B%E5%A4%A9%E4%B8%89%E5%A4%9C%E4%B9%8B%E6%97%85/","series":null,"smallImg":"","tags":["日本"],"title":"日本四天三夜之旅"},{"categories":["讀書心得"],"content":"即將到達年底，目前大概讀過5-6本書，基本上是達成年度閱讀目標了哈哈，有哲學；有輕小品；有信仰；也有小說，真的頗雜呵呵，而其中最厚的一本就是去年我的斗六浸宣家人在送舊活動中送我的這本C 型觀點。許多只要談到公共神學或講公共議題的講員一致推的一本書，我想讀完過後，我大概懂為甚麼這麼大推的原因。因為裡面的內容無所不包、從整體地球環境到國家社會以至於個人的部分，幾乎關於公共層面上的問題基本上都可以在這本書都能獲得看法與啟發。而其中我很喜歡的是前三章的內容，因為作者並沒有直接切入問題的寫作方式，而是一種總綱和概念的方式分別談到基督徒蒙召參與世界、蒙召發展基督徒思想、發展基督徒的行動與見證。而最後藉著談完種種議題之後，呼召我們基督徒們作領袖!\n而在幾個禮拜前終於看完了這本書，我必須坦白的說：它瞬間衝上我最喜歡書籍排行榜當中，並且我將之視為影響我信仰的其中一個關鍵，看見日後我將會帶著它並也要一讀再讀的情況，大概可以看得出來，我是多麼喜愛這本書的程度了，斯托得不愧為一代福音派的神學家，我很喜歡他的論點：一手看聖經；一手看報紙。同時也坦承，斯托得是影響我頗重要的一位神學家之一\n第一章：改變的世界-基督徒應該參與嗎? 第一章談到基督徒蒙召參與世界，我非常喜歡本書使用「參與」這個動詞，既不帶一種強迫也不帶完全的妥協，作者首先簡單交代了整個基督徒參與世界的過程，並以四兩撥千金之力明證：「傳福音並不與社會關懷互相衝突，而是密不可分……」，他談到基督徒能參與世界的只有兩條路：一是逃避；二是參與；以及第三種可能- 妥協(但作者也提醒了如此基督徒與世界無異，不過就是成為這中間的一部分罷了……)，那反問我們，選擇了甚麼方式呢？\n第二章：複雜的世界－基督徒的思想有特色嗎？ 接續前面的第一章，其中一個段落是這樣寫的\n「面對現代生活的複雜性，基督徒會受誘惑，走向兩種極端。第一種人是為絕望所擄，甚至落入犬儒心態…….他們不相信神會透過聖經向我們說話，引導我們進入真理。第二種人則是十分天真、單純，他們希望快速解決問題，看事情黑白分明，而沒有在聖經的亮光中作智慧的反思；他們可能否定問題，引用經文證明，抨擊與他們看法不同的人，採用各種辦法，獨獨不在聖經的亮光中與我們所面對的問題掙扎….因此，我們所要作的，乃是發展基督徒的思想……」。\n在這本書當中，對於我這一生的信仰過程來看，說真的第一次聽到基督徒思想這個詞兒，但也並不是完全的這麼陌生。而在閱讀Ｃ型觀點的過程中，這詞兒完全打開基督徒對於參與世界的新道路，也算是一條舊道路吧，點出了基督徒參與的重要關鍵和行動；如同這詞的文字意涵一樣，思想並不是一蹴可幾的；也不是漫無目的和沒有特徵及目標的，乃是在我們的生活中，一點一滴慢慢累積，藉由聖經的真光、聖靈的感動、聖父聖子的指引，逐漸的長大成熟。而為什麼我可以斷然認為這詞不是漫無目的和沒有特徵的呢?原因是作者在這一本書當中，引用布萊默(Harry Blamires) 對於基督徒思想的詮釋，我特別喜歡也特別有感受－\n「基督徒思想不是指對宗教類事物的看法，而是能夠按「基督徒」的樣式，來思考所有世俗的事，亦即有基督徒的觀點，這種心思不是分裂的，好像一個基督徒在話題轉到聖經或轉到新聞時，思想就從基督徒的架構裡跳進跳出，真正的基督徒思想絕非如此。」\n「這種思想(基督徒思想)是受過訓練、資訊充足、裝備齊全，能夠按基督徒的前提、架構、來處理世俗的議題」\n布萊默列出了六項他心目中基督徒思想的特徵(也收錄在C 型觀點的內容裡面，我覺得這可以作對於自己的檢視和重新再省思)\n基督徒思想的立場是超然的(他看的甚遠，超過今世、直入永恆，直達天堂與地獄，而同時在這神所造、所維繫、所掛慮的世界上有所承擔) 基督徒思想對罪惡有所認識(原罪會使最高尚的事也變成「追求虛浮」的管道) 基督徒思想有真理的概念(神所賜的啟示不容任何妥協) 基督徒思想是接受權威(神的啟示是要我們屈身順服，而非平等的與祂聯結) 基督徒思想關懷全人(承認個人的價值，絕不是被奴役的機器) 基督徒思想神聖的特徵(譬如，將性愛視之為「神所設計之最有效的途徑之一」，能開啟人心認識真實[reality]) 整個第二章，作者藉由布萊默的基督徒思想滿滿的詮釋和定義，並且輔以整個聖經的大敘事(當然我們還是要努力多讀聖經數遍拉!)，談到基督徒思想必須奠基於健全的神論、人論、基督論、救贖論、教會論等五大基礎之下建立而成，(疑?好神學的名詞?!)。這使我想到有點熟悉的畫面……過去毛樂祈所寫的小老百姓神學和巴比倫上大學是不是也有點參考這裡的內容呢哈哈? 感覺似乎有這麼一點似曾相識的場景，是不是買了C型觀點基本上可以不用再看毛樂祈這兩本書(喂~ 不是啦! 那兩本是前(小)菜，給胃口比較不好的人可以吃得下去的! 而我覺得C 型觀點像個大餐，可能有點難啃卻味道卻有回甘且常在口齒留香)，在這短短的一章完全看到我們基督徒該如何參與這個世界的重要關鍵。好讓我們可以好好來思想我們該如何發展「基督徒思想」以便於我們參與世界，而不是默默的逃避和妥協！\n當你讀完這本書，或許可以再重新想想「基督徒思想」的命題，你會怎麼想呢？我覺得基督徒思想肯定人的價值與形象同時也談到人的原罪墮落，高舉聖經與上帝的權威卻不至於要強迫或威逼別人接受，在面對許多議題與潮流接踵而來的挑戰，不是為了要快速以簡答題簡單帶過，反而要靜靜的坐下來，等候、觀察、反覆思想的寫下這道公共參與的申論題……在回答的過程中，或許第一次就寫對、也或許好幾次都覺得沒有寫得好、常常重複擦掉、重寫、擦掉、重寫的動作……。\n第三章：多元的世界－基督徒的見證有影響力嗎？ 來到這本書的第三章，也是要進入暢談議題前的最後一章，談到基督徒的見證與行動，斯托得似乎在他那個時代就看出多元主義的真相：「真理被視為個人的見解，不屬於大眾，主觀而非客觀」，這使我驚訝，因為在現今更為後現代的後現代中，多元主義是更加的主流，宗教及權威將越來越被架空，似乎嗅出有種不想要被規則束縛的另一種極端味道，作者給予了我們一種新方向來思考：如果基督徒視多元主義為表達不同的一種方式，就會發現我們需要容忍、尊重、並要委身於勸服！在這現實中，基督徒與非基督的與眾不同，歷史上的見證與聖經的敘事，不也再再證明，我們還沒有到完全絕望的地步嗎?! 現今的基督徒社會絕對還有這個能力與資格可以再次影響非基督徒社會，轉眼看看基督耶穌在當時的榜樣，讓我回到作者在這章的開頭的提問：在大多數人為非基督徒的國家，基督徒是否應該勉強別人接受他們的看法呢? 當然，這需要極大的智慧，藉由這本書的啟發，藉由作者的思考方向和提醒，我們必須觀察這個社會，從「True Truth」出發：也就是從下面來的權柄，及不爭自明的真理、價值自顯的事情。當然不只是這樣，在這章也提到最重要的還有那老生常談到不能在老生常談到的：「祈禱與傳福音」等方式來闡述基督徒的行動與見證，為了保持大家想看這本書的慾望，就不多多贅述了。\n議題討論與啟發 接下來的第四章到第十六章，就是各種問題的發現、觀察，從戰爭、恐怖行動到環保議題、以及台灣之前沸沸揚揚的勞工議題和同性婚姻(作者是過世的英國人，不可能以台灣為觀察的立場和現況喔，先提醒眾訪客不要誤會XDDD)，斯托得以他豐富的神學底蘊，詮釋他從這每個問題觀察出的基督徒可以思考方向，每一章皆有從聖經經文的引用；歷史的事實以及真實的現況，在閱讀的過程中，不妨我們先別急著看下去，看看自己和作者所想的是否有一樣或不一樣的地方?! 有沒有想到書中提到的聖經經文?! 有沒有發現自己還沒有想到的地方呢?順道一提的是，過去這幾年的觀察以及個人的立場，這些事情並不是完全沒想過！(老子這20幾年可不是白活的)，發現到自己有時也無法完全的接受上帝的某些理念?! (會抗議上帝根本不苦民所苦，疾民所疾嘛XD) 然而，我卻發現，藉由這樣閱讀C型觀點的過程，看到作者引用的聖經、敘事、和實況，常驚訝原來還有這樣的解套方法?! 以至於自己承認自己的有限與不足，當要學習完全順服在基督的話語之下。\n舉一個例子來說，當我看到關於墮胎與安樂死的議題時，我個人原本對於絕症病人的看法，是認為要體貼他們在治療上的痛苦與難受，從而支持適時的「安樂死政策」，於是將上帝對於人在生命的主權部份架空，認為人是有這個自由意志選擇死亡，然而，在作者的提醒之下，我才發現我好像錯置了上帝的創造，如果我們反對墮胎是因為上帝對於這生命的主權，那難道死亡不是嗎?! 還有聖經也明明的寫到不可殺人，可是我又抱怨了，上帝呀，難道你不體貼這群絕症病人的痛苦呢? 而書中竟意外的提出非常適合的解套方式-安寧緩和治療(palliative care)，在現今醫療科技進步的狀況下，既合乎體貼人的軟弱與痛苦；又不倒置神對於生命的主權。翻轉我原有的立場與想法、再度更新我的基督徒思想！\n而其中有一章新生物科技的部分，不是斯托得寫的，乃是懷亞特(John Wyatt) 教授執筆，同樣我也覺得其論述精彩，一點也不遜於斯托得對於問題的詮釋和觀察，在這本C型觀點讀起來也沒有感覺到非常的拖序，反倒補充及完整了原本C 型觀點的論述，而身為資訊人的我，讀著這章新生物科技的反思，似乎也覺得可以套用在現今的資訊科技也不為過：就是尊重上帝創造的次序、同時在適時的行動中，體貼那些隱藏未見的苦悶痛楚。懷亞特最後結論喊到：「可以確定的是，整個基督徒團體必須一起來思考、應付，要努力去了解周圍快速的變化，並且去分辨如何以基督信仰來回應」\n另外，由於已經是上班族的自己，斯托得裡面講到關於工作的問題，他竟也觀察和關心奴隸與壓榨的問題，藉由肯定人的價值和神創造初衷這基礎上，對於工作下出一個我極為喜歡的定義：「工作就是花費能力(或是勞力或腦力，或兩者兼備)來服事別人，工作者因此能實現自我、貢獻社會，並歸榮耀給神。」 前陣子我也看過了一本有談到工作的屬靈書籍，那本書反倒簡化成了工作是神的呼召，這當然沒錯的，我也是予以肯定，但我覺得那淪為一種理想面上的詮釋，對於腐化墮落的世界並不完全適用，只是就名詞很文言和屬靈罷了，斯托得納入了工作者對於自我的實現與社會貢獻在裡面，很是打入我的心中，當然，前面也有提到基督徒的思想是要我們屈身順服，而非平等的與祂聯結，為此我也苦思了一下，好像這種斯托得的神人合作觀並不完全正確……；但換個角度想，屈身順服於上帝就真的失去了自我嗎?難道追求自我實現就不是屈身順服於上帝?! 馬太福音10:39寫道「得著生命的，將要失喪生命；為我失喪生命的，將要得著生命。」 這或許是一個極大的奧秘和對此議題的回應，我也沒有完全的解答，我想就先學習與這樣的弔詭共存吧?!\n總而言之，這第四章到第十六章的豐富內容，我將其視為前三章的實際操練和演練，這本書的值得之處也莫過於此，並不是那種浮在天上的理論來理論去，好像無法實現似的；亦不過度的簡化問題、好像用簡答一兩句話就來搪塞我們，當然，更沒有以指令的方式來勉強我們或強迫我們一定得這麼處理，足見作者的寫作功力之高與基督徒思想之深入，實感佩服且像是一個活在面前極好的學習榜樣，不是很難實現的。\n呼召基督徒做領袖 最後，斯托得以一種牧者的心態來鼓勵呼召我們這群「基督徒」，要做領袖，並不是那種名義上、有權力榮華的外表領袖，而是生活上各方面的領袖，意謂「基督徒領導」，他進一步提供這領導的五種成分，在此我也分享給大家：「異象清楚、努力不懈、堅忍不拔、謙卑服事、嚴格操練」。\n總結 再度引用本書的最後幾段的文字作為這心得的結束。\n「換言之，神要我們每個人都在某些方面、擔任某種程度的領導，所以我們需要盡心尋求祂的旨意，向祂呼求，讓我們有異象，知道祂呼召我們的一生要從事何事，並懇求祂施恩，使我們能盡忠(不一定成功)，順服天上來的異象」\nC 型觀點雖然讀完了，但我覺得這本好書值得一讀再讀，正也呼應我前面說到要將這本書隨身帶著提醒和翻閱；而這正是我實踐的開始! 藉著這本書的啟發，我又多了個新的立志：「做位忠心的基督徒思想家」！\n小君曰：「不知道引用這麼多段文字會不會違反著作權被告阿哈哈哈，在這裡只好推薦大家多多買書益善，這絕對是一本你不容錯過的好書、值得收藏的好書；拜託別告我阿QQ」\n","date":"Nov 10, 2017","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E6%88%91%E8%AE%80c-%E5%9E%8B%E8%A7%80%E9%BB%9E%EF%BC%9A%E8%AB%87%E5%9F%BA%E7%9D%A3%E5%BE%92%E5%A6%82%E4%BD%95%E5%8F%83%E8%88%87%E4%B8%96%E7%95%8C/","series":null,"smallImg":"","tags":["C型觀點"],"title":"我讀C型觀點：談基督徒如何參與世界"},{"categories":["讀書心得"],"content":"我的興趣就是閱讀，我喜歡看些書學習些東西、認識些東西，藉由看書的過程中，我可以看到作者的思想與角度\u0026hellip;不覺得這是一個絕對不賠錢的投資嗎? 花幾百塊和幾小時，就可以把作者可能終其一生或深層的功力收藏進自己的腦袋裡! 讚\n但是，「盡信書不如無書」，我也不是倡導所謂的\u0026quot;閱讀萬能\u0026quot;! 閱讀只是一個獲取知識的其中一個方式，但重要的是：我們可以享受在這交流中的快樂。因為我覺得閱讀，其實就想在和作者聊聊天，不管這位作者還活著；抑或已經過世了。\n前面前言(廢話)這麼多，總之，寫這篇文章是來回憶我目前所讀過的一些書，而且來和大家分享還有一些我覺得極度熱愛甚至可以說是到愛不釋手的幾本書，另外還有一些影響我人生的重大書籍。 那先講一下我承認過去確實屬靈書籍讀的有點多，以至於等等介紹的書很多都是屬靈上的書，但我相信因著我分享這些我所熱愛的屬靈書籍，可以幫助許多年輕基督徒。而往後的日子，我想我會降低屬靈書籍的濃度，注意，不是要\u0026quot;完全消滅\u0026quot;屬靈書籍，原因是我希望藉由非屬靈的書好讓我可以瞭解非基督徒們到底在想得是甚麼? 而且他們也有些不錯的東西可以借鑒，甚至如果可以，我想也藉著過去我學習及奠基的\u0026quot;基督徒思想\u0026quot;，回應或者甚至可以對自己的思考改善改變。\n回顧我所閱讀過的書籍，我發現，在我上高中以前，我好像沒讀過甚麼書，應該準確的說，是\u0026quot;課外讀物\u0026quot;。在從國小到國中的這段時間，我在讀的好像是\u0026quot;參考書\u0026quot;。 家裡的參考書幾乎堆積的跟山一樣多\u0026hellip;哈哈 我想這是許多台灣囝仔的真實寫照。 我覺得有點小小悲哀和可憐，在這段期間我活得好像不是自己、就是聽著大人說的話：好好讀書，就是好好讀書XD 唯一印象中比較深刻的幾本書，大概就是\u0026quot;史記\u0026quot;和\u0026quot;論語\u0026quot;了，你看，我連讀的課外讀物都這麼\u0026quot;學科\u0026quot;。在這裡爆一下自己的小料，小時候我是立志想當一位\u0026quot;現代儒者\u0026quot;呢XDDD 甚至那段時間接觸基督教，認識上帝，常常在想的是要如何讓\u0026quot;儒家思想\u0026quot;和\u0026quot;基督教思想\u0026quot;融合\u0026hellip; 恩，雖然小時候的我是如此\u0026quot;隨波逐流\u0026quot;，但不免看出我其實有哲學家和思想家影子，為日後的\u0026quot;獨立思考\u0026quot;多少帶來一些幫助\u0026hellip;.\n到了高中時期，有一些變故上的問題(我想這可說一個見證了XD)，總之是原本要讀的高中不讀了，改到去比較鄉下地方的高職念，然後，開啟了屬於我的\u0026quot;學霸時代\u0026quot;! 怎麼考都怎麼第一名，獎學金都比學費還多\u0026hellip;最後，在沒有甚麼升學壓力和競爭力的情況下，開始閱讀並讀到了一些可以說影響我一生關鍵的幾本書\n我的閱讀旅程 大學不是考上就好 (道格拉斯) (連結 ) 這算是我印象中最深刻的一本課外讀物，也可以算是我讀過的第一本開啟我獨立思想的書籍吧或課外讀物?! 偶然某一天在學校的圖書館，\u0026ldquo;莫名其妙\u0026quot;拿起了這本書，剛好有點看得順眼，順手借了回家看看，裡面的編排有點類似\u0026quot;演講集\u0026rdquo;\u0026hellip;..裡面收集了各種名人對於上大學的人的建議和想法，開啟我對於我想要認真經營自己大學生活的想像。而同時，這本書我還有因此寫讀書心得參加比賽呢，但沒得獎哈哈，大推給要準備上大學的新鮮人看阿!\n不乖 (侯文詠) (連結 ) 侯文詠的大名大概是在國中的國文課本有認識到，除此好像就沒有其他認識了XDDD 我還以為他只是個死人，原來還活著阿! 總之，我有點忘記是在怎麼樣的情況下巧遇這本書，就是把這本書買下來了，剛剛好也讀完了、意猶未盡在讀一次! 這是我第一次讀侯文詠的書，從此踏進這個大坑，每逢他的新書就買就看哈哈。這本書比起前面的大學不是考上更好有著對我人生更關鍵性的影響。從小到國中，我真的是\u0026quot;很乖\u0026quot;，沒有思考過到底\u0026quot;為甚麼\u0026quot;。 自從讀了這本書開始，至少我開始有個\u0026quot;獨立思考\u0026quot;的起點和種子\u0026hellip;不想要所謂的\u0026quot;隨波逐流\u0026quot;\u0026hellip;\n但以理讀書法 (金東煥) (連結 \u0026quot;) YA 終於來到我人生中讀過的\u0026quot;第二本\u0026quot;屬靈書籍，ㄟ? 那第一本是甚麼咧?!\n第一本是學園傳道會出的擊開綑鎖，那是我受洗後從某位教會阿姨送給我的受洗禮物獲得，很快的! 我就讀完那本擊開綑鎖，裡面的內容大概就是我們要如何對付那些罪和\u0026quot;營壘\u0026quot;\u0026hellip; 雖然對於\u0026quot;當時我\u0026quot;很有幫助，但現在幾乎對我失去影響力了，原因不是說我不需要再去突破挑戰那些不好的東西，而是我的信仰已經到了\u0026quot;另外一種階段\u0026quot;。但＿＿當我讀完嘗試將這本擊開綑鎖的內容拿去問牧師，剛好那個送禮阿姨聽到我和牧師得對話，隨口說了一句:「哇! 覺得送你書好值得喔」\u0026hellip;.大概是建立這樣一個美好的回饋讓我開啟閱讀之路吧!! 為此我感謝那位教會阿姨的稱讚哈哈。\n竟然花了一個小篇幅介紹我讀的第一本屬靈書籍-擊開綑鎖，但我想介紹的是但以理讀書法阿! 這本書有點偏\u0026quot;成功神學\u0026quot;的味道，對於當時我的信仰狀況和階段，我確實買了不少那類的書 像活出美好、活出全新的你之類的呵呵。對於一個\u0026quot;正確信仰\u0026quot;的部分，這本書的內容確實有些爭議\u0026hellip;..但就當時他帶給我兩個重大意義：一就是讀書是為著神讀書，雖然感覺裡面說的有些如今我有些不完全認同，二就是，**我要留甚麼東西給我的後代，對於我的後代它們最重要的是甚麼，而這本書提到：應該是信仰！\n帶我去月球 (侯文詠) (連結 ) 剛剛說到我因為不乖這本書從此踏入侯文詠的坑，帶我去月球就是繼不乖之後，侯文詠當時的新書，這本書對我來說不算是影響我人生的\u0026quot;重大關鍵\u0026quot;，但有到我愛不釋手的地步。我超少看小說，也不喜歡看小說尤其是長篇的那種\u0026hellip;..所以你要叫我看金庸除非是電視的否則小說我絕對不看(傲嬌貌\n這本短篇的小說，看起來有點像看電視劇XD 但我很喜歡裡面的編排，故事平易近人，偶爾段落中帶有一點哲理，我還看了兩次之多，其中一次還花了一個晚上徹夜讀完，甚至讀到留下眼淚，讀完後才發現 ㄟ 晚上囉?!!! 而我針對這本書所寫的讀書心得 ，還有參加全國比賽得獎呢!!!! 嘿嘿\n高中時期讀過的課外讀物，當然不是只有這四本拉，還有秘密以及剛剛說買過的活出美好啦、**我也很喜歡的\u0026quot;純潔\u0026quot;(Kris 牧師寫的)(我也很喜歡但不多作篇幅介紹)(連結 )、死神少女(電視小說)還有很多很多，順道一提秘密這本書，這本書雖然對當時的我很有幫助，但直到大學對於信仰有更深的認識之後，才知道裡面有些是不符合聖經真理的! 那可是新世紀運動的產物!! 在這現今世代，真的要很小心\u0026hellip;\n在順利的上大學之後，由於對於信仰似乎有更深的認識，無論信仰、年齡也都到了另外一種階段，同時也參與基督教社團-信望愛社，不得不說所讀的書很多都是屬靈的書籍\u0026hellip;\n認識聖經的八堂課 (斯托得) (連結 ) 青年宣道大會是個人推薦每個基督徒都應該要參加一次的盛會，本人何其有幸可以參加到兩次，而在第一次的青宣中，我去逛逛書攤\u0026hellip;當時信仰雖到了一個階段，但很好笑我還沒有讀過聖經一遍呢XDDDD 也沒有一個很系統式的讀經習慣，更枉論有歸納式讀經法囉哈哈! (記得那時期之前的靈修習慣，應該就是買本荒漠甘泉之類的書每天讀一篇吧ㄎㄎ)\n而莫名其妙我也不知道為甚麼，竟就問了\u0026quot;書攤老闆\u0026quot; 「有沒有不講歸納式讀經法的書(因為我還不想系統化的讀經阿XD)，但卻有對聖經有個簡單介紹或者了解的一本書?」 那位老闆居然貼心的跟我介紹這本斯托得寫的「認識聖經的八堂課」，然後從此踏上對斯托得書籍的坑(?!\n起初我也沒有懷抱和抱負說我要讀完聖經一遍XD 但是因為讀過這本認識聖經的八堂課 整個不知為何大開我對於聖經的胃口，立志大學畢業前讀完一遍聖經，結果也成功達成了 YA 目前挑戰第二遍中哈哈，而這本書也幾乎到了我愛不釋手的地步，目前隨身帶著，正在讀第二遍中\u0026hellip; 鼓勵和推薦給各位不喜歡讀聖經的弟兄姐妹購買，有彩圖，還不錯看!\nWordPress 中文佈景主題開發指南 (Yuxin) 這本有點亂入XD 當個中場休息放鬆一下，但因為這本是電子書，我記得當時還把他印出當紙本來看呢! 還自己下載了另外講PHP和MYSQL 的電子書，也是把他印出來邊看邊寫。 從此打開我進入PHP的旅程，從Wordpress 到 Laravel ㄎㄎ 也因為這樣我慢慢開始往程式之路發展呢 這本書好像絕版，有點找不到XDDD\n我是好爸爸 (史雷頓) (連結 ) 這本書算是這大學時期讀過的書中，少數不算是屬靈書籍的那種\u0026hellip;.但作者是基督徒，在撰寫上仍帶有一些屬靈用語，唉呦我好像太區分屬靈書籍非屬靈書籍了，求主保守和原諒。而這本書是天下出版的，所以我不算在屬靈書籍內!\n在一個偶然的情況下，我的好朋友送了我這一本書，我也忘了是怎麼樣的情況，總之我和某位朋友推薦了這本書 他就和我借來看看\u0026hellip;.然後這麼恰巧! 就作者來台灣演講，剛好我有這個榮幸聽他的演講\u0026hellip; 活動結束不免俗的有\u0026quot;簽書會\u0026quot; ，身為愛書人怎麼可以錯過這機會\u0026hellip;. 但書在我另外一個朋友那裡阿\u0026hellip; 狠下心，在會場又買了一本書要衝去給作者簽名\u0026hellip;..(ㄟ原本朋友送的還免費呢QQ)\u0026hellip;..但書櫃裡面怎麼容許有重複的兩本書呢?! (好啦是我不容許) 於是打了個電話給另外一個朋友，我借給你的那本書，就送你吧\u0026hellip; (笑~)\n我也是頗喜歡這本書的內容，作者提到十種工具幫助我們去經營一個家庭，**他提到身為\u0026quot;父親\u0026quot;的重要性以及該如何做為一個好父親，我覺得非常的實用，為了日後有機會走入婚姻(疑?)，我讓這本書也像前面那本聖經的八堂課隨身帶著提醒自己呢!!! 只是\u0026hellip;.目前還沒有對象和孩子(哭XD\n總之這本書反倒給了我一個人生裡重要的立志：做個好爸爸、好丈夫，這就是我人生目標之一\n現在決定未來:給基督徒青年的20個屬靈忠告 (李在哲) (連結 ) 我非常喜歡這本書，也是一樣到了愛不釋手的地步\u0026hellip;..遇到這本書的狀況是\u0026hellip;.只要是一般有在跑的基督徒都知道\u0026hellip;..校園行銷真的不錯(笑~ 於是，就購入了這本書，但非常不後悔，而且它也是我隨身帶著的一本書，幾乎與聖經的八堂課和我是好爸爸同地位XD\n這本書的結構很清楚，首先講到年輕人的困境以及重要性，之後便如標題般講到了它對於忠告\u0026hellip;..其中有工作、異象、歷史、愛國等無所不包，而每一個忠告就是一個章節，所以讀起來甚至就算跳著看也沒關係(疑? ，而讀到的每一篇，我都覺得點頭如搗蒜。甚至藉由這本書，帶給我一個新的概念：「神的救贖史觀」。　我非常、極度，推薦給許多認為自己是\u0026quot;年輕人\u0026quot;的基督徒看 哈哈\n十架門徒:斯托得傳 (司迪爾) (連結 ) 剛剛有說到我從此踏上了斯托得坑，原因是我後續又接連讀了世界在等待的門徒、做個真門徒、別埋沒你的腦袋、未來門徒的4個挑戰等書\u0026hellip; 但讀了這麼多有關於它所寫的書，怎麼不也來讀讀關於它的傳記呢\u0026hellip; 忘了是怎麼樣的狀況，那時我要去參加每年一次的斯托得講座，然後在北上之前剛好教會長輩借給我這本「十架門徒」，讓我在北上搭火車的時間可以看看，居然就看完了(從雲林到台北的區間車真的很久)\u0026hellip;..我通常不很喜歡看傳記的 但是，這本傳記卻提供了不少我對於人生的解答，也點醒了我一些對於公共議題上面的認識等\u0026hellip;. 在下火車之後衝去校園書房買這本書\u0026hellip;.但因為當時學生較沒錢沒有 買下來\u0026hellip;.在一次書展才將它完全收藏在我的書櫃中。斯托得說過我們要一手拿聖經，一手拿報紙，這著實影響目前我的信仰階段與基督徒思想呢。\n相較於高中時期，我在大學時期閱讀的書就相較多了，幾乎可以說一年會有讀到一本書這樣\u0026hellip;..希望來年可以挑戰一年讀到6本書!!!! 出社會後，由於剛開始要穩定自己的工作情勢，有點少看書\u0026hellip;.但還是有看到一本我也覺得很喜歡並值得推薦的書\u0026hellip;.\n回憶父親的一百種表情 (日青) (連結 ) 好啦! 說真的這本書有點是要硬湊 10這個數字的哈哈! 但這本書讀起來富有溫度，和我之前所讀過的書味道非常不一樣，你可以看看我前面推薦的幾本書就可以對我讀書的喜好略知一二 ，遇到這本書的狀況是那時我剛好要接待一位我的馬來西亞朋友，在因緣際會下逛書房逛到看到的書籍。\n我很少讀書讀到流淚的\u0026hellip;. 但這本書卻是少數目前唯二讓我留過淚的書籍，第一本就是前面侯文詠寫的\u0026quot;帶我去月球\u0026quot;。也因著這本書，我大概感覺\u0026hellip;.好像天下的爸爸似乎一個樣XDDD 因為作者書中所寫到的爸爸樣子就和我所認識的爸爸樣子幾乎一模一樣阿XD\n後續補充：結果湊齊10本書之後還真的想到有第11本書值得我拿出來推薦，值得拿出來一談\n做吧，別遲疑 (凱文狄昂) (連結 ) 這一本書我覺得可以比擬校園出的明白神旨意，是我一位好朋友在當時我大學畢業前迷網所推薦給我的一本好書，這本書主要呈現的是到底甚麼是神的旨意呢? 它不是魔術八號球那般，不是說\u0026quot;我就是要你做那個工作\u0026quot;那樣\u0026hellip; 神的旨意明明的寫在聖經裡，它不是要我們在那邊遲疑不決做不了決定甚至將\u0026quot;神的旨意\u0026quot;當作拖延的藉口\u0026hellip; 值得我另外在推薦的一本好書!\n後記： 目前我正在看的一本書是斯托得寫的\u0026quot;C 型觀點\u0026quot;，說真的前面真的很棒，也是到了一個我很喜歡很愛不釋手的地步\u0026hellip;..如果我讀完了它一定它會擠下這10本書的其中一個或者我會在為這本書開新位置\u0026hellip;..可惜我還沒讀完XD 所以暫時不放在這裡討論囉哈哈\n小君曰：整理我看過的書及分享我喜歡看的書，也是在看自己的成長史呢\u0026hellip;.\n˙\n","date":"Oct 15, 2017","img":"","largeImg":"","permalink":"https://jimmycode.tw/posts/%E6%BC%AB%E8%AB%87%E6%88%91%E7%9A%84%E9%96%B1%E8%AE%80%E6%AD%B7%E7%A8%8B/","series":null,"smallImg":"","tags":["閱讀史"],"title":"漫談我的閱讀歷程"},{"categories":null,"content":" Hi 大家好！ 這張照片是之前去花蓮時請朋友為我拍的一張照片，花蓮是個好地方～ 目前是一名居住在台北的工程師/Developer＆基督徒。同時也是一名台東囝仔，如果你想要知道台東怎麼玩的話歡迎來問問我\n目前在某媒體集團擔任小小小後端工程師，同時也不知道這份工作會做到什麼時候，隨時有準備明天走人的打算（啊不是！這亂講的～請不要告訴我主管or 老闆）\n人生的願景是想要成為厲害的工程師，也期許自己能夠不斷學習、不斷練習、不斷地傾聽、接納、尊重、回應。(PS: 傾聽、接納、尊重、回應其實是我以前高中某位班導的一句經典名句，用來詮釋她所認為的「態度」)\n這一生想做的三件事情 最喜歡\u0026quot;忠心\u0026ldquo;這個形容詞。這一生想要至少能完成三件事：\n寫一本書 站上TED演講 寫一支ios app上架 Don\u0026rsquo;t Prove; Improve 同時，分享一個我很喜歡的影片(人生雞湯？！)\nDon\u0026rsquo;t Prove; Improve ! (來源 )\nMy Resume 如果想要更多認識我個人技術的話以及想要工作介紹可以來這裡 上面那個是我當時初學gulp 架的side project,想要更多知道有關這部分的消息可以看看這個文章 據說我朋友和我說打 gulp resume 就可以找到我上面這篇文章\u0026hellip;看來我的SEO做得很成功呢 呵呵\n技術與工具 興趣 看書 騎腳踏車/旅行 看電影 棒球 目前仍然在這軟體工程中的偉大航道持續前進！Be a better Coder ~\n","date":"Jan 1, 0001","img":"","largeImg":"","permalink":"https://jimmycode.tw/about/","series":null,"smallImg":"","tags":null,"title":"關於我"}]