<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>awsdevday on Jimmy 's Code</title><link>https://jimmycode.tw/tags/awsdevday/</link><description>Recent content in awsdevday on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022 Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sun, 06 Dec 2020 05:27:54 +0000</lastBuildDate><atom:link href="https://jimmycode.tw/tags/awsdevday/index.xml" rel="self" type="application/rss+xml"/><item><title>2020AWSDevDay 一日遊</title><link>https://jimmycode.tw/2020awsdevday-%E4%B8%80%E6%97%A5%E9%81%8A/</link><pubDate>Sun, 06 Dec 2020 05:27:54 +0000</pubDate><guid>https://jimmycode.tw/2020awsdevday-%E4%B8%80%E6%97%A5%E9%81%8A/</guid><description>最近請了一天公假，和很多後端組的同事一起參加今年2020 AWS Dev Day, 這是人生的第一次啊！能夠與很多AWS 的開發者聚再一起，實在是件令人興奮的事，以下就簡短、簡單的分享一下吧！
早上的議程 早上其實是共同的議程，有Pahud 大大分享的「與開發者同行」以及Kim 分享的「技術人的社群影響力」，另外也有趨勢科技分享比較硬技術的「如何在 AWS 上建立大規模實時數據管道」，老實說，第三場有點聽不太懂，感覺與現實我遇到的情境真的相差甚遠，所以很難真正理解與明白他所談的一些概念，大概知道要有所「監測」才能有所證明，如果要證明自己做好，就可以用監測/Dashboard 的方式呈現給非技術性的團隊看，這種技巧可以記一下，至於其他技術關鍵字的部分，像是 AWS kinesis , Apache Flink 等等，可能只是稍微查查 wiki 了，看看以後有沒有機會遇到這樣。
至於其他比較軟的部分，大多都是談談「人生」，但我覺得可以記下的是「技術人的社群影響力」這一場，他讓我也重新再思熱情的重要，回想起當初讀資管、寫程式的小初衷。或許明年，可以選擇某個社群認真參加一下、投入一下，一個人可以走的快、但一群人可以走得更遠啊！
而另外我也很想在明年找一個G0V某個專案，好好給他投入一下，貢獻作為技術者的社會影響力！但說真的，還是要給他認真的付諸實踐才是真的！
謝謝在外面擺攤的DDD TW 的社群義工，當我很認真地問起DDD, 甚至問了很多很基礎很初學的問題都還是很不厭其煩地為我解答！說真的之前就大概聽過DDD，就我的理解上是一種軟體開發方法論，可以將業務知識對應到我們的程式的方法，我覺得真的很適合拿來放在我在做產品的工作場域！希望藉由之後認真地給他投入DDD社群的過程中，真正學習、認識、應用與實踐DDD。畢竟，作為工程師，還是希望自己寫一手漂亮、好維護、可傳承的程式碼與產品啊！Be a better Coder ! Also be a better Architect!
在下午的議程中，我先選擇了Track C 的第一場，之後就都待在Track A了&amp;hellip;
CDK家族介紹：CDK, CDKTF 及 CDK8S 這場還蠻基礎的，因為先前參加過Pahud 的serverless php 工作坊，稍微認識過了CDK ,而在之後也有時候會看Pahud的Youtube影片學習，最近鐵人賽也有熱心人士分享CDK的學習(目前正在學習中) ，所以這場的知識量對我來說真的有點偏少，但也很不錯了，因為我直接跳過一些基礎或歷史直接學CDK難免還是會有點卡卡的，藉這此議程補足之前沒有補上的歷史與基礎也很不錯，當然啦，我覺得我不太認識Kubernetes也是一個小小的致命問題之一，學好Docker 卻沒有學好 Kubernetes真的有點傷啊！ 看來以後要補足這一塊的知識！
運用 AWS Fargate 與 Amazon ECS 的 CI/CD 最佳實踐 這一場談到CICD的最佳實踐，說真的也是有點偏基礎，日常我工作就有在用到了&amp;hellip;不過他談到一個Blue/Green 部署的概念可以放在心上，就是讓舊的版本先飛一陣子，只有一部分的人用新的版本，等到新的版本穩定了，再將原本舊的版本拿掉。這樣的好處是如果到時候要從新版本還原很方便（大概我是記得這樣啦XD）。
技術選型，今天要選 ECS Fargate 還是 ECS EC2 launch types 老實說，他其實沒有講什麼，最後也沒有真的大概指名什麼狀況要選Fargate,什麼時候要選Ec2 (之後可能還有ECS anywhere ?</description></item></channel></rss>