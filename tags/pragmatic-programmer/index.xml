<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pragmatic Programmer on Jimmy 's Code</title><link>https://jimmycode.tw/tags/pragmatic-programmer/</link><description>Recent content in Pragmatic Programmer on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022 Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sat, 30 Apr 2022 14:21:32 +0800</lastBuildDate><atom:link href="https://jimmycode.tw/tags/pragmatic-programmer/index.xml" rel="self" type="application/rss+xml"/><item><title>Pragmatic Programmer：需求坑</title><link>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note2/</link><pubDate>Sat, 30 Apr 2022 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note2/</guid><description>Pragmatic Programmer 他談很多題目，裏面也談到很多如何寫程式的廣泛技巧，例如第一篇我們談到的正交性, 以及知識資產的部分。未來可能我也會陸陸續續分享他各種不同的篇幅與個人領悟。
這次我想要分享他其中一個篇章：需求坑。
做軟體工程師越久，就越覺得這個小篇章所講的有感。我們常常把客戶的“第一次需求”當真，並且就一頭埋入實作它的解決方案。
這種最初的需求並不是真正的需求。客戶可能本身沒有意識到這一點，但其實這種需求是一種邀我們去進一步探索的邀請 如同這本書定義需求是一種過程，是藉由一次又一次的回饋當中循環暸解的。
另外有感而發的是：之前網路上看到某粉專寫道的一句話
有時候我們在實作處理需求時，或許不要總是陷入一定要寫很多程式碼。有的時候不用寫程式的解決方案可能比寫一堆程式碼會是更佳優秀、適合的解喔
小君曰：less code, more better</description></item><item><title>Pragmatic Programmer：知識資產</title><link>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note1/</link><pubDate>Sat, 16 Apr 2022 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note1/</guid><description>Pragmatic Programmer 有談工程師的學習(知識資產)，我覺得蠻有趣的，可以記錄看看 在這個小篇章，我最有印象的是這句話： 管理知識資產與管理金融資產非常相似 像是你管理金融資產會注意以下幾點：
定期投資(固定時間有週期的學習、調整) 多元化(不要把雞蛋放在同一個籃子裡) 管理風險 低買高賣 審查與調整 相對的，你如何管理知識資產，如何進化你自己的程式功力就也是這樣！於是Pragmatic Programmer 這本書就提出幾個務實的建議，我整理如下：
每年至少學一門新語言 每個閱讀一本技術書 也要閱讀非技術的書 上課 參與本地使用者群組或會議 批判性思考：「為什麼」、「這對誰有好處」、「時空背景是什麼」、「何時何地用」、「為什麼會有這個問題」 小君曰：我覺得每一年排一次出去外面面試其實也是個不錯的idea.</description></item><item><title>工程師必讀的書之一：Pragmatic Programmer</title><link>https://jimmycode.tw/posts/2022/04/pragmatic_programmer/</link><pubDate>Sat, 09 Apr 2022 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2022/04/pragmatic_programmer/</guid><description>最近有點水貨，都在讀一些書，不過最近在看得這本書個人私底下認為應該作為工程師必看的一本書之一。原因是你可以從這本書或多或少得到一些啟示、有用的技巧可以帶回到你個人的專案當中，而且他應該算是可以每一年都拿出來複習一遍的好書之一。
這本書如同標題所示：The Pragmatic Programmer。天瓏書局也有在賣，歡迎去購買～(連結 )，
這本書談了很多東西、像是重構、測試、需求與開發等，與之前我看的軟實力不同，前者偏向做人與軟體工程師的人生，但後者更比較偏向軟體工程師的實際操作、練習等等，相比之下，我比較喜歡後者，也就是Pragmatic Programmer
他有點將內容分成很多一小段一小段的，我覺得非常適用於我們目前這種速食閱讀的時代，偶爾就能翻一翻幾個小篇章提醒自己一下，而且它也不一定適用要從頭讀到尾的那種閱讀方式。
像最近他就講到需求是一種過程就很有感覺，他說到菜鳥開發人員最常犯的一種錯誤就是聽到客戶的需求就馬上做，但根據經驗來看，很多時候客戶的初次需求往往不一定就真的是需求，是需要一步一步藉由回饋加以確認的！
另外原本我有點不喜歡我家老闆一直care 我API的規格，甚至有時候明明就這幾個欄位前端不會用到，卻硬是被要求去傳&amp;hellip;，但讀到這裡有個篇章：正交性，主張一個好的系統可以讓其中一個的變化不會影響其他任何一個，舉個例子來說，就像資料庫程式碼與使用者介面應該要是正交的
這不免就讓我發現原來我老闆的顧慮或許是正確的
但是正交性真的也能應用於我與前端溝通用的API嗎？這裡我給個問號
最後，我覺得這本書帶給我新的立志：成為Pragmatic Programmer（務實的工程師） 比起之前我想的，成為專家？成為厲害的工程師？我倒覺得這個flag務實多了
那麼什麼是務實的工程師呢？
重視你手中的工作與手藝(程式碼) 找出合適的解決方案 虛懷若谷、持續學習 小君曰：我是一位務實的Programmer&amp;hellip;&amp;hellip;</description></item></channel></rss>