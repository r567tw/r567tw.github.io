<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>筆記 on Jimmy 's Code</title><link>https://jimmycode.tw/categories/%E7%AD%86%E8%A8%98/</link><description>Recent content in 筆記 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022-{year} Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sat, 16 Apr 2022 14:21:32 +0800</lastBuildDate><atom:link href="https://jimmycode.tw/categories/%E7%AD%86%E8%A8%98/index.xml" rel="self" type="application/rss+xml"/><item><title>Pragmatic Programmer：知識資產</title><link>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note1/</link><pubDate>Sat, 16 Apr 2022 14:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2022/04/pragmatic_programmer_note1/</guid><description>Pragmatic Programmer 有談工程師的學習(知識資產)，我覺得蠻有趣的，可以記錄看看 在這個小篇章，我最有印象的是這句話： 管理知識資產與管理金融資產非常相似 像是你管理金融資產會注意以下幾點：
定期投資(固定時間有週期的學習、調整) 多元化(不要把雞蛋放在同一個籃子裡) 管理風險 低買高賣 審查與調整 相對的，你如何管理知識資產，如何進化你自己的程式功力就也是這樣！於是Pragmatic Programmer 這本書就提出幾個務實的建議，我整理如下：
每年至少學一門新語言 每個閱讀一本技術書 也要閱讀非技術的書 上課 參與本地使用者群組或會議 批判性思考：「為什麼」、「這對誰有好處」、「時空背景是什麼」、「何時何地用」、「為什麼會有這個問題」 小君曰：我覺得每一年排一次出去外面面試其實也是個不錯的idea.</description></item></channel></rss>