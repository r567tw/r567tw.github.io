<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>程式 on Jimmy 's Code</title><link>https://jimmycode.tw/categories/%E7%A8%8B%E5%BC%8F/</link><description>Recent content in 程式 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022 Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Mon, 08 Nov 2021 21:21:32 +0800</lastBuildDate><atom:link href="https://jimmycode.tw/categories/%E7%A8%8B%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>為什麼我要搬家</title><link>https://jimmycode.tw/posts/2021/%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%90%AC%E5%AE%B6/</link><pubDate>Mon, 08 Nov 2021 21:21:32 +0800</pubDate><guid>https://jimmycode.tw/posts/2021/%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%90%AC%E5%AE%B6/</guid><description>前言 最近終於把自己的部落格整理好了，正式從wordpress換到hugo。 為什麼想要搬家呢？因為我覺得
原本wordpress很慢&amp;hellip; wordpress 對 markdown沒有到很友善 看到appleboy大大也搬了 評估一下blog 其實用 static site generator 就好 在網路上輾轉得知(也是剛好最近在學golang), 知道有這樣名為hugo的玩具， 在它的介紹網頁 就大大的介紹自己是The world’s fastest framework for building websites。剛好也想趁這個機會更加學習golang(但其實都是在學Hugo XD)
於是，便開始展開了這場旅行囉～
不過原本的網站還會繼續存在，就等我和主機商的約走完就會結束,所以底下結果比較`https://tech.r567tw.tw`其實就代表原本用wordpress架的舊站 簡單教學 安裝hugo 以Mac為例 1brew install hugo 如果你還想知道其他os怎麼安裝，請參考此 new site 1hugo new site {demo} 這裡的demo你可以替換成任何你想要的名稱
install theme 其實theme資料夾就是要裝你想要在hugo放的畫面&amp;hellip;所以說我感覺hugo非常客製化&amp;hellip; 然後接下來我很懶,就用官網的教學 帶過&amp;hellip;
1cd demo 2git init 3git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 在設定裡說明你裝的主題 在demo資料夾你可以看到config.toml, 沒錯！那就是hugo的設定檔,其實hugo有約定好的列表,好像是從config.toml開始之類的&amp;hellip;詳情可以看看這裡 1baseURL = &amp;#34;http://example.org/&amp;#34; 2languageCode = &amp;#34;en-us&amp;#34; 3title = &amp;#34;My New Hugo Site&amp;#34; 4theme = &amp;#34;ananke&amp;#34; 預覽 1hugo server -D 蹦！ 你的hugo網站架好了</description></item><item><title>Go 學習筆記(6): 寫一個網頁吧！</title><link>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%986-%E5%AF%AB%E4%B8%80%E5%80%8B%E7%B6%B2%E9%A0%81%E5%90%A7%EF%BC%81/</link><pubDate>Sat, 05 Jun 2021 03:35:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%986-%E5%AF%AB%E4%B8%80%E5%80%8B%E7%B6%B2%E9%A0%81%E5%90%A7%EF%BC%81/</guid><description>我自己是PHP 後端工程師，常常在寫網頁、常碰Javascript , html , css 等等，所以，在學這個Go的過程當中，也來學習用go寫一個網頁吧！
Go 與網頁常常有用到的一個套件就叫做 net/http , 他同時也可以做網頁的爬蟲，等等讓我娓娓道來～
網頁版HelloWorld ! 1package main 2import ( 3 &amp;#34;log&amp;#34; 4 &amp;#34;net/http&amp;#34; 5) 6 7func viewHandler(writer http.ResponseWriter, request *http.Request){ 8 message := []byte(&amp;#34;Hello World&amp;#34;) 9 _,err := writer.Write(message) 10 if err != nil { 11 log.Fatal(err) 12 } 13} 14 15func main(){ 16 http.HandleFunc(&amp;#34;/hello&amp;#34;,viewHandler) 17 err := http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;,nil) 18 log.Fatal(err) 19} Template 如果網頁只是簡單的HelloWorld 怎麼行？在Go 裡面還有另外一個套件：html/template , 而使用Execute 的第二個參數可以將資料塞入樣板中。而樣板中很重要的是可以使用{{.}} 等符號
1package main 2import ( 3 &amp;#34;log&amp;#34; 4 &amp;#34;net/http&amp;#34; 5 &amp;#34;html/template&amp;#34; 6) 7 8type TemplateData struct { 9 Name string 10} 11 12func viewHandler(writer http.</description></item><item><title>Go 學習筆記(5): 非同步</title><link>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%985-%E9%9D%9E%E5%90%8C%E6%AD%A5/</link><pubDate>Sat, 15 May 2021 15:44:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%985-%E9%9D%9E%E5%90%8C%E6%AD%A5/</guid><description>學習Go 也到了一段時間了，來學習這個部分：多執行緒
如同我之前寫道其實如果要做很大量的東西應該要用非同步的方式&amp;hellip; 在Go裡面，並發被叫做「Goroutine」，在深入淺出Go 這本書的定義：提供並發，暫停一個工作以啟動另一個工作。而且在有些情境下他們允許並行，同時執行不同的工作
如果你想要用goroutine 其實就在function 前面加一個go 的關鍵字
1func main(){ 2 go a() 3 go b() 4} 然而，由於我們使用到這個非同步的概念，所以我們無法期待method 可以馬上回傳結果，那是Go 去控制工作的進行與安排，所以Go裡面便多了一個概念：Channels，其實就加一個chan 這個詞就好
1var myChannel chan float64 2myChannel = make(chan float64) 這時候我們上面得程式可以改寫成這樣
1func a(myChannel chan string){ 2 myChannel &amp;lt;- &amp;#34;a&amp;#34; 3} 4 5func main(){ 6 myChannel := make(chan string) 7 go a(myChannel) 8 fmt.Println(&amp;lt;-myChannel) 9} 但要注意的是，如果我們make 沒有加第二個參數，那麼我們的Channel 就是個無緩衝的channel ，有就意味著我們必須要每次將資料塞進channel 的時候，每一次都要拉出來，否則會造成channel 被鎖定。
那麼，就讓底下示範一下有緩衝的channel 吧
1func a(myChannel chan string){ 2 myChannel &amp;lt;- &amp;#34;a&amp;#34; 3 myChannel &amp;lt;- &amp;#34;b&amp;#34; 4} 5 6func main(){ 7 myChannel := make(chan string,3) 8 go a(myChannel) 9 fmt.</description></item><item><title>Go 學習筆記(4) – 檔案</title><link>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%984-%E6%AA%94%E6%A1%88/</link><pubDate>Sat, 08 May 2021 00:28:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%984-%E6%AA%94%E6%A1%88/</guid><description>寫程式難免都需要與檔案做互動, 甚者還需要與資料庫溝通。這篇文章將紀錄Go 怎麼與檔案互動的部分&amp;hellip;&amp;hellip;
首先是讀取檔案！
1package main 2 3import ( 4 &amp;#34;bufio&amp;#34; 5 &amp;#34;os&amp;#34; 6 &amp;#34;fmt&amp;#34; 7) 8 9func main(){ 10 var numbers []string 11 file ,_ := os.Open(&amp;#34;input.txt&amp;#34;) // 使用open 開啟檔案 12 scanner := bufio.NewScanner(file) // 必須建立Scanner 這裡讓我有點想起C 13 for scanner.Scan(){ // 這裡的意思是逐行讀取 14 content := scanner.Text() 15 numbers = append(numbers,content) 16 if scanner.Err() != nil { 17 fmt.Println(&amp;#34;scan error&amp;#34;) 18 } 19 } 20 defer file.Close() //defer 會確保函式一定被調用,即便程式提早結束 21 fmt.</description></item><item><title>Go 學習筆記(3): 做套件給別人用</title><link>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%983-%E5%81%9A%E5%A5%97%E4%BB%B6%E7%B5%A6%E5%88%A5%E4%BA%BA%E7%94%A8/</link><pubDate>Sat, 01 May 2021 14:34:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%983-%E5%81%9A%E5%A5%97%E4%BB%B6%E7%B5%A6%E5%88%A5%E4%BA%BA%E7%94%A8/</guid><description>來到學習Go 的第三篇文章，在深入淺出Go 裡面有介紹套件的開發方式，要把他放到GOPath 裡面&amp;hellip; 不過，那好像是很久以前Go的版本了&amp;hellip; 現在，出現了go.mod 和 go.sum , 似乎就沒有那麼麻煩&amp;hellip;
這裡簡介簡單兩個指令：
go mod init {package name} 這個指令會建立go.mod 的檔案 go mod tidy 這個指令會去找你目前寫的go 檔案所引用的package, 去修改go.mod go.mod 有點像是composer.json 和 package.json 記錄著目前所引用的package
而 go.sum 是個天書，像composer.lock 和 package.lock 去鎖住目前的版本&amp;hellip;
然後開一個Go 的Package 有點簡單，但寫與維護應該很複雜，而且我也有點還是搞不太清楚還在學習中&amp;hellip;. 網路上和書中的資源實在有點讓我混亂&amp;hellip;&amp;hellip; 可能等我再稍微釐清一下我再回來更新這一篇文章&amp;hellip;. 請大家勿參考此文章，但如果有指教請大家多多教導我～
總之，我就在github 上面開了一個簡易的greeting repo &amp;hellip;
只要你記得，可以匯出的參數與方法是要大寫開頭，就可以輕輕鬆鬆自己寫一個package 啦
然後在我go run/go install / go build 的時候就能跑了&amp;hellip; 真的好妙&amp;hellip;.
另外啊，可以用註解當成文件，然後人家跑go doc {套件名} /go doc -all {套件名}就可以看到怎麼使用套件，真的蠻方便的，但有一些注意事項
package 的註解必須要在package這個關鍵字以後 function / 變數等等需要在註解前面增加與他同名的名稱 1// Package greeting echo Hello or echo Hi message.</description></item><item><title>Go學習筆記(2): make a game</title><link>https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%982-make-a-game/</link><pubDate>Sat, 17 Apr 2021 05:17:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%982-make-a-game/</guid><description>來到學習Go 的第二篇文章了，來學習一些控制流以及一些基礎東西吧！
條件式 在 Golang 寫條件式很簡單，就是寫個if 加個大括號就好
1// 這裡請記得 &amp;#34;{&amp;#34; 和 if 要同一行，之前自由慣了常常被這件事情雷到！ 2if true { 3 // ...... 4} else if false { 5 // ..... 6} 7 8// 或者你可以使用 if 更短的初始化陳述句 9if count := 5; count&amp;gt;4 { 10 fmt.Println(&amp;#34;count is &amp;#34;,count) 11} 另外有一個比較特別的是，if 區塊裡面的區域變數(使用到:=)是不能使用在if 外面的喔～
請讓我用以下程式碼來做進一步陳述 詳細可以去看 這裏：https://github.com/r567tw/go-practice/blob/master/HelloWorld/if.go 1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5) 6 7// var x = 999 // go 裡面也可以宣告一個超越main範圍以外的超全域變數, 但不建議這麼做 8 9func main() { 10 fmt.</description></item><item><title>Go學習筆記(1): HelloWorld</title><link>https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%981-helloworld/</link><pubDate>Sat, 10 Apr 2021 10:53:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%981-helloworld/</guid><description>在之前寫到今年的計劃 當中，我就說到我想要學Go 語言。同時我自己也買了一本有關於Go 的書：深入淺出Go , 希望藉此督促自己有個比較完整性的學習&amp;hellip;&amp;hellip;
以下是我讀這本書以及學習的心得與筆記，可能有點無聊，高手請跳過、不過如果有看到錯的也請不吝指正！
首先，你要先去安裝好Go&amp;hellip;&amp;hellip;.
程式組成 Go 語言的組成通常有三個部分：
套件子句(package main) import 相關陳述句 (import &amp;quot;fmt&amp;quot;) 主要的程式碼 (func main(){......}) Hello World 程式！ 讓我們先建立一個名為hello.go 的檔案&amp;hellip; 然後在裡面寫這些東西&amp;hellip;
1package main 2import &amp;#34;fmt&amp;#34; 3 4func main(){ 5 fmt.Println(&amp;#34;Hello World&amp;#34;) 6 // 這裡請務必使用 &amp;#34; 否則很容易跳出 invalid character literal (more than one character) 的問題 7} 接下來讓我們對這個檔案做go run hello.go 就可以看到 Hello World 的字眼啦！
Go 的資料型態類別 字串：用雙引號所框起來的任意數量字元 符文(runes) : 用單引號所匡著的單一字元, ex. &amp;lsquo;A&amp;rsquo; , &amp;lsquo;B&amp;rsquo; boolean (bool) numbers float32 , float64 int8 ,int16 ,int32 ,int64 uint uint8 , uint16 ,uint32 ,uint64 byte (檔案專用) tips: 可以透過 reflect 這個套件裡面的TypeOf 方法得知資料的型別</description></item><item><title>談Python: Lambda, Map , Filter 及 Reduce</title><link>https://jimmycode.tw/posts/%E8%AB%87Python-lambda-map-filter-%E5%8F%8A-reduce/</link><pubDate>Sat, 03 Apr 2021 05:21:00 +0000</pubDate><guid>https://jimmycode.tw/posts/%E8%AB%87Python-lambda-map-filter-%E5%8F%8A-reduce/</guid><description>從大二開始研究怎麼當一名駭客之後，開始接觸Python, 出社會後也常常用Python 開發我個人的工具包，可說是這幾年來個人 Python 的功力大漲！
最近在邊寫邊查資料的過程當中，認識到Python的 Lambda,Map和Reduce
於是，就讓我寫一篇文章記錄這一切吧 ＾＾
Lambda 此 Lambda 不是 AWS的Lambda ,我也不知道為什麼這裡要取和AWS的Lambda一樣的名稱哈哈，總之他是一種Python裡面的表示式，可以更加簡便、更加Function programming 的呈現程式碼，不多贅述，我最喜歡 Show me the code了！
1# 通常我們定義Function是長這個樣子（順便我也想練習強型別，Python也支援喔） 2def demoX(x:int) -&amp;gt; int: 3 return x + 10; 4 5print(demoX(20)) //output-&amp;gt; 30 其實蠻落落長的，所以Python說，要有Lambda , 就有Lambda
1demoX = lambda x: x+10 2 3print(demoX(20)) 好了，我附上參考網址結束這一切：
https://openhome.cc/Gossip/Python/LambdaExpression.html Map和Reduce Map , Filter和 Reduce 我想要放在一起說，如果常寫Function Programming的對這兩個單字一定不陌生，Laravel的Collection也有這些方法。沒錯，他們的用法其實和他們的單字意思很像呢！
1# map(function_to_apply, list_of_inputs) 2a = list(map(lambda a: a+2,[1,2,3])) 3print(a) # [3,4,5] map 其實就會迭代列表中的每一個項目，最後回傳出來的是一個map的物件，記得之後要用list才能把它印出來喔
1a = list(filter(lambda a: a&amp;gt;2,[1,2,3,4,5,6])) 2print(a) # [3, 4, 5, 6] filter 其實和map很像，只是它是過濾項目，一樣他是個filter的物件，一樣需要list，所以你的function裡面請回傳出boolean，這我就不多說明啦～</description></item><item><title>Redis筆記</title><link>https://jimmycode.tw/posts/redis%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 13 Mar 2021 04:00:00 +0000</pubDate><guid>https://jimmycode.tw/posts/redis%E7%AD%86%E8%A8%98/</guid><description>最近在玩Redis, 記錄起來才不會忘！
利用Docker 迅速起一個redis container 你可以去官網按照他的說明下載redis, 但我這裡選擇用docker 來起一個簡單的redis 服務首先我的dokcer-compose.yml 是這樣寫：
1# ...(略) 2### Redis Container ####################################### 3 redis: 4 image: redis:alpine 5 ports: 6 - &amp;#34;6379:6379&amp;#34; 7# ...(略) 然後使用 docker-compose up -d 就可以起一個簡單的redis server, 你可以使用Another Redis Desktop Manager 去連線它看看狀況
指令與相關說明 簡單來說，redis 就是一個key-value 的 in-memory 資料庫。
首先，我們需要進去一下redis cli&amp;hellip;只要docker exec -it {你docker-composer.yml 所在的資料夾名稱}\_redis\_1 sh\就可以進入redis container 裡面，之後在container 裡面執行`redis-cli`即可
GET/SET 最簡單你一定要學到的redis 指令就是：SET和 GET!
1127.0.0.1:6379&amp;gt; SET name Jimmy 2OK 3127.0.0.1:6379&amp;gt; GET name 4&amp;#34;Jimmy&amp;#34; MGET/MSET 每次只能設定一個那怎麼行？你可以一次設定多個</description></item><item><title>Python Paramiko 筆記</title><link>https://jimmycode.tw/posts/Python-paramiko-%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 06 Feb 2021 11:05:00 +0000</pubDate><guid>https://jimmycode.tw/posts/Python-paramiko-%E7%AD%86%E8%A8%98/</guid><description>在以前公司工作的時候，有點忘了是遇到什麼情境，總之我就看到Python 有這樣的一個套件庫：Paramiko
話不多說，我們就給大家來看文件吧：http://www.paramiko.org/ 然後就結束這一回合（阿不是！
他是一個和SSH 有關的套件庫，是可以使用Python 直接在遠端給他執行程式起來&amp;hellip; 啊寫文章的同時我就想到了！之前我們好像是要做那個資料庫備份什麼的, 然後有發現說有時server 會不夠空間backup , 所以後來我就用這個套件透過本機去連結遠端執行 df -h 的指令，以方便告訴我到底有沒有足夠的空間這樣&amp;hellip;. 不然每次連線打指令實在很麻煩&amp;hellip;
然後 , 我最喜歡的是： show you the code !
1import paramiko 2 3paramiko.util.log_to_file(&amp;#39;paramilo.log&amp;#39;) 4key = paramiko.RSAKey.from_private_key_file(&amp;#34;pem path...&amp;#34;) 5 6ssh = paramiko.SSHClient() 7ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) 8ssh.connect(hostname=&amp;#39;......&amp;#39;,username=&amp;#39;user&amp;#39;,pkey=key) 9 10stdin, stdout, stderr = ssh.exec_command(&amp;#39;df -h&amp;#39;) 11 12result = open(&amp;#39;log.txt&amp;#39;,&amp;#39;wb&amp;#39;) 13result.write(stdout.read()) 14result.close() 15 16ssh.close() 小君曰：我到底寫了什麼&amp;hellip;?</description></item><item><title>aws step function 筆記</title><link>https://jimmycode.tw/posts/aws-step-function-%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 16 Jan 2021 13:06:34 +0000</pubDate><guid>https://jimmycode.tw/posts/aws-step-function-%E7%AD%86%E8%A8%98/</guid><description>最近工作用到一些工具，使用到AWS step function , 因此在這裡也筆記一下&amp;hellip; 也在公司後端組例會分享了一下（以下就是我分享的PPT ）：
https://www.slideshare.net/ssusereb2ee2/aws-stepfunction 其實我覺得我用的情境很簡單，只是用Map 的方式啟動lambda . 這個 lambda 就是我用來處理下載與上傳到s3指定位置&amp;hellip; 說真的應用的情境真的很不多&amp;hellip; 還有更多著墨的空間。
另外，自己同時也針對此寫了兩個版本，用SAM 和 用 CDK 的版本&amp;hellip;
一、CDK 的版本
1import * as cdk from &amp;#39;@aws-cdk/core&amp;#39;; 2import * as lambda from &amp;#34;@aws-cdk/aws-lambda&amp;#34; 3import * as stepfunctions from &amp;#34;@aws-cdk/aws-stepfunctions&amp;#34; 4import * as tasks from &amp;#34;@aws-cdk/aws-stepfunctions-tasks&amp;#34; 5import * as logs from &amp;#34;@aws-cdk/aws-logs&amp;#34; 6import * as s3 from &amp;#34;@aws-cdk/aws-s3&amp;#34; 7import * as ec2 from &amp;#34;@aws-cdk/aws-ec2&amp;#34; 8import * as dotenv from &amp;#39;dotenv&amp;#39;; 9 10export class CdkLambdaStack extends cdk.</description></item><item><title>Pytest 簡單教學</title><link>https://jimmycode.tw/posts/pytest-%E7%B0%A1%E5%96%AE%E6%95%99%E5%AD%B8/</link><pubDate>Sun, 08 Sep 2019 08:03:52 +0000</pubDate><guid>https://jimmycode.tw/posts/pytest-%E7%B0%A1%E5%96%AE%E6%95%99%E5%AD%B8/</guid><description>最近在整理自己的履歷和side projects&amp;hellip;&amp;hellip;，順便也買了一些線上課程學習，其中有一門課是教你演算法，舉Leetcode 裡面的題目為例，如果再工程師界久了都知道，Leetcode 是一個刷題網站，而我身為想要變強的工程師當然不可以忽略這個網站啊&amp;hellip;&amp;hellip; 因此在bitbucket 開了一個專案，放置一些藉由上課所學習的解題檔案（線上課程用的是JAVA），但我想要轉成Python ，藉此提升自己的Python實力~~
如果有興趣可以來看看，但因為目前上課進度緩慢，其實也才幾題而已XD https://bitbucket.org/r567tw/leetcode/src/master/ 不過在本機跑的時候也想要自己就先在本機測試一下不要用leetcode 在那邊幫我測試&amp;hellip;但之前都是用類似以下的語法
1test = Solution(); #先new 一個Solution 的class 2print(Solution.method(...)) #然後呼叫方法一個一個用肉眼檢查 這種方法超級土法煉鋼的&amp;hellip; 完全就不是工程師的style ~~
而我是一個php工程師，之前花了一點時間了解phpunit , 然後也有在一些專案寫一些UnitTest&amp;hellip; 心想&amp;hellip;. 難道Python 沒有嗎？
叮咚！ 原來就是Pytest 啊！ 我現在leetcode 刷題要在本機測試都會使用這個來玩玩看的！接下來我要介紹怎麼使用Pytest，以及我如何將這個導入到我這個leetcode 的練習專案。
安裝Pytest 首先你要使用pytest 之前就一定要確認pytest 有沒有在你的電腦當中（廢話！），所以你可以參考[這個文件][1]來幫助你安裝pytest ,其實也就這麼簡單
1$ pip install pytest 然後其實很簡單，就是使用pytest 這個指令或者pip freeze 確認pytest 在不在就好了啊
使用Pytest 其實和phpunit 很像，其實也是用所謂“assert”的方式確認答案是否正確，以底下程式碼為例說明：
1from solutions.atoi import Solution 2 3 4def test_myAtoi(): 5 test = Solution() 6 assert(test.myAtoi(&amp;#34;42&amp;#34;) == 42) 7 assert(test.myAtoi(&amp;#34; -42&amp;#34;) == -42) 8 assert(test.</description></item><item><title>Laravel Tinker 一行就退出的問題</title><link>https://jimmycode.tw/posts/laravel-tinker-%E4%B8%80%E8%A1%8C%E5%B0%B1%E9%80%80%E5%87%BA%E7%9A%84%E5%95%8F%E9%A1%8C/</link><pubDate>Sun, 11 Aug 2019 13:20:28 +0000</pubDate><guid>https://jimmycode.tw/posts/laravel-tinker-%E4%B8%80%E8%A1%8C%E5%B0%B1%E9%80%80%E5%87%BA%E7%9A%84%E5%95%8F%E9%A1%8C/</guid><description>最近使用laravel ，發現遇到一行就退出的問題，發現原來是php 7.3 的問題&amp;hellip; 詳細資源請參考：https://learnku.com/laravel/t/21165 解決方案 建立 ~/.config/psysh/config.php 這個檔案
然後在這個檔案裡面寫道
1&amp;lt;?php 2return [ 3 &amp;#39;usePcntl&amp;#39; =&amp;gt; false, 4]; 之後就解決了這個一行就退出的問題囉～</description></item><item><title>Pytube 簡單教學</title><link>https://jimmycode.tw/posts/pytube-%E7%B0%A1%E5%96%AE%E6%95%99%E5%AD%B8/</link><pubDate>Sun, 03 Mar 2019 09:24:30 +0000</pubDate><guid>https://jimmycode.tw/posts/pytube-%E7%B0%A1%E5%96%AE%E6%95%99%E5%AD%B8/</guid><description>來寫個簡單的Python 教學好了，對了！ 去年我有挑戰it 幫鐵人賽，參加的是自我挑戰組，並且自己訂的主題就是Python 30天！ 歡迎大家去看看！
連結於此 對於鐵人賽完賽的心得不必多說，我想已經都寫在最後一天了，總之就是覺得自己還有很大的成長空間，下次參加鐵人賽一定要有更充足的準備和題目。
不得不說，這次鐵人賽的獎品
我個人覺得好浮誇&amp;hellip;&amp;hellip;
好了，簡單交代近況也夠了，進入主題來談談Python 好用的套件pytube 吧！
pytube 是用來可以抓youtube的影片，首先，你必須先安裝它
1$ pip install pytube 接下來你可以確認一下pytube 是否正常運作？
1$ pytube --version 2$ pytube 9.4.0 如果你是最新安裝pytube version 應該會是9.5.1 , 不過pytube 9.5.1 有些問題，可以參考此連結 解決問題
接下來我們就可以開始寫下載youtube影片的程式啦！
這裡我只是簡單呈現怎麼撰寫，詳細與延伸可以參考文件：https://Python-pytube.readthedocs.io/en/latest/# 小君曰：不知道為什麼文件的版本似乎落後了我目前寫的版本&amp;hellip;
就是這麼簡單！！！！
1from pytube import YouTube 2 3url =input(&amp;#39;請輸入你要下載的youtube網址： &amp;#39;) 4print(&amp;#39;下載 來自&amp;#39;+url+&amp;#39; 的youtube影片中...&amp;#39;) 5YouTube(url).streams.first().download() 像我自己想要更加炫技一下就會想知道我目前youtube影片的名字的話可以這樣寫&amp;hellip;.. 加入beautifulSoup 這個可以分析網頁的套件。
1from pytube import YouTube 2import requests 3from bs4 import BeautifulSoup 4 5url =input(&amp;#39;請輸入你要下載的youtube網址： &amp;#39;) 6 7# 先去youtube 上看看這部影片的名字 8request=requests.</description></item><item><title>laravel-migration筆記</title><link>https://jimmycode.tw/posts/laravel-migration%E7%AD%86%E8%A8%98/</link><pubDate>Mon, 05 Nov 2018 13:36:22 +0000</pubDate><guid>https://jimmycode.tw/posts/laravel-migration%E7%AD%86%E8%A8%98/</guid><description>資料庫的設定 修改env 檔 1...(略) 2DB_CONNECTION={填入你的db 類型} 3DB_HOST= {填入你的db server} 4DB_PORT={填入你的db server port} 5DB_DATABASE={填入你的db name} 6DB_USERNAME={填入你的db user name} 7DB_PASSWORD={填入你的db password} 8...（略） 關於migration 的指令 1php artisan make:migration {name} (--create={table}/--table={table}) 2php artisan migrate # 執行migrate 3php artisan migrate:rollback #恢復上一版本得migration 4php artisan migrate:reset #重新reset 5php artisan migrate:refresh #重新建立 補充：除了make migrate 的指令其他都可以在加入 --seed 以順便一起跑seeder</description></item><item><title>Laravel 使用心得:用laravel 做一個超簡單的文章CRUD</title><link>https://jimmycode.tw/posts/laravel-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E7%94%A8laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E8%B6%85%E7%B0%A1%E5%96%AE%E7%9A%84%E6%96%87%E7%AB%A0crud/</link><pubDate>Sun, 04 Nov 2018 13:34:16 +0000</pubDate><guid>https://jimmycode.tw/posts/laravel-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E7%94%A8laravel-%E5%81%9A%E4%B8%80%E5%80%8B%E8%B6%85%E7%B0%A1%E5%96%AE%E7%9A%84%E6%96%87%E7%AB%A0crud/</guid><description>最近因為工作，嘗試使用Laravel 更新我目前手上的專案網站。恩&amp;hellip;&amp;hellip;這陣子使用心得有二
(1) 真的好好用阿
(2) laravel 真是博大精深，因為用一套framwork 就要跟隨那一套framework的規則走，有時候都覺得laravel 怎麼可以設計得這麼活!!! 原來還可以這樣寫XDDD
關於小弟的PHP旅程 小弟一開始，是認識到CMS，從而知道當時算是CMS界的霸主(不知道現在還是不是XD)–WordPress! 當時使用著使用著，還蠻方便的!! 而不知道為甚麼，可能我真的很喜歡寫程式使然~ 記得一開始入坑是因為一支很屌的Yahoo 即時通整人程式(哈哈 超屌的!! 我都覺得厲害)，加上小弟讀資料處理科，當時學習的是Visual Basic，而且學的還不錯 ,基於被整就要整回去的「報復心態」，開始從整人程式起家&amp;hellip;&amp;hellip;.寫一些讓電腦關機、無限迴圈等等超無聊的小把戲&amp;hellip;.到了大學讀資管系，有一陣子荒廢了這部分&amp;hellip;..直到某個時候wordpress ，也不知道為甚麼的，居然開始撰寫wordpress 佈景主題，小弟寫了兩套，分別是 FangJRdesigner 和本站所使用的JimmyFDesginer 說真的，前面那一套我已經懶得更新了，或許後面這一套會持續在更新(畢竟是本站在使用的，小弟也不知道會不會有空XD) ，漸漸的，我學習及撰寫PHP 純Script 已經好一段時間，當然這段期間也因為CMS界打滾認識到Jommla 和Drupal 等用php 所寫的cms，但最後我還是選擇用Wordpress 架站。
這幾年藉由認識到Hahow 這個募資課程網站，正好有人在教Laravel ，說來也巧小弟也存了一些錢，加上早以心儀framework已久(一直苦於沒有師傅領進門以及沒有恆心毅力學習)，後來就馬上買了那門課程，在上課的過程，發現Laravel 的好用之處以及為甚麼大家都這麼推framwork~~~
但是聽得看得都比不上實際做的，說真的最近才有時間去用laravel 更新我的專案，藉由實做的過程中，漸漸得認識到底甚麼是MVC 到底甚麼樣的方式可以寫讓人看得懂得程式。 最近因為一些工作上的挫敗以及最近在學Laravel 漸漸體認到 雖然解決問題很重要，但要寫出一個讓人看得懂得程式碼及有藝術的程式碼也是很重要的!
使用Laravel 做一個超級簡單的部落格 對我來說，如同前面我寫的文章(傳送門 )，不過建議大家還是要對於php 物件導向有個簡單基礎的認識，這樣才大概比較了解我所寫的(可能也不會?!)，這裡不做太難的東西，就單純對文章的CRUD而已，以及使用者的登入登出&amp;hellip;..兩個表：User 和 Post
DB migration Laravel 的設計者真的很聰明，以前我從沒想到，原來db schema 是可以帶著走的，而且藉由env的設計，就算上傳了git 只要我不上傳真正的env(保護自己的資料)，藉由一些簡單的步驟 也可以無痛轉移! 真的超強!
首先，我們必須先新增一個migration 檔
php artisan make:migration create_post_table --create=posts
只要下了這個指令就可以做一個create db table schema，接下來你只要在database 資料夾下migrations 底下</description></item><item><title>簡單的CRUD 操作</title><link>https://jimmycode.tw/posts/%E7%B0%A1%E5%96%AE%E7%9A%84crud-%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 04 Oct 2018 13:28:52 +0000</pubDate><guid>https://jimmycode.tw/posts/%E7%B0%A1%E5%96%AE%E7%9A%84crud-%E6%93%8D%E4%BD%9C/</guid><description>緣起 我們公司最近要徵募新人，說到要給新人出怎麼樣的題目&amp;hellip;.談到出個簡單的部落格實做(包含登入登出)&amp;hellip;.說真的這個題目的範圍可大可小&amp;hellip;.對我來說就只是要考所謂CRUD的操作-就是新增-查詢-更新-刪除。於是就問我這個非常菜的菜鳥能不能在這短時間內做出來&amp;hellip;..說真的我是有點躍躍欲試&amp;hellip;於是便開啟這樣的練習&amp;hellip;.
所有程式碼都在這裡：https://github.com/r567tw/easy_blog_practice 這裡我應用了PDO的技術，並且也記錄一些筆記&amp;hellip;&amp;hellip;
Initial 1$db = new PDO($dsn, $user,$password ); Create 1$insert=$db-&amp;gt;prepare(&amp;#34;insert into posts (title,post) values (:title,:post)&amp;#34;); 2$insert-&amp;gt;bindParam(&amp;#34;:title&amp;#34;,$_POST[&amp;#39;title&amp;#39;]); 3$insert-&amp;gt;bindParam(&amp;#34;:post&amp;#34;,$_POST[&amp;#39;posts&amp;#39;]); 4$insert-&amp;gt;execute(); Review 1$sql=&amp;#34;select * from posts&amp;#34;; 2$posts=$db-&amp;gt;query($sql); 3$posts=$posts-&amp;gt;fetchAll(); Update 1$update=$db-&amp;gt;prepare(&amp;#34;update posts set title=:title,post=:post,update_time=:update where id=:id&amp;#34;); 2$update-&amp;gt;bindParam(&amp;#34;:title&amp;#34;,$_POST[&amp;#39;title&amp;#39;]); 3$update-&amp;gt;bindParam(&amp;#34;:post&amp;#34;,$_POST[&amp;#39;posts&amp;#39;]); 4$update-&amp;gt;bindParam(&amp;#34;:update&amp;#34;,date(&amp;#34;Y:m:d H:i:s&amp;#34;)); 5$update-&amp;gt;bindParam(&amp;#34;:id&amp;#34;,$_POST[&amp;#39;id&amp;#39;]); 6$update-&amp;gt;execute(); Delete 1$delete=$db-&amp;gt;prepare(&amp;#34;delete from posts where id=:id&amp;#34;); 2$delete-&amp;gt;bindParam(&amp;#34;:id&amp;#34;,$_GET[&amp;#39;id&amp;#39;]); 3$delete-&amp;gt;execute(); 判斷是否有成功執行
1$delete-&amp;gt;rowCount()&amp;gt;0 登入登出 首先必須先開啟Session
1session_start(); 當登入時必須宣告一個session的參數
1$_SESSION[index]=Value 之後就判斷這個session實數就能時做出登入登出啦
這麼簡單的東西我花了一個半小時做完~ 是不是有點久阿哈哈?
工作上學習到的小技巧 1簡單輸出成Excel的程式碼
1header(&amp;#34;Content-type:application/vnd.ms-excel&amp;#34;); header(&amp;#34;Content-Disposition:filename=filename.xls&amp;#34;); 接下來只要在此段程式碼底下宣告HTML的Table，只要打開這個網頁就會輸出Excel檔案
2.MySQL 應用CASE 子句
1SELECT count(CASE (&amp;#34;欄位名&amp;#34;) WHEN &amp;#34;條件1&amp;#34; THEN 1 ELSE NULL END) FROM &amp;#34;表格名&amp;#34;; 可以在同一條SQL查詢出來這個欄位在這個條件下所出來的個數&amp;hellip;</description></item></channel></rss>