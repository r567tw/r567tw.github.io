<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go 學習筆記 on Jimmy 's Code</title><link>https://jimmycode.tw/series/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link><description>Recent content in go 學習筆記 on Jimmy 's Code</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2022-{year} Jimmy Fang. All Rights Reserved.</copyright><lastBuildDate>Sat, 05 Jun 2021 03:35:00 +0000</lastBuildDate><atom:link href="https://jimmycode.tw/series/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 學習筆記(6): 寫一個網頁吧！</title><link>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%986-%E5%AF%AB%E4%B8%80%E5%80%8B%E7%B6%B2%E9%A0%81%E5%90%A7%EF%BC%81/</link><pubDate>Sat, 05 Jun 2021 03:35:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%986-%E5%AF%AB%E4%B8%80%E5%80%8B%E7%B6%B2%E9%A0%81%E5%90%A7%EF%BC%81/</guid><description>我自己是PHP 後端工程師，常常在寫網頁、常碰Javascript , html , css 等等，所以，在學這個Go的過程當中，也來學習用go寫一個網頁吧！
Go 與網頁常常有用到的一個套件就叫做 net/http , 他同時也可以做網頁的爬蟲，等等讓我娓娓道來～
網頁版HelloWorld ! 1package main 2import ( 3 &amp;#34;log&amp;#34; 4 &amp;#34;net/http&amp;#34; 5) 6 7func viewHandler(writer http.ResponseWriter, request *http.Request){ 8 message := []byte(&amp;#34;Hello World&amp;#34;) 9 _,err := writer.Write(message) 10 if err != nil { 11 log.Fatal(err) 12 } 13} 14 15func main(){ 16 http.HandleFunc(&amp;#34;/hello&amp;#34;,viewHandler) 17 err := http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;,nil) 18 log.Fatal(err) 19} Template 如果網頁只是簡單的HelloWorld 怎麼行？在Go 裡面還有另外一個套件：html/template , 而使用Execute 的第二個參數可以將資料塞入樣板中。而樣板中很重要的是可以使用{{.}} 等符號
1package main 2import ( 3 &amp;#34;log&amp;#34; 4 &amp;#34;net/http&amp;#34; 5 &amp;#34;html/template&amp;#34; 6) 7 8type TemplateData struct { 9 Name string 10} 11 12func viewHandler(writer http.</description></item><item><title>Go 學習筆記(5): 非同步</title><link>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%985-%E9%9D%9E%E5%90%8C%E6%AD%A5/</link><pubDate>Sat, 15 May 2021 15:44:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%985-%E9%9D%9E%E5%90%8C%E6%AD%A5/</guid><description>學習Go 也到了一段時間了，來學習這個部分：多執行緒
如同我之前寫道其實如果要做很大量的東西應該要用非同步的方式&amp;hellip; 在Go裡面，並發被叫做「Goroutine」，在深入淺出Go 這本書的定義：提供並發，暫停一個工作以啟動另一個工作。而且在有些情境下他們允許並行，同時執行不同的工作
如果你想要用goroutine 其實就在function 前面加一個go 的關鍵字
1func main(){ 2 go a() 3 go b() 4} 然而，由於我們使用到這個非同步的概念，所以我們無法期待method 可以馬上回傳結果，那是Go 去控制工作的進行與安排，所以Go裡面便多了一個概念：Channels，其實就加一個chan 這個詞就好
1var myChannel chan float64 2myChannel = make(chan float64) 這時候我們上面得程式可以改寫成這樣
1func a(myChannel chan string){ 2 myChannel &amp;lt;- &amp;#34;a&amp;#34; 3} 4 5func main(){ 6 myChannel := make(chan string) 7 go a(myChannel) 8 fmt.Println(&amp;lt;-myChannel) 9} 但要注意的是，如果我們make 沒有加第二個參數，那麼我們的Channel 就是個無緩衝的channel ，有就意味著我們必須要每次將資料塞進channel 的時候，每一次都要拉出來，否則會造成channel 被鎖定。
那麼，就讓底下示範一下有緩衝的channel 吧
1func a(myChannel chan string){ 2 myChannel &amp;lt;- &amp;#34;a&amp;#34; 3 myChannel &amp;lt;- &amp;#34;b&amp;#34; 4} 5 6func main(){ 7 myChannel := make(chan string,3) 8 go a(myChannel) 9 fmt.</description></item><item><title>Go 學習筆記(4) – 檔案</title><link>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%984-%E6%AA%94%E6%A1%88/</link><pubDate>Sat, 08 May 2021 00:28:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%984-%E6%AA%94%E6%A1%88/</guid><description>寫程式難免都需要與檔案做互動, 甚者還需要與資料庫溝通。這篇文章將紀錄Go 怎麼與檔案互動的部分&amp;hellip;&amp;hellip;
首先是讀取檔案！
1package main 2 3import ( 4 &amp;#34;bufio&amp;#34; 5 &amp;#34;os&amp;#34; 6 &amp;#34;fmt&amp;#34; 7) 8 9func main(){ 10 var numbers []string 11 file ,_ := os.Open(&amp;#34;input.txt&amp;#34;) // 使用open 開啟檔案 12 scanner := bufio.NewScanner(file) // 必須建立Scanner 這裡讓我有點想起C 13 for scanner.Scan(){ // 這裡的意思是逐行讀取 14 content := scanner.Text() 15 numbers = append(numbers,content) 16 if scanner.Err() != nil { 17 fmt.Println(&amp;#34;scan error&amp;#34;) 18 } 19 } 20 defer file.Close() //defer 會確保函式一定被調用,即便程式提早結束 21 fmt.</description></item><item><title>Go 學習筆記(3): 做套件給別人用</title><link>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%983-%E5%81%9A%E5%A5%97%E4%BB%B6%E7%B5%A6%E5%88%A5%E4%BA%BA%E7%94%A8/</link><pubDate>Sat, 01 May 2021 14:34:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%983-%E5%81%9A%E5%A5%97%E4%BB%B6%E7%B5%A6%E5%88%A5%E4%BA%BA%E7%94%A8/</guid><description>來到學習Go 的第三篇文章，在深入淺出Go 裡面有介紹套件的開發方式，要把他放到GOPath 裡面&amp;hellip; 不過，那好像是很久以前Go的版本了&amp;hellip; 現在，出現了go.mod 和 go.sum , 似乎就沒有那麼麻煩&amp;hellip;
這裡簡介簡單兩個指令：
go mod init {package name} 這個指令會建立go.mod 的檔案 go mod tidy 這個指令會去找你目前寫的go 檔案所引用的package, 去修改go.mod go.mod 有點像是composer.json 和 package.json 記錄著目前所引用的package
而 go.sum 是個天書，像composer.lock 和 package.lock 去鎖住目前的版本&amp;hellip;
然後開一個Go 的Package 有點簡單，但寫與維護應該很複雜，而且我也有點還是搞不太清楚還在學習中&amp;hellip;. 網路上和書中的資源實在有點讓我混亂&amp;hellip;&amp;hellip; 可能等我再稍微釐清一下我再回來更新這一篇文章&amp;hellip;. 請大家勿參考此文章，但如果有指教請大家多多教導我～
總之，我就在github 上面開了一個簡易的greeting repo &amp;hellip;
只要你記得，可以匯出的參數與方法是要大寫開頭，就可以輕輕鬆鬆自己寫一個package 啦
然後在我go run/go install / go build 的時候就能跑了&amp;hellip; 真的好妙&amp;hellip;.
另外啊，可以用註解當成文件，然後人家跑go doc {套件名} /go doc -all {套件名}就可以看到怎麼使用套件，真的蠻方便的，但有一些注意事項
package 的註解必須要在package這個關鍵字以後 function / 變數等等需要在註解前面增加與他同名的名稱 1// Package greeting echo Hello or echo Hi message.</description></item><item><title>Go學習筆記(2): make a game</title><link>https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%982-make-a-game/</link><pubDate>Sat, 17 Apr 2021 05:17:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%982-make-a-game/</guid><description>來到學習Go 的第二篇文章了，來學習一些控制流以及一些基礎東西吧！
條件式 在 Golang 寫條件式很簡單，就是寫個if 加個大括號就好
1// 這裡請記得 &amp;#34;{&amp;#34; 和 if 要同一行，之前自由慣了常常被這件事情雷到！ 2if true { 3 // ...... 4} else if false { 5 // ..... 6} 7 8// 或者你可以使用 if 更短的初始化陳述句 9if count := 5; count&amp;gt;4 { 10 fmt.Println(&amp;#34;count is &amp;#34;,count) 11} 另外有一個比較特別的是，if 區塊裡面的區域變數(使用到:=)是不能使用在if 外面的喔～
請讓我用以下程式碼來做進一步陳述 詳細可以去看 這裏：https://github.com/r567tw/go-practice/blob/master/HelloWorld/if.go
1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5) 6 7// var x = 999 // go 裡面也可以宣告一個超越main範圍以外的超全域變數, 但不建議這麼做 8 9func main() { 10 fmt.</description></item><item><title>Go學習筆記(1): HelloWorld</title><link>https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%981-helloworld/</link><pubDate>Sat, 10 Apr 2021 10:53:00 +0000</pubDate><guid>https://jimmycode.tw/posts/go%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%981-helloworld/</guid><description>在之前寫到今年的計劃 當中，我就說到我想要學Go 語言。同時我自己也買了一本有關於Go 的書：深入淺出Go , 希望藉此督促自己有個比較完整性的學習&amp;hellip;&amp;hellip;
以下是我讀這本書以及學習的心得與筆記，可能有點無聊，高手請跳過、不過如果有看到錯的也請不吝指正！
首先，你要先去安裝好Go&amp;hellip;&amp;hellip;.
程式組成 Go 語言的組成通常有三個部分：
套件子句(package main) import 相關陳述句 (import &amp;quot;fmt&amp;quot;) 主要的程式碼 (func main(){......}) Hello World 程式！ 讓我們先建立一個名為hello.go 的檔案&amp;hellip; 然後在裡面寫這些東西&amp;hellip;
1package main 2import &amp;#34;fmt&amp;#34; 3 4func main(){ 5 fmt.Println(&amp;#34;Hello World&amp;#34;) 6 // 這裡請務必使用 &amp;#34; 否則很容易跳出 invalid character literal (more than one character) 的問題 7} 接下來讓我們對這個檔案做go run hello.go 就可以看到 Hello World 的字眼啦！
Go 的資料型態類別 字串：用雙引號所框起來的任意數量字元 符文(runes) : 用單引號所匡著的單一字元, ex. &amp;lsquo;A&amp;rsquo; , &amp;lsquo;B&amp;rsquo; boolean (bool) numbers float32 , float64 int8 ,int16 ,int32 ,int64 uint uint8 , uint16 ,uint32 ,uint64 byte (檔案專用) tips: 可以透過 reflect 這個套件裡面的TypeOf 方法得知資料的型別</description></item></channel></rss>